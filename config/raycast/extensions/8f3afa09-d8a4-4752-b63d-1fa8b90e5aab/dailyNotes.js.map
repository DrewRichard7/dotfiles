{
  "version": 3,
  "sources": ["../node_modules/chrono-node/src/utils/pattern.ts", "../node_modules/dayjs/dayjs.min.js", "../node_modules/chrono-node/src/calculation/years.ts", "../node_modules/chrono-node/src/locales/en/constants.ts", "../node_modules/dayjs/plugin/quarterOfYear.js", "../node_modules/chrono-node/src/utils/dayjs.ts", "../node_modules/chrono-node/src/timezone.ts", "../node_modules/chrono-node/src/results.ts", "../node_modules/chrono-node/src/common/parsers/AbstractParserWithWordBoundary.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENTimeUnitWithinFormatParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENMonthNameLittleEndianParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENMonthNameMiddleEndianParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENMonthNameParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENCasualYearMonthDayParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENSlashMonthFormatParser.ts", "../node_modules/chrono-node/src/common/parsers/AbstractTimeExpressionParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENTimeExpressionParser.ts", "../node_modules/chrono-node/src/utils/timeunits.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENTimeUnitAgoFormatParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENTimeUnitLaterFormatParser.ts", "../node_modules/chrono-node/src/common/abstractRefiners.ts", "../node_modules/chrono-node/src/common/refiners/AbstractMergeDateRangeRefiner.ts", "../node_modules/chrono-node/src/locales/en/refiners/ENMergeDateRangeRefiner.ts", "../node_modules/chrono-node/src/calculation/mergingCalculation.ts", "../node_modules/chrono-node/src/common/refiners/AbstractMergeDateTimeRefiner.ts", "../node_modules/chrono-node/src/locales/en/refiners/ENMergeDateTimeRefiner.ts", "../node_modules/chrono-node/src/common/refiners/ExtractTimezoneAbbrRefiner.ts", "../node_modules/chrono-node/src/common/refiners/ExtractTimezoneOffsetRefiner.ts", "../node_modules/chrono-node/src/common/refiners/OverlapRemovalRefiner.ts", "../node_modules/chrono-node/src/common/refiners/ForwardDateRefiner.ts", "../node_modules/chrono-node/src/common/refiners/UnlikelyFormatFilter.ts", "../node_modules/chrono-node/src/common/parsers/ISOFormatParser.ts", "../node_modules/chrono-node/src/common/refiners/MergeWeekdayComponentRefiner.ts", "../node_modules/chrono-node/src/configurations.ts", "../node_modules/chrono-node/src/common/casualReferences.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENCasualDateParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENCasualTimeParser.ts", "../node_modules/chrono-node/src/calculation/weeks.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENWeekdayParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENRelativeDateFormatParser.ts", "../node_modules/chrono-node/src/chrono.ts", "../node_modules/chrono-node/src/common/parsers/SlashDateFormatParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENTimeUnitCasualRelativeFormatParser.ts", "../node_modules/chrono-node/src/locales/en/refiners/ENMergeRelativeDateRefiner.ts", "../node_modules/chrono-node/src/locales/en/index.ts", "../node_modules/chrono-node/src/locales/de/parsers/DETimeExpressionParser.ts", "../node_modules/chrono-node/src/locales/de/constants.ts", "../node_modules/chrono-node/src/locales/de/parsers/DEWeekdayParser.ts", "../node_modules/chrono-node/src/locales/de/parsers/DESpecificTimeExpressionParser.ts", "../node_modules/chrono-node/src/locales/de/refiners/DEMergeDateRangeRefiner.ts", "../node_modules/chrono-node/src/locales/de/refiners/DEMergeDateTimeRefiner.ts", "../node_modules/chrono-node/src/locales/de/parsers/DECasualTimeParser.ts", "../node_modules/chrono-node/src/locales/de/parsers/DECasualDateParser.ts", "../node_modules/chrono-node/src/locales/de/parsers/DEMonthNameLittleEndianParser.ts", "../node_modules/chrono-node/src/locales/de/parsers/DETimeUnitRelativeFormatParser.ts", "../node_modules/chrono-node/src/locales/de/index.ts", "../node_modules/chrono-node/src/locales/fr/parsers/FRCasualDateParser.ts", "../node_modules/chrono-node/src/locales/fr/parsers/FRCasualTimeParser.ts", "../node_modules/chrono-node/src/locales/fr/parsers/FRTimeExpressionParser.ts", "../node_modules/chrono-node/src/locales/fr/refiners/FRMergeDateTimeRefiner.ts", "../node_modules/chrono-node/src/locales/fr/refiners/FRMergeDateRangeRefiner.ts", "../node_modules/chrono-node/src/locales/fr/constants.ts", "../node_modules/chrono-node/src/locales/fr/parsers/FRWeekdayParser.ts", "../node_modules/chrono-node/src/locales/fr/parsers/FRSpecificTimeExpressionParser.ts", "../node_modules/chrono-node/src/locales/fr/parsers/FRMonthNameLittleEndianParser.ts", "../node_modules/chrono-node/src/locales/fr/parsers/FRTimeUnitAgoFormatParser.ts", "../node_modules/chrono-node/src/locales/fr/parsers/FRTimeUnitWithinFormatParser.ts", "../node_modules/chrono-node/src/locales/fr/parsers/FRTimeUnitRelativeFormatParser.ts", "../node_modules/chrono-node/src/locales/fr/index.ts", "../node_modules/chrono-node/src/locales/ja/constants.ts", "../node_modules/chrono-node/src/locales/ja/parsers/JPStandardParser.ts", "../node_modules/chrono-node/src/locales/ja/refiners/JPMergeDateRangeRefiner.ts", "../node_modules/chrono-node/src/locales/ja/parsers/JPCasualDateParser.ts", "../node_modules/chrono-node/src/locales/ja/index.ts", "../node_modules/chrono-node/src/locales/pt/constants.ts", "../node_modules/chrono-node/src/locales/pt/parsers/PTWeekdayParser.ts", "../node_modules/chrono-node/src/locales/pt/parsers/PTTimeExpressionParser.ts", "../node_modules/chrono-node/src/locales/pt/refiners/PTMergeDateTimeRefiner.ts", "../node_modules/chrono-node/src/locales/pt/refiners/PTMergeDateRangeRefiner.ts", "../node_modules/chrono-node/src/locales/pt/parsers/PTMonthNameLittleEndianParser.ts", "../node_modules/chrono-node/src/locales/pt/parsers/PTCasualDateParser.ts", "../node_modules/chrono-node/src/locales/pt/parsers/PTCasualTimeParser.ts", "../node_modules/chrono-node/src/locales/pt/index.ts", "../node_modules/chrono-node/src/locales/nl/refiners/NLMergeDateRangeRefiner.ts", "../node_modules/chrono-node/src/locales/nl/refiners/NLMergeDateTimeRefiner.ts", "../node_modules/chrono-node/src/locales/nl/parsers/NLCasualDateParser.ts", "../node_modules/chrono-node/src/locales/nl/parsers/NLCasualTimeParser.ts", "../node_modules/chrono-node/src/locales/nl/constants.ts", "../node_modules/chrono-node/src/locales/nl/parsers/NLTimeUnitWithinFormatParser.ts", "../node_modules/chrono-node/src/locales/nl/parsers/NLWeekdayParser.ts", "../node_modules/chrono-node/src/locales/nl/parsers/NLMonthNameMiddleEndianParser.ts", "../node_modules/chrono-node/src/locales/nl/parsers/NLMonthNameParser.ts", "../node_modules/chrono-node/src/locales/nl/parsers/NLSlashMonthFormatParser.ts", "../node_modules/chrono-node/src/locales/nl/parsers/NLTimeExpressionParser.ts", "../node_modules/chrono-node/src/locales/nl/parsers/NLCasualYearMonthDayParser.ts", "../node_modules/chrono-node/src/locales/nl/parsers/NLCasualDateTimeParser.ts", "../node_modules/chrono-node/src/locales/nl/parsers/NLTimeUnitCasualRelativeFormatParser.ts", "../node_modules/chrono-node/src/locales/nl/parsers/NLRelativeDateFormatParser.ts", "../node_modules/chrono-node/src/locales/nl/parsers/NLTimeUnitAgoFormatParser.ts", "../node_modules/chrono-node/src/locales/nl/parsers/NLTimeUnitLaterFormatParser.ts", "../node_modules/chrono-node/src/locales/nl/index.ts", "../node_modules/chrono-node/src/locales/zh/hant/parsers/ZHHantCasualDateParser.ts", "../node_modules/chrono-node/src/locales/zh/hant/constants.ts", "../node_modules/chrono-node/src/locales/zh/hant/parsers/ZHHantDateParser.ts", "../node_modules/chrono-node/src/locales/zh/hant/parsers/ZHHantDeadlineFormatParser.ts", "../node_modules/chrono-node/src/locales/zh/hant/parsers/ZHHantRelationWeekdayParser.ts", "../node_modules/chrono-node/src/locales/zh/hant/parsers/ZHHantTimeExpressionParser.ts", "../node_modules/chrono-node/src/locales/zh/hant/parsers/ZHHantWeekdayParser.ts", "../node_modules/chrono-node/src/locales/zh/hant/refiners/ZHHantMergeDateRangeRefiner.ts", "../node_modules/chrono-node/src/locales/zh/hant/refiners/ZHHantMergeDateTimeRefiner.ts", "../node_modules/chrono-node/src/locales/zh/hant/index.ts", "../node_modules/chrono-node/src/locales/zh/hans/parsers/ZHHansCasualDateParser.ts", "../node_modules/chrono-node/src/locales/zh/hans/constants.ts", "../node_modules/chrono-node/src/locales/zh/hans/parsers/ZHHansDateParser.ts", "../node_modules/chrono-node/src/locales/zh/hans/parsers/ZHHansDeadlineFormatParser.ts", "../node_modules/chrono-node/src/locales/zh/hans/parsers/ZHHansRelationWeekdayParser.ts", "../node_modules/chrono-node/src/locales/zh/hans/parsers/ZHHansTimeExpressionParser.ts", "../node_modules/chrono-node/src/locales/zh/hans/parsers/ZHHansWeekdayParser.ts", "../node_modules/chrono-node/src/locales/zh/hans/refiners/ZHHansMergeDateRangeRefiner.ts", "../node_modules/chrono-node/src/locales/zh/hans/refiners/ZHHansMergeDateTimeRefiner.ts", "../node_modules/chrono-node/src/locales/zh/hans/index.ts", "../node_modules/chrono-node/src/locales/zh/index.ts", "../node_modules/chrono-node/src/locales/ru/constants.ts", "../node_modules/chrono-node/src/locales/ru/parsers/RUTimeUnitWithinFormatParser.ts", "../node_modules/chrono-node/src/locales/ru/parsers/RUMonthNameLittleEndianParser.ts", "../node_modules/chrono-node/src/locales/ru/parsers/RUMonthNameParser.ts", "../node_modules/chrono-node/src/locales/ru/parsers/RUTimeExpressionParser.ts", "../node_modules/chrono-node/src/locales/ru/parsers/RUTimeUnitAgoFormatParser.ts", "../node_modules/chrono-node/src/locales/ru/refiners/RUMergeDateRangeRefiner.ts", "../node_modules/chrono-node/src/locales/ru/refiners/RUMergeDateTimeRefiner.ts", "../node_modules/chrono-node/src/locales/ru/parsers/RUCasualDateParser.ts", "../node_modules/chrono-node/src/locales/ru/parsers/RUCasualTimeParser.ts", "../node_modules/chrono-node/src/locales/ru/parsers/RUWeekdayParser.ts", "../node_modules/chrono-node/src/locales/ru/parsers/RURelativeDateFormatParser.ts", "../node_modules/chrono-node/src/locales/ru/parsers/RUTimeUnitCasualRelativeFormatParser.ts", "../node_modules/chrono-node/src/locales/ru/index.ts", "../node_modules/chrono-node/src/index.ts", "../src/dailyNotes.tsx", "../src/hooks/useAppExists.ts", "../src/preferences.ts", "../src/hooks/useConfig.ts", "../src/Config.ts", "../src/components/DailyNotes.tsx", "../src/components/DailyNoteRef.tsx", "../src/components/Shortcut.tsx"],
  "sourcesContent": ["type DictionaryLike = string[] | { [word: string]: unknown } | Map<string, unknown>;\n\nexport function repeatedTimeunitPattern(prefix: string, singleTimeunitPattern: string): string {\n    const singleTimeunitPatternNoCapture = singleTimeunitPattern.replace(/\\((?!\\?)/g, \"(?:\");\n    return `${prefix}${singleTimeunitPatternNoCapture}\\\\s{0,5}(?:,?\\\\s{0,5}${singleTimeunitPatternNoCapture}){0,10}`;\n}\n\nexport function extractTerms(dictionary: DictionaryLike): string[] {\n    let keys: string[];\n    if (dictionary instanceof Array) {\n        keys = [...dictionary];\n    } else if (dictionary instanceof Map) {\n        keys = Array.from((dictionary as Map<string, unknown>).keys());\n    } else {\n        keys = Object.keys(dictionary);\n    }\n\n    return keys;\n}\n\nexport function matchAnyPattern(dictionary: DictionaryLike): string {\n    // TODO: More efficient regex pattern by considering duplicated prefix\n\n    const joinedTerms = extractTerms(dictionary)\n        .sort((a, b) => b.length - a.length)\n        .join(\"|\")\n        .replace(/\\./g, \"\\\\.\");\n\n    return `(?:${joinedTerms})`;\n}\n", "!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",f=\"month\",h=\"quarter\",c=\"year\",d=\"date\",$=\"Invalid Date\",l=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\")},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},g={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},v=\"en\",D={};D[v]=M;var p=function(t){return t instanceof _},S=function t(e,n,r){var i;if(!e)return v;if(\"string\"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split(\"-\");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(v=i),i||!r&&v},w=function(t,e){if(p(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=g;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t)}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match(l);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return O},m.isValid=function(){return!(this.$d.toString()===$)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),$=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},l=function(t,e){return O.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,g=\"set\"+(this.$u?\"UTC\":\"\");switch(h){case c:return r?$(1,0):$(31,11);case f:return r?$(1,M):$(0,M+1);case o:var v=this.$locale().weekStart||0,D=(y<v?y+7:y)-v;return $(r?m-D:m+(6-D),M);case a:case d:return l(g+\"Hours\",0);case u:return l(g+\"Minutes\",1);case s:return l(g+\"Seconds\",2);case i:return l(g+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h=\"set\"+(this.$u?\"UTC\":\"\"),$=(n={},n[a]=h+\"Date\",n[d]=h+\"Date\",n[f]=h+\"Month\",n[c]=h+\"FullYear\",n[u]=h+\"Hours\",n[s]=h+\"Minutes\",n[i]=h+\"Seconds\",n[r]=h+\"Milliseconds\",n)[o],l=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[$](l),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else $&&this.$d[$](l);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,$=this;r=Number(r);var l=O.p(h),y=function(t){var e=w($);return O.w(e.date(e.date()+Math.round(t*r)),$)};if(l===f)return this.set(f,this.$M+r);if(l===c)return this.set(c,this.$y+r);if(l===a)return y(1);if(l===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[l]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||$;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},c=function(t){return O.s(s%12||12,t,\"0\")},d=n.meridiem||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r},l={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:O.s(a+1,2,\"0\"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,\"0\"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,\"0\"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,\"0\"),s:String(this.$s),ss:O.s(this.$s,2,\"0\"),SSS:O.s(this.$ms,3,\"0\"),Z:i};return r.replace(y,(function(t,e){return e||l[t]||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,$){var l,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,g=this-M,v=O.m(this,M);return v=(l={},l[c]=v/12,l[f]=v,l[h]=v/3,l[o]=(g-m)/6048e5,l[a]=(g-m)/864e5,l[u]=g/n,l[s]=g/e,l[i]=g/t,l)[y]||g,$?v:O.a(v)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),T=_.prototype;return w.prototype=T,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",f],[\"$y\",c],[\"$D\",d]].forEach((function(t){T[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=D[v],w.Ls=D,w.p={},w}));", "import dayjs from \"dayjs\";\n\n/**\n * Find the most likely year, from a raw number. For example:\n * 1997 => 1997\n * 97 => 1997\n * 12 => 2012\n */\nexport function findMostLikelyADYear(yearNumber: number): number {\n    if (yearNumber < 100) {\n        if (yearNumber > 50) {\n            yearNumber = yearNumber + 1900;\n        } else {\n            yearNumber = yearNumber + 2000;\n        }\n    }\n\n    return yearNumber;\n}\n\nexport function findYearClosestToRef(refDate: Date, day: number, month: number): number {\n    //Find the most appropriated year\n    const refMoment = dayjs(refDate);\n    let dateMoment = refMoment;\n    dateMoment = dateMoment.month(month - 1);\n    dateMoment = dateMoment.date(day);\n    dateMoment = dateMoment.year(refMoment.year());\n\n    const nextYear = dateMoment.add(1, \"y\");\n    const lastYear = dateMoment.add(-1, \"y\");\n    if (Math.abs(nextYear.diff(refMoment)) < Math.abs(dateMoment.diff(refMoment))) {\n        dateMoment = nextYear;\n    } else if (Math.abs(lastYear.diff(refMoment)) < Math.abs(dateMoment.diff(refMoment))) {\n        dateMoment = lastYear;\n    }\n\n    return dateMoment.year();\n}\n", "import { OpUnitType, QUnitType } from \"dayjs\";\nimport { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern\";\nimport { findMostLikelyADYear } from \"../../calculation/years\";\nimport { TimeUnits } from \"../../utils/timeunits\";\n\nexport const WEEKDAY_DICTIONARY: { [word: string]: number } = {\n    sunday: 0,\n    sun: 0,\n    \"sun.\": 0,\n    monday: 1,\n    mon: 1,\n    \"mon.\": 1,\n    tuesday: 2,\n    tue: 2,\n    \"tue.\": 2,\n    wednesday: 3,\n    wed: 3,\n    \"wed.\": 3,\n    thursday: 4,\n    thurs: 4,\n    \"thurs.\": 4,\n    thur: 4,\n    \"thur.\": 4,\n    thu: 4,\n    \"thu.\": 4,\n    friday: 5,\n    fri: 5,\n    \"fri.\": 5,\n    saturday: 6,\n    sat: 6,\n    \"sat.\": 6,\n};\n\nexport const FULL_MONTH_NAME_DICTIONARY: { [word: string]: number } = {\n    january: 1,\n    february: 2,\n    march: 3,\n    april: 4,\n    may: 5,\n    june: 6,\n    july: 7,\n    august: 8,\n    september: 9,\n    october: 10,\n    november: 11,\n    december: 12,\n};\n\nexport const MONTH_DICTIONARY: { [word: string]: number } = {\n    ...FULL_MONTH_NAME_DICTIONARY,\n    jan: 1,\n    \"jan.\": 1,\n    feb: 2,\n    \"feb.\": 2,\n    mar: 3,\n    \"mar.\": 3,\n    apr: 4,\n    \"apr.\": 4,\n    jun: 6,\n    \"jun.\": 6,\n    jul: 7,\n    \"jul.\": 7,\n    aug: 8,\n    \"aug.\": 8,\n    sep: 9,\n    \"sep.\": 9,\n    sept: 9,\n    \"sept.\": 9,\n    oct: 10,\n    \"oct.\": 10,\n    nov: 11,\n    \"nov.\": 11,\n    dec: 12,\n    \"dec.\": 12,\n};\n\nexport const INTEGER_WORD_DICTIONARY: { [word: string]: number } = {\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n    ten: 10,\n    eleven: 11,\n    twelve: 12,\n};\n\nexport const ORDINAL_WORD_DICTIONARY: { [word: string]: number } = {\n    first: 1,\n    second: 2,\n    third: 3,\n    fourth: 4,\n    fifth: 5,\n    sixth: 6,\n    seventh: 7,\n    eighth: 8,\n    ninth: 9,\n    tenth: 10,\n    eleventh: 11,\n    twelfth: 12,\n    thirteenth: 13,\n    fourteenth: 14,\n    fifteenth: 15,\n    sixteenth: 16,\n    seventeenth: 17,\n    eighteenth: 18,\n    nineteenth: 19,\n    twentieth: 20,\n    \"twenty first\": 21,\n    \"twenty-first\": 21,\n    \"twenty second\": 22,\n    \"twenty-second\": 22,\n    \"twenty third\": 23,\n    \"twenty-third\": 23,\n    \"twenty fourth\": 24,\n    \"twenty-fourth\": 24,\n    \"twenty fifth\": 25,\n    \"twenty-fifth\": 25,\n    \"twenty sixth\": 26,\n    \"twenty-sixth\": 26,\n    \"twenty seventh\": 27,\n    \"twenty-seventh\": 27,\n    \"twenty eighth\": 28,\n    \"twenty-eighth\": 28,\n    \"twenty ninth\": 29,\n    \"twenty-ninth\": 29,\n    \"thirtieth\": 30,\n    \"thirty first\": 31,\n    \"thirty-first\": 31,\n};\n\nexport const TIME_UNIT_DICTIONARY: { [word: string]: OpUnitType | QUnitType } = {\n    sec: \"second\",\n    second: \"second\",\n    seconds: \"second\",\n    min: \"minute\",\n    mins: \"minute\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    h: \"hour\",\n    hr: \"hour\",\n    hrs: \"hour\",\n    hour: \"hour\",\n    hours: \"hour\",\n    day: \"d\",\n    days: \"d\",\n    week: \"week\",\n    weeks: \"week\",\n    month: \"month\",\n    months: \"month\",\n    qtr: \"quarter\",\n    quarter: \"quarter\",\n    quarters: \"quarter\",\n    y: \"year\",\n    yr: \"year\",\n    year: \"year\",\n    years: \"year\",\n};\n\n//-----------------------------\n\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(\n    INTEGER_WORD_DICTIONARY\n)}|[0-9]+|[0-9]+\\\\.[0-9]+|half(?:\\\\s{0,2}an?)?|an?\\\\b(?:\\\\s{0,2}few)?|few|several|a?\\\\s{0,2}couple\\\\s{0,2}(?:of)?)`;\n\nexport function parseNumberPattern(match: string): number {\n    const num = match.toLowerCase();\n    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n        return INTEGER_WORD_DICTIONARY[num];\n    } else if (num === \"a\" || num === \"an\") {\n        return 1;\n    } else if (num.match(/few/)) {\n        return 3;\n    } else if (num.match(/half/)) {\n        return 0.5;\n    } else if (num.match(/couple/)) {\n        return 2;\n    } else if (num.match(/several/)) {\n        return 7;\n    }\n\n    return parseFloat(num);\n}\n\n//-----------------------------\n\nexport const ORDINAL_NUMBER_PATTERN = `(?:${matchAnyPattern(ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:st|nd|rd|th)?)`;\nexport function parseOrdinalNumberPattern(match: string): number {\n    let num = match.toLowerCase();\n    if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {\n        return ORDINAL_WORD_DICTIONARY[num];\n    }\n\n    num = num.replace(/(?:st|nd|rd|th)$/i, \"\");\n    return parseInt(num);\n}\n\n//-----------------------------\n\nexport const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\\\s{0,2}(?:BE|AD|BC|BCE|CE)|[1-2][0-9]{3}|[5-9][0-9])`;\nexport function parseYear(match: string): number {\n    if (/BE/i.test(match)) {\n        // Buddhist Era\n        match = match.replace(/BE/i, \"\");\n        return parseInt(match) - 543;\n    }\n\n    if (/BCE?/i.test(match)) {\n        // Before Christ, Before Common Era\n        match = match.replace(/BCE?/i, \"\");\n        return -parseInt(match);\n    }\n\n    if (/(AD|CE)/i.test(match)) {\n        // Anno Domini, Common Era\n        match = match.replace(/(AD|CE)/i, \"\");\n        return parseInt(match);\n    }\n\n    const rawYearNumber = parseInt(match);\n    return findMostLikelyADYear(rawYearNumber);\n}\n\n//-----------------------------\n\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,3}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\n\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(`(?:(?:about|around)\\\\s{0,3})?`, SINGLE_TIME_UNIT_PATTERN);\n\nexport function parseTimeUnits(timeunitText): TimeUnits {\n    const fragments = {};\n    let remainingText = timeunitText;\n    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    while (match) {\n        collectDateTimeFragment(fragments, match);\n        remainingText = remainingText.substring(match[0].length).trim();\n        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    }\n    return fragments;\n}\n\nfunction collectDateTimeFragment(fragments, match) {\n    const num = parseNumberPattern(match[1]);\n    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n    fragments[unit] = num;\n}\n", "!function(t,n){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=n():\"function\"==typeof define&&define.amd?define(n):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs_plugin_quarterOfYear=n()}(this,(function(){\"use strict\";var t=\"month\",n=\"quarter\";return function(e,i){var r=i.prototype;r.quarter=function(t){return this.$utils().u(t)?Math.ceil((this.month()+1)/3):this.month(this.month()%3+3*(t-1))};var s=r.add;r.add=function(e,i){return e=Number(e),this.$utils().p(i)===n?this.add(3*e,t):s.bind(this)(e,i)};var u=r.startOf;r.startOf=function(e,i){var r=this.$utils(),s=!!r.u(i)||i;if(r.p(e)===n){var o=this.quarter()-1;return s?this.month(3*o).startOf(t).startOf(\"day\"):this.month(3*o+2).endOf(t).endOf(\"day\")}return u.bind(this)(e,i)}}}));", "import { ParsingComponents } from \"../results\";\nimport dayjs from \"dayjs\";\nimport { Meridiem } from \"../index\";\n\nexport function assignTheNextDay(component: ParsingComponents, targetDayJs: dayjs.Dayjs) {\n    targetDayJs = targetDayJs.add(1, \"day\");\n    assignSimilarDate(component, targetDayJs);\n    implySimilarTime(component, targetDayJs);\n}\n\nexport function assignSimilarDate(component: ParsingComponents, targetDayJs: dayjs.Dayjs) {\n    component.assign(\"day\", targetDayJs.date());\n    component.assign(\"month\", targetDayJs.month() + 1);\n    component.assign(\"year\", targetDayJs.year());\n}\n\nexport function assignSimilarTime(component: ParsingComponents, targetDayJs: dayjs.Dayjs) {\n    component.assign(\"hour\", targetDayJs.hour());\n    component.assign(\"minute\", targetDayJs.minute());\n    component.assign(\"second\", targetDayJs.second());\n    component.assign(\"millisecond\", targetDayJs.millisecond());\n    if (component.get(\"hour\") < 12) {\n        component.assign(\"meridiem\", Meridiem.AM);\n    } else {\n        component.assign(\"meridiem\", Meridiem.PM);\n    }\n}\n\nexport function implySimilarTime(component: ParsingComponents, targetDayJs: dayjs.Dayjs) {\n    component.imply(\"hour\", targetDayJs.hour());\n    component.imply(\"minute\", targetDayJs.minute());\n    component.imply(\"second\", targetDayJs.second());\n    component.imply(\"millisecond\", targetDayJs.millisecond());\n}\n", "export const TIMEZONE_ABBR_MAP = {\n    ACDT: 630,\n    ACST: 570,\n    ADT: -180,\n    AEDT: 660,\n    AEST: 600,\n    AFT: 270,\n    AKDT: -480,\n    AKST: -540,\n    ALMT: 360,\n    AMST: -180,\n    AMT: -240,\n    ANAST: 720,\n    ANAT: 720,\n    AQTT: 300,\n    ART: -180,\n    AST: -240,\n    AWDT: 540,\n    AWST: 480,\n    AZOST: 0,\n    AZOT: -60,\n    AZST: 300,\n    AZT: 240,\n    BNT: 480,\n    BOT: -240,\n    BRST: -120,\n    BRT: -180,\n    BST: 60,\n    BTT: 360,\n    CAST: 480,\n    CAT: 120,\n    CCT: 390,\n    CDT: -300,\n    CEST: 120,\n    CET: 60,\n    CHADT: 825,\n    CHAST: 765,\n    CKT: -600,\n    CLST: -180,\n    CLT: -240,\n    COT: -300,\n    CST: -360,\n    CVT: -60,\n    CXT: 420,\n    ChST: 600,\n    DAVT: 420,\n    EASST: -300,\n    EAST: -360,\n    EAT: 180,\n    ECT: -300,\n    EDT: -240,\n    EEST: 180,\n    EET: 120,\n    EGST: 0,\n    EGT: -60,\n    EST: -300,\n    ET: -300,\n    FJST: 780,\n    FJT: 720,\n    FKST: -180,\n    FKT: -240,\n    FNT: -120,\n    GALT: -360,\n    GAMT: -540,\n    GET: 240,\n    GFT: -180,\n    GILT: 720,\n    GMT: 0,\n    GST: 240,\n    GYT: -240,\n    HAA: -180,\n    HAC: -300,\n    HADT: -540,\n    HAE: -240,\n    HAP: -420,\n    HAR: -360,\n    HAST: -600,\n    HAT: -90,\n    HAY: -480,\n    HKT: 480,\n    HLV: -210,\n    HNA: -240,\n    HNC: -360,\n    HNE: -300,\n    HNP: -480,\n    HNR: -420,\n    HNT: -150,\n    HNY: -540,\n    HOVT: 420,\n    ICT: 420,\n    IDT: 180,\n    IOT: 360,\n    IRDT: 270,\n    IRKST: 540,\n    IRKT: 540,\n    IRST: 210,\n    IST: 330,\n    JST: 540,\n    KGT: 360,\n    KRAST: 480,\n    KRAT: 480,\n    KST: 540,\n    KUYT: 240,\n    LHDT: 660,\n    LHST: 630,\n    LINT: 840,\n    MAGST: 720,\n    MAGT: 720,\n    MART: -510,\n    MAWT: 300,\n    MDT: -360,\n    MESZ: 120,\n    MEZ: 60,\n    MHT: 720,\n    MMT: 390,\n    MSD: 240,\n    MSK: 180,\n    MST: -420,\n    MUT: 240,\n    MVT: 300,\n    MYT: 480,\n    NCT: 660,\n    NDT: -90,\n    NFT: 690,\n    NOVST: 420,\n    NOVT: 360,\n    NPT: 345,\n    NST: -150,\n    NUT: -660,\n    NZDT: 780,\n    NZST: 720,\n    OMSST: 420,\n    OMST: 420,\n    PDT: -420,\n    PET: -300,\n    PETST: 720,\n    PETT: 720,\n    PGT: 600,\n    PHOT: 780,\n    PHT: 480,\n    PKT: 300,\n    PMDT: -120,\n    PMST: -180,\n    PONT: 660,\n    PST: -480,\n    PT: -480,\n    PWT: 540,\n    PYST: -180,\n    PYT: -240,\n    RET: 240,\n    SAMT: 240,\n    SAST: 120,\n    SBT: 660,\n    SCT: 240,\n    SGT: 480,\n    SRT: -180,\n    SST: -660,\n    TAHT: -600,\n    TFT: 300,\n    TJT: 300,\n    TKT: 780,\n    TLT: 540,\n    TMT: 300,\n    TVT: 720,\n    ULAT: 480,\n    UTC: 0,\n    UYST: -120,\n    UYT: -180,\n    UZT: 300,\n    VET: -210,\n    VLAST: 660,\n    VLAT: 660,\n    VUT: 660,\n    WAST: 120,\n    WAT: 60,\n    WEST: 60,\n    WESZ: 60,\n    WET: 0,\n    WEZ: 0,\n    WFT: 720,\n    WGST: -120,\n    WGT: -180,\n    WIB: 420,\n    WIT: 540,\n    WITA: 480,\n    WST: 780,\n    WT: 0,\n    YAKST: 600,\n    YAKT: 600,\n    YAPT: 600,\n    YEKST: 360,\n    YEKT: 360,\n};\n\nexport function toTimezoneOffset(timezoneInput?: string | number): number | null {\n    if (timezoneInput === null || timezoneInput === undefined) {\n        return null;\n    }\n\n    if (typeof timezoneInput === \"number\") {\n        return timezoneInput;\n    }\n\n    return TIMEZONE_ABBR_MAP[timezoneInput] ?? null;\n}\n", "import { Component, ParsedComponents, ParsedResult, ParsingReference } from \"./index\";\n\nimport quarterOfYear from \"dayjs/plugin/quarterOfYear\";\nimport dayjs, { QUnitType } from \"dayjs\";\nimport { assignSimilarDate, assignSimilarTime, implySimilarTime } from \"./utils/dayjs\";\nimport { toTimezoneOffset } from \"./timezone\";\ndayjs.extend(quarterOfYear);\n\nexport class ReferenceWithTimezone {\n    readonly instant: Date;\n    readonly timezoneOffset?: number | null;\n\n    constructor(input?: ParsingReference | Date) {\n        input = input ?? new Date();\n        if (input instanceof Date) {\n            this.instant = input;\n        } else {\n            this.instant = input.instant ?? new Date();\n            this.timezoneOffset = toTimezoneOffset(input.timezone);\n        }\n    }\n}\n\nexport class ParsingComponents implements ParsedComponents {\n    private knownValues: { [c in Component]?: number };\n    private impliedValues: { [c in Component]?: number };\n    private reference: ReferenceWithTimezone;\n\n    constructor(reference: ReferenceWithTimezone, knownComponents?: { [c in Component]?: number }) {\n        this.reference = reference;\n        this.knownValues = {};\n        this.impliedValues = {};\n        if (knownComponents) {\n            for (const key in knownComponents) {\n                this.knownValues[key as Component] = knownComponents[key as Component];\n            }\n        }\n\n        const refDayJs = dayjs(reference.instant);\n        this.imply(\"day\", refDayJs.date());\n        this.imply(\"month\", refDayJs.month() + 1);\n        this.imply(\"year\", refDayJs.year());\n        this.imply(\"hour\", 12);\n        this.imply(\"minute\", 0);\n        this.imply(\"second\", 0);\n        this.imply(\"millisecond\", 0);\n    }\n\n    get(component: Component): number | null {\n        if (component in this.knownValues) {\n            return this.knownValues[component];\n        }\n\n        if (component in this.impliedValues) {\n            return this.impliedValues[component];\n        }\n\n        return null;\n    }\n\n    isCertain(component: Component): boolean {\n        return component in this.knownValues;\n    }\n\n    getCertainComponents(): Array<Component> {\n        return Object.keys(this.knownValues) as Array<Component>;\n    }\n\n    imply(component: Component, value: number): ParsingComponents {\n        if (component in this.knownValues) {\n            return this;\n        }\n        this.impliedValues[component] = value;\n        return this;\n    }\n\n    assign(component: Component, value: number): ParsingComponents {\n        this.knownValues[component] = value;\n        delete this.impliedValues[component];\n        return this;\n    }\n\n    delete(component: Component) {\n        delete this.knownValues[component];\n        delete this.impliedValues[component];\n    }\n\n    clone(): ParsingComponents {\n        const component = new ParsingComponents(this.reference);\n        component.knownValues = {};\n        component.impliedValues = {};\n\n        for (const key in this.knownValues) {\n            component.knownValues[key as Component] = this.knownValues[key as Component];\n        }\n\n        for (const key in this.impliedValues) {\n            component.impliedValues[key as Component] = this.impliedValues[key as Component];\n        }\n\n        return component;\n    }\n\n    isOnlyDate(): boolean {\n        return !this.isCertain(\"hour\") && !this.isCertain(\"minute\") && !this.isCertain(\"second\");\n    }\n\n    isOnlyTime(): boolean {\n        return !this.isCertain(\"weekday\") && !this.isCertain(\"day\") && !this.isCertain(\"month\");\n    }\n\n    isOnlyWeekdayComponent(): boolean {\n        return this.isCertain(\"weekday\") && !this.isCertain(\"day\") && !this.isCertain(\"month\");\n    }\n\n    isOnlyDayMonthComponent(): boolean {\n        return this.isCertain(\"day\") && this.isCertain(\"month\") && !this.isCertain(\"year\");\n    }\n\n    isValidDate(): boolean {\n        const date = this.dateWithoutTimezoneAdjustment();\n\n        if (date.getFullYear() !== this.get(\"year\")) return false;\n        if (date.getMonth() !== this.get(\"month\") - 1) return false;\n        if (date.getDate() !== this.get(\"day\")) return false;\n        if (this.get(\"hour\") != null && date.getHours() != this.get(\"hour\")) return false;\n        if (this.get(\"minute\") != null && date.getMinutes() != this.get(\"minute\")) return false;\n\n        return true;\n    }\n\n    toString() {\n        return `[ParsingComponents {knownValues: ${JSON.stringify(this.knownValues)}, impliedValues: ${JSON.stringify(\n            this.impliedValues\n        )}}, reference: ${JSON.stringify(this.reference)}]`;\n    }\n\n    dayjs() {\n        return dayjs(this.date());\n    }\n\n    date(): Date {\n        const date = this.dateWithoutTimezoneAdjustment();\n        return new Date(date.getTime() + this.getSystemTimezoneAdjustmentMinute(date) * 60000);\n    }\n\n    private dateWithoutTimezoneAdjustment() {\n        const date = new Date(\n            this.get(\"year\"),\n            this.get(\"month\") - 1,\n            this.get(\"day\"),\n            this.get(\"hour\"),\n            this.get(\"minute\"),\n            this.get(\"second\"),\n            this.get(\"millisecond\")\n        );\n\n        date.setFullYear(this.get(\"year\"));\n        return date;\n    }\n\n    private getSystemTimezoneAdjustmentMinute(date?: Date) {\n        if (!date || date.getTime() < 0) {\n            // Javascript date timezone calculation got effect when the time epoch < 0\n            // e.g. new Date('Tue Feb 02 1300 00:00:00 GMT+0900 (JST)') => Tue Feb 02 1300 00:18:59 GMT+0918 (JST)\n            date = new Date();\n        }\n\n        const currentTimezoneOffset = -date.getTimezoneOffset();\n        const targetTimezoneOffset =\n            this.get(\"timezoneOffset\") ?? this.reference.timezoneOffset ?? currentTimezoneOffset;\n\n        return currentTimezoneOffset - targetTimezoneOffset;\n    }\n\n    static createRelativeFromReference(\n        reference: ReferenceWithTimezone,\n        fragments: { [c in QUnitType]?: number }\n    ): ParsingComponents {\n        let date = dayjs(reference.instant);\n        for (const key in fragments) {\n            date = date.add(fragments[key as QUnitType], key as QUnitType);\n        }\n\n        const components = new ParsingComponents(reference);\n        if (fragments[\"hour\"] || fragments[\"minute\"] || fragments[\"second\"]) {\n            assignSimilarTime(components, date);\n            assignSimilarDate(components, date);\n            if (reference.timezoneOffset !== null) {\n                components.assign(\"timezoneOffset\", -reference.instant.getTimezoneOffset());\n            }\n        } else {\n            implySimilarTime(components, date);\n            if (reference.timezoneOffset !== null) {\n                components.imply(\"timezoneOffset\", -reference.instant.getTimezoneOffset());\n            }\n\n            if (fragments[\"d\"]) {\n                components.assign(\"day\", date.date());\n                components.assign(\"month\", date.month() + 1);\n                components.assign(\"year\", date.year());\n            } else {\n                if (fragments[\"week\"]) {\n                    components.imply(\"weekday\", date.day());\n                }\n\n                components.imply(\"day\", date.date());\n                if (fragments[\"month\"]) {\n                    components.assign(\"month\", date.month() + 1);\n                    components.assign(\"year\", date.year());\n                } else {\n                    components.imply(\"month\", date.month() + 1);\n                    if (fragments[\"year\"]) {\n                        components.assign(\"year\", date.year());\n                    } else {\n                        components.imply(\"year\", date.year());\n                    }\n                }\n            }\n        }\n\n        return components;\n    }\n}\n\nexport class ParsingResult implements ParsedResult {\n    refDate: Date;\n    index: number;\n    text: string;\n\n    reference: ReferenceWithTimezone;\n\n    start: ParsingComponents;\n    end?: ParsingComponents;\n\n    constructor(\n        reference: ReferenceWithTimezone,\n        index: number,\n        text: string,\n        start?: ParsingComponents,\n        end?: ParsingComponents\n    ) {\n        this.reference = reference;\n        this.refDate = reference.instant;\n        this.index = index;\n        this.text = text;\n        this.start = start || new ParsingComponents(reference);\n        this.end = end;\n    }\n\n    clone() {\n        const result = new ParsingResult(this.reference, this.index, this.text);\n        result.start = this.start ? this.start.clone() : null;\n        result.end = this.end ? this.end.clone() : null;\n        return result;\n    }\n\n    date(): Date {\n        return this.start.date();\n    }\n\n    toString() {\n        return `[ParsingResult {index: ${this.index}, text: '${this.text}', ...}]`;\n    }\n}\n", "import { Parser, ParsingContext } from \"../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../results\";\nimport { Component } from \"../../index\";\n\n/**\n *\n */\nexport abstract class AbstractParserWithWordBoundaryChecking implements Parser {\n    abstract innerPattern(context: ParsingContext): RegExp;\n    abstract innerExtract(\n        context: ParsingContext,\n        match: RegExpMatchArray\n    ): ParsingComponents | ParsingResult | { [c in Component]?: number } | null;\n\n    private cachedInnerPattern?: RegExp = null;\n    private cachedPattern?: RegExp = null;\n\n    patternLeftBoundary(): string {\n        return `(\\\\W|^)`;\n    }\n\n    pattern(context: ParsingContext): RegExp {\n        const innerPattern = this.innerPattern(context);\n        if (innerPattern == this.cachedInnerPattern) {\n            return this.cachedPattern;\n        }\n\n        this.cachedPattern = new RegExp(`${this.patternLeftBoundary()}${innerPattern.source}`, innerPattern.flags);\n        this.cachedInnerPattern = innerPattern;\n        return this.cachedPattern;\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray) {\n        const header = match[1] ?? \"\";\n        match.index = match.index + header.length;\n        match[0] = match[0].substring(header.length);\n        for (let i = 2; i < match.length; i++) {\n            match[i - 1] = match[i];\n        }\n\n        return this.innerExtract(context, match);\n    }\n}\n", "import { TIME_UNITS_PATTERN, parseTimeUnits } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN_WITH_PREFIX = new RegExp(\n    `(?:within|in|for)\\\\s*` +\n        `(?:(?:about|around|roughly|approximately|just)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_PATTERN})(?=\\\\W|$)`,\n    \"i\"\n);\n\nconst PATTERN_WITHOUT_PREFIX = new RegExp(\n    `(?:(?:about|around|roughly|approximately|just)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_PATTERN})(?=\\\\W|$)`,\n    \"i\"\n);\n\nexport default class ENTimeUnitWithinFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return context.option.forwardDate ? PATTERN_WITHOUT_PREFIX : PATTERN_WITH_PREFIX;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const timeUnits = parseTimeUnits(match[1]);\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingResult } from \"../../../results\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { MONTH_DICTIONARY } from \"../constants\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { ORDINAL_NUMBER_PATTERN, parseOrdinalNumberPattern } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\n// prettier-ignore\nconst PATTERN = new RegExp(\n    `(?:on\\\\s{0,3})?` +\n        `(${ORDINAL_NUMBER_PATTERN})` +\n        `(?:` +\n            `\\\\s{0,3}(?:to|\\\\-|\\\\\u2013|until|through|till)?\\\\s{0,3}` +\n            `(${ORDINAL_NUMBER_PATTERN})` +\n        \")?\" +\n        `(?:-|/|\\\\s{0,3}(?:of)?\\\\s{0,3})` +\n        `(${matchAnyPattern(MONTH_DICTIONARY)})` +\n        \"(?:\" +\n            `(?:-|/|,?\\\\s{0,3})` +\n            `(${YEAR_PATTERN}(?![^\\\\s]\\\\d))` +\n        \")?\" +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst DATE_GROUP = 1;\nconst DATE_TO_GROUP = 2;\nconst MONTH_NAME_GROUP = 3;\nconst YEAR_GROUP = 4;\n\nexport default class ENMonthNameLittleEndianParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        const result = context.createParsingResult(match.index, match[0]);\n\n        const month = MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n        const day = parseOrdinalNumberPattern(match[DATE_GROUP]);\n        if (day > 31) {\n            // e.g. \"[96 Aug]\" => \"9[6 Aug]\", we need to shift away from the next number\n            match.index = match.index + match[DATE_GROUP].length;\n            return null;\n        }\n\n        result.start.assign(\"month\", month);\n        result.start.assign(\"day\", day);\n\n        if (match[YEAR_GROUP]) {\n            const yearNumber = parseYear(match[YEAR_GROUP]);\n            result.start.assign(\"year\", yearNumber);\n        } else {\n            const year = findYearClosestToRef(context.refDate, day, month);\n            result.start.imply(\"year\", year);\n        }\n\n        if (match[DATE_TO_GROUP]) {\n            const endDate = parseOrdinalNumberPattern(match[DATE_TO_GROUP]);\n\n            result.end = result.start.clone();\n            result.end.assign(\"day\", endDate);\n        }\n\n        return result;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { MONTH_DICTIONARY } from \"../constants\";\nimport { ORDINAL_NUMBER_PATTERN, parseOrdinalNumberPattern } from \"../constants\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    `(${matchAnyPattern(MONTH_DICTIONARY)})` +\n        \"(?:-|/|\\\\s*,?\\\\s*)\" +\n        `(${ORDINAL_NUMBER_PATTERN})(?!\\\\s*(?:am|pm))\\\\s*` +\n        \"(?:\" +\n        \"(?:to|\\\\-)\\\\s*\" +\n        `(${ORDINAL_NUMBER_PATTERN})\\\\s*` +\n        \")?\" +\n        \"(?:\" +\n        \"(?:-|/|\\\\s*,?\\\\s*)\" +\n        `(${YEAR_PATTERN})` +\n        \")?\" +\n        \"(?=\\\\W|$)(?!\\\\:\\\\d)\",\n    \"i\"\n);\n\nconst MONTH_NAME_GROUP = 1;\nconst DATE_GROUP = 2;\nconst DATE_TO_GROUP = 3;\nconst YEAR_GROUP = 4;\n\n/**\n * The parser for parsing US's date format that begin with month's name.\n *  - January 13\n *  - January 13, 2012\n *  - January 13 - 15, 2012\n * Note: Watch out for:\n *  - January 12:00\n *  - January 12.44\n *  - January 1222344\n */\nexport default class ENMonthNameMiddleEndianParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const month = MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n        const day = parseOrdinalNumberPattern(match[DATE_GROUP]);\n        if (day > 31) {\n            return null;\n        }\n\n        const components = context.createParsingComponents({\n            day: day,\n            month: month,\n        });\n\n        if (match[YEAR_GROUP]) {\n            const year = parseYear(match[YEAR_GROUP]);\n            components.assign(\"year\", year);\n        } else {\n            const year = findYearClosestToRef(context.refDate, day, month);\n            components.imply(\"year\", year);\n        }\n\n        if (!match[DATE_TO_GROUP]) {\n            return components;\n        }\n\n        // Text can be 'range' value. Such as 'January 12 - 13, 2012'\n        const endDate = parseOrdinalNumberPattern(match[DATE_TO_GROUP]);\n        const result = context.createParsingResult(match.index, match[0]);\n        result.start = components;\n        result.end = components.clone();\n        result.end.assign(\"day\", endDate);\n\n        return result;\n    }\n}\n", "import { FULL_MONTH_NAME_DICTIONARY, MONTH_DICTIONARY } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    `((?:in)\\\\s*)?` +\n        `(${matchAnyPattern(MONTH_DICTIONARY)})` +\n        `\\\\s*` +\n        `(?:` +\n        `[,-]?\\\\s*(${YEAR_PATTERN})?` +\n        \")?\" +\n        \"(?=[^\\\\s\\\\w]|\\\\s+[^0-9]|\\\\s+$|$)\",\n    \"i\"\n);\n\nconst PREFIX_GROUP = 1;\nconst MONTH_NAME_GROUP = 2;\nconst YEAR_GROUP = 3;\n\n/**\n * The parser for parsing month name and year.\n * - January, 2012\n * - January 2012\n * - January\n * (in) Jan\n */\nexport default class ENMonthNameParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const monthName = match[MONTH_NAME_GROUP].toLowerCase();\n\n        // skip some unlikely words \"jan\", \"mar\", ..\n        if (match[0].length <= 3 && !FULL_MONTH_NAME_DICTIONARY[monthName]) {\n            return null;\n        }\n\n        const result = context.createParsingResult(\n            match.index + (match[PREFIX_GROUP] || \"\").length,\n            match.index + match[0].length\n        );\n        result.start.imply(\"day\", 1);\n\n        const month = MONTH_DICTIONARY[monthName];\n        result.start.assign(\"month\", month);\n\n        if (match[YEAR_GROUP]) {\n            const year = parseYear(match[YEAR_GROUP]);\n            result.start.assign(\"year\", year);\n        } else {\n            const year = findYearClosestToRef(context.refDate, 1, month);\n            result.start.imply(\"year\", year);\n        }\n\n        return result;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { MONTH_DICTIONARY } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\n/*\n    Date format with slash \"/\" between numbers like ENSlashDateFormatParser,\n    but this parser expect year before month and date.\n    - YYYY/MM/DD\n    - YYYY-MM-DD\n    - YYYY.MM.DD\n*/\nconst PATTERN = new RegExp(\n    `([0-9]{4})[\\\\.\\\\/\\\\s]` +\n        `(?:(${matchAnyPattern(MONTH_DICTIONARY)})|([0-9]{1,2}))[\\\\.\\\\/\\\\s]` +\n        `([0-9]{1,2})` +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst YEAR_NUMBER_GROUP = 1;\nconst MONTH_NAME_GROUP = 2;\nconst MONTH_NUMBER_GROUP = 3;\nconst DATE_NUMBER_GROUP = 4;\n\nexport default class ENCasualYearMonthDayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const month = match[MONTH_NUMBER_GROUP]\n            ? parseInt(match[MONTH_NUMBER_GROUP])\n            : MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n\n        if (month < 1 || month > 12) {\n            return null;\n        }\n\n        const year = parseInt(match[YEAR_NUMBER_GROUP]);\n        const day = parseInt(match[DATE_NUMBER_GROUP]);\n\n        return {\n            day: day,\n            month: month,\n            year: year,\n        };\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\"([0-9]|0[1-9]|1[012])/([0-9]{4})\" + \"\", \"i\");\n\nconst MONTH_GROUP = 1;\nconst YEAR_GROUP = 2;\n\n/**\n * Month/Year date format with slash \"/\" (also \"-\" and \".\") between numbers\n * - 11/05\n * - 06/2005\n */\nexport default class ENSlashMonthFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const year = parseInt(match[YEAR_GROUP]);\n        const month = parseInt(match[MONTH_GROUP]);\n\n        return context.createParsingComponents().imply(\"day\", 1).assign(\"month\", month).assign(\"year\", year);\n    }\n}\n", "import { Parser, ParsingContext } from \"../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../results\";\nimport { Meridiem } from \"../../index\";\n\n// prettier-ignore\nfunction primaryTimePattern(leftBoundary: string, primaryPrefix: string, primarySuffix: string, flags: string) {\n    return new RegExp(\n            `${leftBoundary}` +\n            `${primaryPrefix}` +\n            `(\\\\d{1,4})` +\n            `(?:` +\n                `(?:\\\\.|:|\uFF1A)` +\n                `(\\\\d{1,2})` +\n                `(?:` +\n                    `(?::|\uFF1A)` +\n                    `(\\\\d{2})` +\n                    `(?:\\\\.(\\\\d{1,6}))?` +\n                `)?` +\n            `)?` +\n            `(?:\\\\s*(a\\\\.m\\\\.|p\\\\.m\\\\.|am?|pm?))?` +\n            `${primarySuffix}`,\n        flags\n    );\n}\n\n// prettier-ignore\nfunction followingTimePatten(followingPhase: string, followingSuffix: string) {\n    return new RegExp(\n        `^(${followingPhase})` +\n            `(\\\\d{1,4})` +\n            `(?:` +\n                `(?:\\\\.|\\\\:|\\\\\uFF1A)` +\n                `(\\\\d{1,2})` +\n                `(?:` +\n                    `(?:\\\\.|\\\\:|\\\\\uFF1A)` +\n                    `(\\\\d{1,2})(?:\\\\.(\\\\d{1,6}))?` +\n                `)?` +\n            `)?` +\n            `(?:\\\\s*(a\\\\.m\\\\.|p\\\\.m\\\\.|am?|pm?))?` +\n            `${followingSuffix}`,\n        \"i\"\n    );\n}\n\nconst HOUR_GROUP = 2;\nconst MINUTE_GROUP = 3;\nconst SECOND_GROUP = 4;\nconst MILLI_SECOND_GROUP = 5;\nconst AM_PM_HOUR_GROUP = 6;\n\nexport abstract class AbstractTimeExpressionParser implements Parser {\n    abstract primaryPrefix(): string;\n    abstract followingPhase(): string;\n    strictMode: boolean;\n\n    constructor(strictMode = false) {\n        this.strictMode = strictMode;\n    }\n\n    patternFlags(): string {\n        return \"i\";\n    }\n\n    primaryPatternLeftBoundary(): string {\n        return `(^|\\\\s|T|\\\\b)`;\n    }\n\n    primarySuffix(): string {\n        return `(?=\\\\W|$)`;\n    }\n\n    followingSuffix(): string {\n        return `(?=\\\\W|$)`;\n    }\n\n    pattern(context: ParsingContext): RegExp {\n        return this.getPrimaryTimePatternThroughCache();\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        const startComponents = this.extractPrimaryTimeComponents(context, match);\n        if (!startComponents) {\n            match.index += match[0].length; // Skip over potential overlapping pattern\n            return null;\n        }\n\n        const index = match.index + match[1].length;\n        const text = match[0].substring(match[1].length);\n        const result = context.createParsingResult(index, text, startComponents);\n        match.index += match[0].length; // Skip over potential overlapping pattern\n\n        const remainingText = context.text.substring(match.index);\n        const followingPattern = this.getFollowingTimePatternThroughCache();\n        const followingMatch = followingPattern.exec(remainingText);\n\n        // Pattern \"456-12\", \"2022-12\" should not be time without proper context\n        if (text.match(/^\\d{3,4}/) && followingMatch && followingMatch[0].match(/^\\s*([+-])\\s*\\d{2,4}$/)) {\n            return null;\n        }\n\n        if (\n            !followingMatch ||\n            // Pattern \"YY.YY -XXXX\" is more like timezone offset\n            followingMatch[0].match(/^\\s*([+-])\\s*\\d{3,4}$/)\n        ) {\n            return this.checkAndReturnWithoutFollowingPattern(result);\n        }\n\n        result.end = this.extractFollowingTimeComponents(context, followingMatch, result);\n        if (result.end) {\n            result.text += followingMatch[0];\n        }\n\n        return this.checkAndReturnWithFollowingPattern(result);\n    }\n\n    extractPrimaryTimeComponents(\n        context: ParsingContext,\n        match: RegExpMatchArray,\n        strict = false\n    ): null | ParsingComponents {\n        const components = context.createParsingComponents();\n        let minute = 0;\n        let meridiem = null;\n\n        // ----- Hours\n        let hour = parseInt(match[HOUR_GROUP]);\n        if (hour > 100) {\n            if (this.strictMode || match[MINUTE_GROUP] != null) {\n                return null;\n            }\n\n            minute = hour % 100;\n            hour = Math.floor(hour / 100);\n        }\n\n        if (hour > 24) {\n            return null;\n        }\n\n        // ----- Minutes\n        if (match[MINUTE_GROUP] != null) {\n            if (match[MINUTE_GROUP].length == 1 && !match[AM_PM_HOUR_GROUP]) {\n                // Skip single digit minute e.g. \"at 1.1 xx\"\n                return null;\n            }\n\n            minute = parseInt(match[MINUTE_GROUP]);\n        }\n\n        if (minute >= 60) {\n            return null;\n        }\n\n        if (hour > 12) {\n            meridiem = Meridiem.PM;\n        }\n\n        // ----- AM & PM\n        if (match[AM_PM_HOUR_GROUP] != null) {\n            if (hour > 12) return null;\n            const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n            if (ampm == \"a\") {\n                meridiem = Meridiem.AM;\n                if (hour == 12) {\n                    hour = 0;\n                }\n            }\n\n            if (ampm == \"p\") {\n                meridiem = Meridiem.PM;\n                if (hour != 12) {\n                    hour += 12;\n                }\n            }\n        }\n\n        components.assign(\"hour\", hour);\n        components.assign(\"minute\", minute);\n\n        if (meridiem !== null) {\n            components.assign(\"meridiem\", meridiem);\n        } else {\n            if (hour < 12) {\n                components.imply(\"meridiem\", Meridiem.AM);\n            } else {\n                components.imply(\"meridiem\", Meridiem.PM);\n            }\n        }\n\n        // ----- Millisecond\n        if (match[MILLI_SECOND_GROUP] != null) {\n            const millisecond = parseInt(match[MILLI_SECOND_GROUP].substring(0, 3));\n            if (millisecond >= 1000) return null;\n\n            components.assign(\"millisecond\", millisecond);\n        }\n\n        // ----- Second\n        if (match[SECOND_GROUP] != null) {\n            const second = parseInt(match[SECOND_GROUP]);\n            if (second >= 60) return null;\n\n            components.assign(\"second\", second);\n        }\n\n        return components;\n    }\n\n    extractFollowingTimeComponents(\n        context: ParsingContext,\n        match: RegExpMatchArray,\n        result: ParsingResult\n    ): null | ParsingComponents {\n        const components = context.createParsingComponents();\n\n        // ----- Millisecond\n        if (match[MILLI_SECOND_GROUP] != null) {\n            const millisecond = parseInt(match[MILLI_SECOND_GROUP].substring(0, 3));\n            if (millisecond >= 1000) return null;\n\n            components.assign(\"millisecond\", millisecond);\n        }\n\n        // ----- Second\n        if (match[SECOND_GROUP] != null) {\n            const second = parseInt(match[SECOND_GROUP]);\n            if (second >= 60) return null;\n\n            components.assign(\"second\", second);\n        }\n\n        let hour = parseInt(match[HOUR_GROUP]);\n        let minute = 0;\n        let meridiem = -1;\n\n        // ----- Minute\n        if (match[MINUTE_GROUP] != null) {\n            minute = parseInt(match[MINUTE_GROUP]);\n        } else if (hour > 100) {\n            minute = hour % 100;\n            hour = Math.floor(hour / 100);\n        }\n\n        if (minute >= 60 || hour > 24) {\n            return null;\n        }\n\n        if (hour >= 12) {\n            meridiem = Meridiem.PM;\n        }\n\n        // ----- AM & PM\n        if (match[AM_PM_HOUR_GROUP] != null) {\n            if (hour > 12) {\n                return null;\n            }\n\n            const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n            if (ampm == \"a\") {\n                meridiem = Meridiem.AM;\n                if (hour == 12) {\n                    hour = 0;\n                    if (!components.isCertain(\"day\")) {\n                        components.imply(\"day\", components.get(\"day\") + 1);\n                    }\n                }\n            }\n\n            if (ampm == \"p\") {\n                meridiem = Meridiem.PM;\n                if (hour != 12) hour += 12;\n            }\n\n            if (!result.start.isCertain(\"meridiem\")) {\n                if (meridiem == Meridiem.AM) {\n                    result.start.imply(\"meridiem\", Meridiem.AM);\n\n                    if (result.start.get(\"hour\") == 12) {\n                        result.start.assign(\"hour\", 0);\n                    }\n                } else {\n                    result.start.imply(\"meridiem\", Meridiem.PM);\n\n                    if (result.start.get(\"hour\") != 12) {\n                        result.start.assign(\"hour\", result.start.get(\"hour\") + 12);\n                    }\n                }\n            }\n        }\n\n        components.assign(\"hour\", hour);\n        components.assign(\"minute\", minute);\n\n        if (meridiem >= 0) {\n            components.assign(\"meridiem\", meridiem);\n        } else {\n            const startAtPM = result.start.isCertain(\"meridiem\") && result.start.get(\"hour\") > 12;\n            if (startAtPM) {\n                if (result.start.get(\"hour\") - 12 > hour) {\n                    // 10pm - 1 (am)\n                    components.imply(\"meridiem\", Meridiem.AM);\n                } else if (hour <= 12) {\n                    components.assign(\"hour\", hour + 12);\n                    components.assign(\"meridiem\", Meridiem.PM);\n                }\n            } else if (hour > 12) {\n                components.imply(\"meridiem\", Meridiem.PM);\n            } else if (hour <= 12) {\n                components.imply(\"meridiem\", Meridiem.AM);\n            }\n        }\n\n        if (components.date().getTime() < result.start.date().getTime()) {\n            components.imply(\"day\", components.get(\"day\") + 1);\n        }\n\n        return components;\n    }\n\n    private checkAndReturnWithoutFollowingPattern(result) {\n        // Single digit (e.g \"1\") should not be counted as time expression (without proper context)\n        if (result.text.match(/^\\d$/)) {\n            return null;\n        }\n\n        // Three or more digit (e.g. \"203\", \"2014\") should not be counted as time expression (without proper context)\n        if (result.text.match(/^\\d\\d\\d+$/)) {\n            return null;\n        }\n\n        // Instead of \"am/pm\", it ends with \"a\" or \"p\" (e.g \"1a\", \"123p\"), this seems unlikely\n        if (result.text.match(/\\d[apAP]$/)) {\n            return null;\n        }\n\n        // If it ends only with numbers or dots\n        const endingWithNumbers = result.text.match(/[^\\d:.](\\d[\\d.]+)$/);\n        if (endingWithNumbers) {\n            const endingNumbers: string = endingWithNumbers[1];\n\n            // In strict mode (e.g. \"at 1\" or \"at 1.2\"), this should not be accepted\n            if (this.strictMode) {\n                return null;\n            }\n\n            // If it ends only with dot single digit, e.g. \"at 1.2\"\n            if (endingNumbers.includes(\".\") && !endingNumbers.match(/\\d(\\.\\d{2})+$/)) {\n                return null;\n            }\n\n            // If it ends only with numbers above 24, e.g. \"at 25\"\n            const endingNumberVal = parseInt(endingNumbers);\n            if (endingNumberVal > 24) {\n                return null;\n            }\n        }\n\n        return result;\n    }\n\n    private checkAndReturnWithFollowingPattern(result) {\n        if (result.text.match(/^\\d+-\\d+$/)) {\n            return null;\n        }\n\n        // If it ends only with numbers or dots\n        const endingWithNumbers = result.text.match(/[^\\d:.](\\d[\\d.]+)\\s*-\\s*(\\d[\\d.]+)$/);\n        if (endingWithNumbers) {\n            // In strict mode (e.g. \"at 1-3\" or \"at 1.2 - 2.3\"), this should not be accepted\n            if (this.strictMode) {\n                return null;\n            }\n\n            const startingNumbers: string = endingWithNumbers[1];\n            const endingNumbers: string = endingWithNumbers[2];\n            // If it ends only with dot single digit, e.g. \"at 1.2\"\n            if (endingNumbers.includes(\".\") && !endingNumbers.match(/\\d(\\.\\d{2})+$/)) {\n                return null;\n            }\n\n            // If it ends only with numbers above 24, e.g. \"at 25\"\n            const endingNumberVal = parseInt(endingNumbers);\n            const startingNumberVal = parseInt(startingNumbers);\n            if (endingNumberVal > 24 || startingNumberVal > 24) {\n                return null;\n            }\n        }\n\n        return result;\n    }\n\n    private cachedPrimaryPrefix = null;\n    private cachedPrimarySuffix = null;\n    private cachedPrimaryTimePattern = null;\n\n    getPrimaryTimePatternThroughCache() {\n        const primaryPrefix = this.primaryPrefix();\n        const primarySuffix = this.primarySuffix();\n\n        if (this.cachedPrimaryPrefix === primaryPrefix && this.cachedPrimarySuffix === primarySuffix) {\n            return this.cachedPrimaryTimePattern;\n        }\n\n        this.cachedPrimaryTimePattern = primaryTimePattern(\n            this.primaryPatternLeftBoundary(),\n            primaryPrefix,\n            primarySuffix,\n            this.patternFlags()\n        );\n        this.cachedPrimaryPrefix = primaryPrefix;\n        this.cachedPrimarySuffix = primarySuffix;\n        return this.cachedPrimaryTimePattern;\n    }\n\n    private cachedFollowingPhase = null;\n    private cachedFollowingSuffix = null;\n    private cachedFollowingTimePatten = null;\n\n    getFollowingTimePatternThroughCache() {\n        const followingPhase = this.followingPhase();\n        const followingSuffix = this.followingSuffix();\n\n        if (this.cachedFollowingPhase === followingPhase && this.cachedFollowingSuffix === followingSuffix) {\n            return this.cachedFollowingTimePatten;\n        }\n\n        this.cachedFollowingTimePatten = followingTimePatten(followingPhase, followingSuffix);\n        this.cachedFollowingPhase = followingPhase;\n        this.cachedFollowingSuffix = followingSuffix;\n        return this.cachedFollowingTimePatten;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { Meridiem } from \"../../../index\";\nimport { AbstractTimeExpressionParser } from \"../../../common/parsers/AbstractTimeExpressionParser\";\n\nexport default class ENTimeExpressionParser extends AbstractTimeExpressionParser {\n    constructor(strictMode) {\n        super(strictMode);\n    }\n\n    followingPhase(): string {\n        return \"\\\\s*(?:\\\\-|\\\\\u2013|\\\\~|\\\\\u301C|to|\\\\?)\\\\s*\";\n    }\n\n    primaryPrefix(): string {\n        return \"(?:(?:at|from)\\\\s*)??\";\n    }\n\n    primarySuffix(): string {\n        return \"(?:\\\\s*(?:o\\\\W*clock|at\\\\s*night|in\\\\s*the\\\\s*(?:morning|afternoon)))?(?!/)(?=\\\\W|$)\";\n    }\n\n    extractPrimaryTimeComponents(context: ParsingContext, match: RegExpMatchArray): null | ParsingComponents {\n        const components = super.extractPrimaryTimeComponents(context, match);\n        if (components) {\n            if (match[0].endsWith(\"night\")) {\n                const hour = components.get(\"hour\");\n                if (hour >= 6 && hour < 12) {\n                    components.assign(\"hour\", components.get(\"hour\") + 12);\n                    components.assign(\"meridiem\", Meridiem.PM);\n                } else if (hour < 6) {\n                    components.assign(\"meridiem\", Meridiem.AM);\n                }\n            }\n\n            if (match[0].endsWith(\"afternoon\")) {\n                components.assign(\"meridiem\", Meridiem.PM);\n                const hour = components.get(\"hour\");\n                if (hour >= 0 && hour <= 6) {\n                    components.assign(\"hour\", components.get(\"hour\") + 12);\n                }\n            }\n\n            if (match[0].endsWith(\"morning\")) {\n                components.assign(\"meridiem\", Meridiem.AM);\n                const hour = components.get(\"hour\");\n                if (hour < 12) {\n                    components.assign(\"hour\", components.get(\"hour\"));\n                }\n            }\n        }\n\n        return components;\n    }\n}\n", "import { OpUnitType, QUnitType } from \"dayjs\";\nimport { ParsingComponents } from \"../results\";\n\nexport type TimeUnits = { [c in OpUnitType | QUnitType]?: number };\n\nexport function reverseTimeUnits(timeUnits: TimeUnits): TimeUnits {\n    const reversed = {};\n    for (const key in timeUnits) {\n        // noinspection JSUnfilteredForInLoop\n        reversed[key] = -timeUnits[key];\n    }\n\n    return reversed as TimeUnits;\n}\n\nexport function addImpliedTimeUnits(components: ParsingComponents, timeUnits: TimeUnits): ParsingComponents {\n    const output = components.clone();\n\n    let date = components.dayjs();\n    for (const key in timeUnits) {\n        // noinspection JSUnfilteredForInLoop,TypeScriptValidateTypes\n        date = date.add(timeUnits[key], key as QUnitType);\n    }\n\n    if (\"day\" in timeUnits || \"d\" in timeUnits || \"week\" in timeUnits || \"month\" in timeUnits || \"year\" in timeUnits) {\n        output.imply(\"day\", date.date());\n        output.imply(\"month\", date.month() + 1);\n        output.imply(\"year\", date.year());\n    }\n\n    if (\"second\" in timeUnits || \"minute\" in timeUnits || \"hour\" in timeUnits) {\n        output.imply(\"second\", date.second());\n        output.imply(\"minute\", date.minute());\n        output.imply(\"hour\", date.hour());\n    }\n\n    return output;\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { parseTimeUnits, TIME_UNITS_PATTERN } from \"../constants\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nconst PATTERN = new RegExp(`(${TIME_UNITS_PATTERN})\\\\s{0,5}(?:ago|before|earlier)(?=(?:\\\\W|$))`, \"i\");\nconst STRICT_PATTERN = new RegExp(`(${TIME_UNITS_PATTERN})\\\\s{0,5}ago(?=(?:\\\\W|$))`, \"i\");\n\nexport default class ENTimeUnitAgoFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor(private strictMode: boolean) {\n        super();\n    }\n\n    innerPattern(): RegExp {\n        return this.strictMode ? STRICT_PATTERN : PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const timeUnits = parseTimeUnits(match[1]);\n        const outputTimeUnits = reverseTimeUnits(timeUnits);\n\n        return ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { parseTimeUnits, TIME_UNITS_PATTERN } from \"../constants\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    `(${TIME_UNITS_PATTERN})\\\\s{0,5}(?:later|after|from now|henceforth|forward|out)` + \"(?=(?:\\\\W|$))\",\n    \"i\"\n);\n\nconst STRICT_PATTERN = new RegExp(\"\" + \"(\" + TIME_UNITS_PATTERN + \")\" + \"(later|from now)\" + \"(?=(?:\\\\W|$))\", \"i\");\nconst GROUP_NUM_TIMEUNITS = 1;\n\nexport default class ENTimeUnitLaterFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor(private strictMode: boolean) {\n        super();\n    }\n\n    innerPattern(): RegExp {\n        return this.strictMode ? STRICT_PATTERN : PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const fragments = parseTimeUnits(match[GROUP_NUM_TIMEUNITS]);\n        return ParsingComponents.createRelativeFromReference(context.reference, fragments);\n    }\n}\n", "import { ParsingContext, Refiner } from \"../chrono\";\nimport { ParsingResult } from \"../results\";\n\n/**\n * A special type of {@link Refiner} to filter the results\n */\nexport abstract class Filter implements Refiner {\n    abstract isValid(context: ParsingContext, result: ParsingResult): boolean;\n\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        return results.filter((r) => this.isValid(context, r));\n    }\n}\n\n/**\n * A special type of {@link Refiner} to merge consecutive results\n */\nexport abstract class MergingRefiner implements Refiner {\n    abstract shouldMergeResults(\n        textBetween: string,\n        currentResult: ParsingResult,\n        nextResult: ParsingResult,\n        context: ParsingContext\n    ): boolean;\n\n    abstract mergeResults(\n        textBetween: string,\n        currentResult: ParsingResult,\n        nextResult: ParsingResult,\n        context: ParsingContext\n    ): ParsingResult;\n\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        if (results.length < 2) {\n            return results;\n        }\n\n        const mergedResults: ParsingResult[] = [];\n        let curResult = results[0];\n        let nextResult = null;\n\n        for (let i = 1; i < results.length; i++) {\n            nextResult = results[i];\n\n            const textBetween = context.text.substring(curResult.index + curResult.text.length, nextResult.index);\n            if (!this.shouldMergeResults(textBetween, curResult, nextResult, context)) {\n                mergedResults.push(curResult);\n                curResult = nextResult;\n            } else {\n                const left = curResult;\n                const right = nextResult;\n                const mergedResult = this.mergeResults(textBetween, left, right, context);\n                context.debug(() => {\n                    console.log(`${this.constructor.name} merged ${left} and ${right} into ${mergedResult}`);\n                });\n\n                curResult = mergedResult;\n            }\n        }\n\n        if (curResult != null) {\n            mergedResults.push(curResult);\n        }\n\n        return mergedResults;\n    }\n}\n", "/*\n  \n*/\n\nimport { ParsingResult } from \"../../results\";\nimport { MergingRefiner } from \"../abstractRefiners\";\n\nexport default abstract class AbstractMergeDateRangeRefiner extends MergingRefiner {\n    abstract patternBetween(): RegExp;\n\n    shouldMergeResults(textBetween, currentResult, nextResult): boolean {\n        return !currentResult.end && !nextResult.end && textBetween.match(this.patternBetween()) != null;\n    }\n\n    mergeResults(textBetween, fromResult, toResult): ParsingResult {\n        if (!fromResult.start.isOnlyWeekdayComponent() && !toResult.start.isOnlyWeekdayComponent()) {\n            toResult.start.getCertainComponents().forEach((key) => {\n                if (!fromResult.start.isCertain(key)) {\n                    fromResult.start.assign(key, toResult.start.get(key));\n                }\n            });\n\n            fromResult.start.getCertainComponents().forEach((key) => {\n                if (!toResult.start.isCertain(key)) {\n                    toResult.start.assign(key, fromResult.start.get(key));\n                }\n            });\n        }\n\n        if (fromResult.start.date().getTime() > toResult.start.date().getTime()) {\n            let fromMoment = fromResult.start.dayjs();\n            let toMoment = toResult.start.dayjs();\n\n            if (fromResult.start.isOnlyWeekdayComponent() && fromMoment.add(-7, \"days\").isBefore(toMoment)) {\n                fromMoment = fromMoment.add(-7, \"days\");\n                fromResult.start.imply(\"day\", fromMoment.date());\n                fromResult.start.imply(\"month\", fromMoment.month() + 1);\n                fromResult.start.imply(\"year\", fromMoment.year());\n            } else if (toResult.start.isOnlyWeekdayComponent() && toMoment.add(7, \"days\").isAfter(fromMoment)) {\n                toMoment = toMoment.add(7, \"days\");\n                toResult.start.imply(\"day\", toMoment.date());\n                toResult.start.imply(\"month\", toMoment.month() + 1);\n                toResult.start.imply(\"year\", toMoment.year());\n            } else {\n                [toResult, fromResult] = [fromResult, toResult];\n            }\n        }\n\n        const result = fromResult.clone();\n        result.start = fromResult.start;\n        result.end = toResult.start;\n        result.index = Math.min(fromResult.index, toResult.index);\n        if (fromResult.index < toResult.index) {\n            result.text = fromResult.text + textBetween + toResult.text;\n        } else {\n            result.text = toResult.text + textBetween + fromResult.text;\n        }\n\n        return result;\n    }\n}\n", "/*\n  \n*/\n\nimport AbstractMergeDateRangeRefiner from \"../../../common/refiners/AbstractMergeDateRangeRefiner\";\n\n/**\n * Merging before and after results (see. AbstractMergeDateRangeRefiner)\n * This implementation should provide English connecting phases\n * - 2020-02-13 [to] 2020-02-13\n * - Wednesday [-] Friday\n */\nexport default class ENMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner {\n    patternBetween(): RegExp {\n        return /^\\s*(to|-)\\s*$/i;\n    }\n}\n", "import { ParsingComponents, ParsingResult } from \"../results\";\nimport { Meridiem } from \"../index\";\n\nexport function mergeDateTimeResult(dateResult: ParsingResult, timeResult: ParsingResult): ParsingResult {\n    const result = dateResult.clone();\n    const beginDate = dateResult.start;\n    const beginTime = timeResult.start;\n\n    result.start = mergeDateTimeComponent(beginDate, beginTime);\n    if (dateResult.end != null || timeResult.end != null) {\n        const endDate = dateResult.end == null ? dateResult.start : dateResult.end;\n        const endTime = timeResult.end == null ? timeResult.start : timeResult.end;\n        const endDateTime = mergeDateTimeComponent(endDate, endTime);\n\n        if (dateResult.end == null && endDateTime.date().getTime() < result.start.date().getTime()) {\n            // Ex. 9pm - 1am\n            if (endDateTime.isCertain(\"day\")) {\n                endDateTime.assign(\"day\", endDateTime.get(\"day\") + 1);\n            } else {\n                endDateTime.imply(\"day\", endDateTime.get(\"day\") + 1);\n            }\n        }\n\n        result.end = endDateTime;\n    }\n\n    return result;\n}\n\nexport function mergeDateTimeComponent(\n    dateComponent: ParsingComponents,\n    timeComponent: ParsingComponents\n): ParsingComponents {\n    const dateTimeComponent = dateComponent.clone();\n\n    if (timeComponent.isCertain(\"hour\")) {\n        dateTimeComponent.assign(\"hour\", timeComponent.get(\"hour\"));\n        dateTimeComponent.assign(\"minute\", timeComponent.get(\"minute\"));\n\n        if (timeComponent.isCertain(\"second\")) {\n            dateTimeComponent.assign(\"second\", timeComponent.get(\"second\"));\n\n            if (timeComponent.isCertain(\"millisecond\")) {\n                dateTimeComponent.assign(\"millisecond\", timeComponent.get(\"millisecond\"));\n            } else {\n                dateTimeComponent.imply(\"millisecond\", timeComponent.get(\"millisecond\"));\n            }\n        } else {\n            dateTimeComponent.imply(\"second\", timeComponent.get(\"second\"));\n            dateTimeComponent.imply(\"millisecond\", timeComponent.get(\"millisecond\"));\n        }\n    } else {\n        dateTimeComponent.imply(\"hour\", timeComponent.get(\"hour\"));\n        dateTimeComponent.imply(\"minute\", timeComponent.get(\"minute\"));\n        dateTimeComponent.imply(\"second\", timeComponent.get(\"second\"));\n        dateTimeComponent.imply(\"millisecond\", timeComponent.get(\"millisecond\"));\n    }\n\n    if (timeComponent.isCertain(\"timezoneOffset\")) {\n        dateTimeComponent.assign(\"timezoneOffset\", timeComponent.get(\"timezoneOffset\"));\n    }\n\n    if (timeComponent.isCertain(\"meridiem\")) {\n        dateTimeComponent.assign(\"meridiem\", timeComponent.get(\"meridiem\"));\n    } else if (timeComponent.get(\"meridiem\") != null && dateTimeComponent.get(\"meridiem\") == null) {\n        dateTimeComponent.imply(\"meridiem\", timeComponent.get(\"meridiem\"));\n    }\n\n    if (dateTimeComponent.get(\"meridiem\") == Meridiem.PM && dateTimeComponent.get(\"hour\") < 12) {\n        if (timeComponent.isCertain(\"hour\")) {\n            dateTimeComponent.assign(\"hour\", dateTimeComponent.get(\"hour\") + 12);\n        } else {\n            dateTimeComponent.imply(\"hour\", dateTimeComponent.get(\"hour\") + 12);\n        }\n    }\n\n    return dateTimeComponent;\n}\n", "/*\n\n*/\n\nimport { MergingRefiner } from \"../abstractRefiners\";\nimport { ParsingResult } from \"../../results\";\nimport { mergeDateTimeResult } from \"../../calculation/mergingCalculation\";\n\nexport default abstract class ENMergeDateTimeRefiner extends MergingRefiner {\n    abstract patternBetween(): RegExp;\n\n    shouldMergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): boolean {\n        return (\n            ((currentResult.start.isOnlyDate() && nextResult.start.isOnlyTime()) ||\n                (nextResult.start.isOnlyDate() && currentResult.start.isOnlyTime())) &&\n            textBetween.match(this.patternBetween()) != null\n        );\n    }\n\n    mergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): ParsingResult {\n        const result = currentResult.start.isOnlyDate()\n            ? mergeDateTimeResult(currentResult, nextResult)\n            : mergeDateTimeResult(nextResult, currentResult);\n\n        result.index = currentResult.index;\n        result.text = currentResult.text + textBetween + nextResult.text;\n        return result;\n    }\n}\n", "import AbstractMergeDateTimeRefiner from \"../../../common/refiners/AbstractMergeDateTimeRefiner\";\n\n/**\n * Merging date-only result and time-only result (see. AbstractMergeDateTimeRefiner).\n * This implementation should provide English connecting phases\n * - 2020-02-13 [at] 6pm\n * - Tomorrow [after] 7am\n */\nexport default class ENMergeDateTimeRefiner extends AbstractMergeDateTimeRefiner {\n    patternBetween(): RegExp {\n        return new RegExp(\"^\\\\s*(T|at|after|before|on|of|,|-)?\\\\s*$\");\n    }\n}\n", "// Map ABBR -> Offset in minute\nimport { ParsingContext, Refiner } from \"../../chrono\";\nimport { ParsingResult } from \"../../results\";\n\nconst TIMEZONE_NAME_PATTERN = new RegExp(\"^\\\\s*,?\\\\s*\\\\(?([A-Z]{2,4})\\\\)?(?=\\\\W|$)\", \"i\");\nconst DEFAULT_TIMEZONE_ABBR_MAP = {\n    ACDT: 630,\n    ACST: 570,\n    ADT: -180,\n    AEDT: 660,\n    AEST: 600,\n    AFT: 270,\n    AKDT: -480,\n    AKST: -540,\n    ALMT: 360,\n    AMST: -180,\n    AMT: -240,\n    ANAST: 720,\n    ANAT: 720,\n    AQTT: 300,\n    ART: -180,\n    AST: -240,\n    AWDT: 540,\n    AWST: 480,\n    AZOST: 0,\n    AZOT: -60,\n    AZST: 300,\n    AZT: 240,\n    BNT: 480,\n    BOT: -240,\n    BRST: -120,\n    BRT: -180,\n    BST: 60,\n    BTT: 360,\n    CAST: 480,\n    CAT: 120,\n    CCT: 390,\n    CDT: -300,\n    CEST: 120,\n    CET: 60,\n    CHADT: 825,\n    CHAST: 765,\n    CKT: -600,\n    CLST: -180,\n    CLT: -240,\n    COT: -300,\n    CST: -360,\n    CVT: -60,\n    CXT: 420,\n    ChST: 600,\n    DAVT: 420,\n    EASST: -300,\n    EAST: -360,\n    EAT: 180,\n    ECT: -300,\n    EDT: -240,\n    EEST: 180,\n    EET: 120,\n    EGST: 0,\n    EGT: -60,\n    EST: -300,\n    ET: -300,\n    FJST: 780,\n    FJT: 720,\n    FKST: -180,\n    FKT: -240,\n    FNT: -120,\n    GALT: -360,\n    GAMT: -540,\n    GET: 240,\n    GFT: -180,\n    GILT: 720,\n    GMT: 0,\n    GST: 240,\n    GYT: -240,\n    HAA: -180,\n    HAC: -300,\n    HADT: -540,\n    HAE: -240,\n    HAP: -420,\n    HAR: -360,\n    HAST: -600,\n    HAT: -90,\n    HAY: -480,\n    HKT: 480,\n    HLV: -210,\n    HNA: -240,\n    HNC: -360,\n    HNE: -300,\n    HNP: -480,\n    HNR: -420,\n    HNT: -150,\n    HNY: -540,\n    HOVT: 420,\n    ICT: 420,\n    IDT: 180,\n    IOT: 360,\n    IRDT: 270,\n    IRKST: 540,\n    IRKT: 540,\n    IRST: 210,\n    IST: 330,\n    JST: 540,\n    KGT: 360,\n    KRAST: 480,\n    KRAT: 480,\n    KST: 540,\n    KUYT: 240,\n    LHDT: 660,\n    LHST: 630,\n    LINT: 840,\n    MAGST: 720,\n    MAGT: 720,\n    MART: -510,\n    MAWT: 300,\n    MDT: -360,\n    MESZ: 120,\n    MEZ: 60,\n    MHT: 720,\n    MMT: 390,\n    MSD: 240,\n    MSK: 240,\n    MST: -420,\n    MUT: 240,\n    MVT: 300,\n    MYT: 480,\n    NCT: 660,\n    NDT: -90,\n    NFT: 690,\n    NOVST: 420,\n    NOVT: 360,\n    NPT: 345,\n    NST: -150,\n    NUT: -660,\n    NZDT: 780,\n    NZST: 720,\n    OMSST: 420,\n    OMST: 420,\n    PDT: -420,\n    PET: -300,\n    PETST: 720,\n    PETT: 720,\n    PGT: 600,\n    PHOT: 780,\n    PHT: 480,\n    PKT: 300,\n    PMDT: -120,\n    PMST: -180,\n    PONT: 660,\n    PST: -480,\n    PT: -480,\n    PWT: 540,\n    PYST: -180,\n    PYT: -240,\n    RET: 240,\n    SAMT: 240,\n    SAST: 120,\n    SBT: 660,\n    SCT: 240,\n    SGT: 480,\n    SRT: -180,\n    SST: -660,\n    TAHT: -600,\n    TFT: 300,\n    TJT: 300,\n    TKT: 780,\n    TLT: 540,\n    TMT: 300,\n    TVT: 720,\n    ULAT: 480,\n    UTC: 0,\n    UYST: -120,\n    UYT: -180,\n    UZT: 300,\n    VET: -210,\n    VLAST: 660,\n    VLAT: 660,\n    VUT: 660,\n    WAST: 120,\n    WAT: 60,\n    WEST: 60,\n    WESZ: 60,\n    WET: 0,\n    WEZ: 0,\n    WFT: 720,\n    WGST: -120,\n    WGT: -180,\n    WIB: 420,\n    WIT: 540,\n    WITA: 480,\n    WST: 780,\n    WT: 0,\n    YAKST: 600,\n    YAKT: 600,\n    YAPT: 600,\n    YEKST: 360,\n    YEKT: 360,\n};\n\nexport default class ExtractTimezoneAbbrRefiner implements Refiner {\n    private readonly timezone: { string: number };\n\n    constructor(timezoneOverrides?: { string: number }) {\n        this.timezone = { ...DEFAULT_TIMEZONE_ABBR_MAP, ...timezoneOverrides };\n    }\n\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        const timezoneOverrides = context.option.timezones ?? {};\n\n        results.forEach((result) => {\n            const suffix = context.text.substring(result.index + result.text.length);\n            const match = TIMEZONE_NAME_PATTERN.exec(suffix);\n            if (!match) {\n                return;\n            }\n\n            const timezoneAbbr = match[1].toUpperCase();\n            const extractedTimezoneOffset = timezoneOverrides[timezoneAbbr] ?? this.timezone[timezoneAbbr] ?? null;\n            if (extractedTimezoneOffset === null) {\n                return;\n            }\n\n            context.debug(() => {\n                console.log(\n                    `Extracting timezone: '${timezoneAbbr}' into: ${extractedTimezoneOffset} for: ${result.start}`\n                );\n            });\n\n            const currentTimezoneOffset = result.start.get(\"timezoneOffset\");\n            if (currentTimezoneOffset !== null && extractedTimezoneOffset != currentTimezoneOffset) {\n                // We may already have extracted the timezone offset e.g. \"11 am GMT+0900 (JST)\"\n                // - if they are equal, we also want to take the abbreviation text into result\n                // - if they are not equal, we trust the offset more\n                if (result.start.isCertain(\"timezoneOffset\")) {\n                    return;\n                }\n\n                // This is often because it's relative time with inferred timezone (e.g. in 1 hour, tomorrow)\n                // Then, we want to double check the abbr case (e.g. \"GET\" not \"get\")\n                if (timezoneAbbr != match[1]) {\n                    return;\n                }\n            }\n\n            if (result.start.isOnlyDate()) {\n                // If the time is not explicitly mentioned,\n                // Then, we also want to double check the abbr case (e.g. \"GET\" not \"get\")\n                if (timezoneAbbr != match[1]) {\n                    return;\n                }\n            }\n\n            result.text += match[0];\n\n            if (!result.start.isCertain(\"timezoneOffset\")) {\n                result.start.assign(\"timezoneOffset\", extractedTimezoneOffset);\n            }\n\n            if (result.end != null && !result.end.isCertain(\"timezoneOffset\")) {\n                result.end.assign(\"timezoneOffset\", extractedTimezoneOffset);\n            }\n        });\n\n        return results;\n    }\n}\n", "import { ParsingContext, Refiner } from \"../../chrono\";\nimport { ParsingResult } from \"../../results\";\n\nconst TIMEZONE_OFFSET_PATTERN = new RegExp(\"^\\\\s*(?:\\\\(?(?:GMT|UTC)\\\\s?)?([+-])(\\\\d{1,2})(?::?(\\\\d{2}))?\\\\)?\", \"i\");\nconst TIMEZONE_OFFSET_SIGN_GROUP = 1;\nconst TIMEZONE_OFFSET_HOUR_OFFSET_GROUP = 2;\nconst TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP = 3;\n\nexport default class ExtractTimezoneOffsetRefiner implements Refiner {\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        results.forEach(function (result) {\n            if (result.start.isCertain(\"timezoneOffset\")) {\n                return;\n            }\n\n            const suffix = context.text.substring(result.index + result.text.length);\n            const match = TIMEZONE_OFFSET_PATTERN.exec(suffix);\n            if (!match) {\n                return;\n            }\n\n            context.debug(() => {\n                console.log(`Extracting timezone: '${match[0]}' into : ${result}`);\n            });\n\n            const hourOffset = parseInt(match[TIMEZONE_OFFSET_HOUR_OFFSET_GROUP]);\n            const minuteOffset = parseInt(match[TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP] || \"0\");\n            let timezoneOffset = hourOffset * 60 + minuteOffset;\n            // No timezones have offsets greater than 14 hours, so disregard this match\n            if (timezoneOffset > 14 * 60) {\n                return;\n            }\n            if (match[TIMEZONE_OFFSET_SIGN_GROUP] === \"-\") {\n                timezoneOffset = -timezoneOffset;\n            }\n\n            if (result.end != null) {\n                result.end.assign(\"timezoneOffset\", timezoneOffset);\n            }\n\n            result.start.assign(\"timezoneOffset\", timezoneOffset);\n            result.text += match[0];\n        });\n\n        return results;\n    }\n}\n", "/*\n  \n*/\n\nimport { ParsingContext, Refiner } from \"../../chrono\";\nimport { ParsingResult } from \"../../results\";\n\nexport default class OverlapRemovalRefiner implements Refiner {\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        if (results.length < 2) {\n            return results;\n        }\n\n        const filteredResults = [];\n\n        let prevResult = results[0];\n        for (let i = 1; i < results.length; i++) {\n            const result = results[i];\n\n            // If overlap, compare the length and discard the shorter one\n            if (result.index < prevResult.index + prevResult.text.length) {\n                if (result.text.length > prevResult.text.length) {\n                    prevResult = result;\n                }\n            } else {\n                filteredResults.push(prevResult);\n                prevResult = result;\n            }\n        }\n\n        // The last one\n        if (prevResult != null) {\n            filteredResults.push(prevResult);\n        }\n\n        return filteredResults;\n    }\n}\n", "/*\n    Enforce 'forwardDate' option to on the results. When there are missing component,\n    e.g. \"March 12-13 (without year)\" or \"Thursday\", the refiner will try to adjust the result\n    into the future instead of the past.\n*/\n\nimport { ParsingContext, Refiner } from \"../../chrono\";\nimport { ParsingResult } from \"../../results\";\nimport dayjs from \"dayjs\";\n\nexport default class ForwardDateRefiner implements Refiner {\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        if (!context.option.forwardDate) {\n            return results;\n        }\n\n        results.forEach(function (result) {\n            let refMoment = dayjs(context.refDate);\n\n            if (result.start.isOnlyDayMonthComponent() && refMoment.isAfter(result.start.dayjs())) {\n                for (let i = 0; i < 3 && refMoment.isAfter(result.start.dayjs()); i++) {\n                    result.start.imply(\"year\", result.start.get(\"year\") + 1);\n                    context.debug(() => {\n                        console.log(`Forward yearly adjusted for ${result} (${result.start})`);\n                    });\n\n                    if (result.end && !result.end.isCertain(\"year\")) {\n                        result.end.imply(\"year\", result.end.get(\"year\") + 1);\n                        context.debug(() => {\n                            console.log(`Forward yearly adjusted for ${result} (${result.end})`);\n                        });\n                    }\n                }\n            }\n\n            if (result.start.isOnlyWeekdayComponent() && refMoment.isAfter(result.start.dayjs())) {\n                if (refMoment.day() >= result.start.get(\"weekday\")) {\n                    refMoment = refMoment.day(result.start.get(\"weekday\") + 7);\n                } else {\n                    refMoment = refMoment.day(<number>result.start.get(\"weekday\"));\n                }\n\n                result.start.imply(\"day\", refMoment.date());\n                result.start.imply(\"month\", refMoment.month() + 1);\n                result.start.imply(\"year\", refMoment.year());\n                context.debug(() => {\n                    console.log(`Forward weekly adjusted for ${result} (${result.start})`);\n                });\n\n                if (result.end && result.end.isOnlyWeekdayComponent()) {\n                    // Adjust date to the coming week\n                    if (refMoment.day() > result.end.get(\"weekday\")) {\n                        refMoment = refMoment.day(result.end.get(\"weekday\") + 7);\n                    } else {\n                        refMoment = refMoment.day(<number>result.end.get(\"weekday\"));\n                    }\n\n                    result.end.imply(\"day\", refMoment.date());\n                    result.end.imply(\"month\", refMoment.month() + 1);\n                    result.end.imply(\"year\", refMoment.year());\n                    context.debug(() => {\n                        console.log(`Forward weekly adjusted for ${result} (${result.end})`);\n                    });\n                }\n            }\n        });\n\n        return results;\n    }\n}\n", "import { Filter } from \"../abstractRefiners\";\nimport { ParsingResult } from \"../../results\";\n\nexport default class UnlikelyFormatFilter extends Filter {\n    constructor(private strictMode: boolean) {\n        super();\n    }\n\n    isValid(context, result: ParsingResult): boolean {\n        if (result.text.replace(\" \", \"\").match(/^\\d*(\\.\\d*)?$/)) {\n            context.debug(() => {\n                console.log(`Removing unlikely result '${result.text}'`);\n            });\n\n            return false;\n        }\n\n        if (!result.start.isValidDate()) {\n            context.debug(() => {\n                console.log(`Removing invalid result: ${result} (${result.start})`);\n            });\n\n            return false;\n        }\n\n        if (result.end && !result.end.isValidDate()) {\n            context.debug(() => {\n                console.log(`Removing invalid result: ${result} (${result.end})`);\n            });\n\n            return false;\n        }\n\n        if (this.strictMode) {\n            return this.isStrictModeValid(context, result);\n        }\n\n        return true;\n    }\n\n    private isStrictModeValid(context, result: ParsingResult) {\n        if (result.start.isOnlyWeekdayComponent()) {\n            context.debug(() => {\n                console.log(`(Strict) Removing weekday only component: ${result} (${result.end})`);\n            });\n\n            return false;\n        }\n\n        if (result.start.isOnlyTime() && (!result.start.isCertain(\"hour\") || !result.start.isCertain(\"minute\"))) {\n            context.debug(() => {\n                console.log(`(Strict) Removing uncertain time component: ${result} (${result.end})`);\n            });\n\n            return false;\n        }\n\n        return true;\n    }\n}\n", "import { ParsingContext } from \"../../chrono\";\nimport { Component } from \"../../index\";\nimport { AbstractParserWithWordBoundaryChecking } from \"./AbstractParserWithWordBoundary\";\n\n// ISO 8601\n// http://www.w3.org/TR/NOTE-datetime\n// - YYYY-MM-DD\n// - YYYY-MM-DDThh:mmTZD\n// - YYYY-MM-DDThh:mm:ssTZD\n// - YYYY-MM-DDThh:mm:ss.sTZD\n// - TZD = (Z or +hh:mm or -hh:mm)\n\n// prettier-ignore\nconst PATTERN = new RegExp(\n    \"([0-9]{4})\\\\-([0-9]{1,2})\\\\-([0-9]{1,2})\" +\n    \"(?:T\" + //..\n        \"([0-9]{1,2}):([0-9]{1,2})\" + // hh:mm\n        \"(?:\" +\n            \":([0-9]{1,2})(?:\\\\.(\\\\d{1,4}))?\" +\n        \")?\" + // :ss.s\n        \"(?:\" +\n            \"Z|([+-]\\\\d{2}):?(\\\\d{2})?\" +\n        \")?\" + // TZD (Z or \u00B1hh:mm or \u00B1hhmm or \u00B1hh)\n    \")?\" +\n    \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst YEAR_NUMBER_GROUP = 1;\nconst MONTH_NUMBER_GROUP = 2;\nconst DATE_NUMBER_GROUP = 3;\nconst HOUR_NUMBER_GROUP = 4;\nconst MINUTE_NUMBER_GROUP = 5;\nconst SECOND_NUMBER_GROUP = 6;\nconst MILLISECOND_NUMBER_GROUP = 7;\nconst TZD_HOUR_OFFSET_GROUP = 8;\nconst TZD_MINUTE_OFFSET_GROUP = 9;\n\nexport default class ISOFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const components: { [component in Component]?: number } = {};\n        components[\"year\"] = parseInt(match[YEAR_NUMBER_GROUP]);\n        components[\"month\"] = parseInt(match[MONTH_NUMBER_GROUP]);\n        components[\"day\"] = parseInt(match[DATE_NUMBER_GROUP]);\n\n        if (match[HOUR_NUMBER_GROUP] != null) {\n            components[\"hour\"] = parseInt(match[HOUR_NUMBER_GROUP]);\n            components[\"minute\"] = parseInt(match[MINUTE_NUMBER_GROUP]);\n\n            if (match[SECOND_NUMBER_GROUP] != null) {\n                components[\"second\"] = parseInt(match[SECOND_NUMBER_GROUP]);\n            }\n\n            if (match[MILLISECOND_NUMBER_GROUP] != null) {\n                components[\"millisecond\"] = parseInt(match[MILLISECOND_NUMBER_GROUP]);\n            }\n\n            if (match[TZD_HOUR_OFFSET_GROUP] == null) {\n                components[\"timezoneOffset\"] = 0;\n            } else {\n                const hourOffset = parseInt(match[TZD_HOUR_OFFSET_GROUP]);\n\n                let minuteOffset = 0;\n                if (match[TZD_MINUTE_OFFSET_GROUP] != null) {\n                    minuteOffset = parseInt(match[TZD_MINUTE_OFFSET_GROUP]);\n                }\n\n                let offset = hourOffset * 60;\n                if (offset < 0) {\n                    offset -= minuteOffset;\n                } else {\n                    offset += minuteOffset;\n                }\n\n                components[\"timezoneOffset\"] = offset;\n            }\n        }\n\n        return components;\n    }\n}\n", "/*\n  \n*/\n\nimport { MergingRefiner } from \"../abstractRefiners\";\nimport { ParsingResult } from \"../../results\";\n\n/**\n * Merge weekday component into more completed data\n * - [Sunday] [12/7/2014] => [Sunday 12/7/2014]\n * - [Tuesday], [January 13, 2012] => [Sunday 12/7/2014]\n */\nexport default class MergeWeekdayComponentRefiner extends MergingRefiner {\n    mergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): ParsingResult {\n        const newResult = nextResult.clone();\n        newResult.index = currentResult.index;\n        newResult.text = currentResult.text + textBetween + newResult.text;\n\n        newResult.start.assign(\"weekday\", currentResult.start.get(\"weekday\"));\n        if (newResult.end) {\n            newResult.end.assign(\"weekday\", currentResult.start.get(\"weekday\"));\n        }\n\n        return newResult;\n    }\n\n    shouldMergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): boolean {\n        const weekdayThenNormalDate =\n            currentResult.start.isOnlyWeekdayComponent() &&\n            !currentResult.start.isCertain(\"hour\") &&\n            nextResult.start.isCertain(\"day\");\n        return weekdayThenNormalDate && textBetween.match(/^,?\\s*$/) != null;\n    }\n}\n", "import { Configuration } from \"./chrono\";\n\nimport ExtractTimezoneAbbrRefiner from \"./common/refiners/ExtractTimezoneAbbrRefiner\";\nimport ExtractTimezoneOffsetRefiner from \"./common/refiners/ExtractTimezoneOffsetRefiner\";\nimport OverlapRemovalRefiner from \"./common/refiners/OverlapRemovalRefiner\";\nimport ForwardDateRefiner from \"./common/refiners/ForwardDateRefiner\";\nimport UnlikelyFormatFilter from \"./common/refiners/UnlikelyFormatFilter\";\nimport ISOFormatParser from \"./common/parsers/ISOFormatParser\";\nimport MergeWeekdayComponentRefiner from \"./common/refiners/MergeWeekdayComponentRefiner\";\n\nexport function includeCommonConfiguration(configuration: Configuration, strictMode = false): Configuration {\n    configuration.parsers.unshift(new ISOFormatParser());\n\n    configuration.refiners.unshift(new MergeWeekdayComponentRefiner());\n    configuration.refiners.unshift(new ExtractTimezoneAbbrRefiner());\n    configuration.refiners.unshift(new ExtractTimezoneOffsetRefiner());\n    configuration.refiners.unshift(new OverlapRemovalRefiner());\n\n    configuration.refiners.push(new OverlapRemovalRefiner());\n    configuration.refiners.push(new ForwardDateRefiner());\n    configuration.refiners.push(new UnlikelyFormatFilter(strictMode));\n    return configuration;\n}\n", "import { ParsingComponents, ReferenceWithTimezone } from \"../results\";\nimport dayjs from \"dayjs\";\nimport { assignSimilarDate, assignSimilarTime, implySimilarTime } from \"../utils/dayjs\";\nimport { Meridiem } from \"../index\";\n\nexport function now(reference: ReferenceWithTimezone): ParsingComponents {\n    const targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    assignSimilarDate(component, targetDate);\n    assignSimilarTime(component, targetDate);\n    if (reference.timezoneOffset !== null) {\n        component.assign(\"timezoneOffset\", targetDate.utcOffset());\n    }\n    return component;\n}\n\nexport function today(reference: ReferenceWithTimezone): ParsingComponents {\n    const targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    assignSimilarDate(component, targetDate);\n    implySimilarTime(component, targetDate);\n    return component;\n}\n\n/**\n * The previous day. Imply the same time.\n */\nexport function yesterday(reference: ReferenceWithTimezone): ParsingComponents {\n    return theDayBefore(reference, 1);\n}\n\nexport function theDayBefore(reference: ReferenceWithTimezone, numDay: number): ParsingComponents {\n    return theDayAfter(reference, -numDay);\n}\n\n/**\n * The following day with dayjs.assignTheNextDay()\n */\nexport function tomorrow(reference: ReferenceWithTimezone): ParsingComponents {\n    return theDayAfter(reference, 1);\n}\n\nexport function theDayAfter(reference: ReferenceWithTimezone, nDays: number): ParsingComponents {\n    let targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    targetDate = targetDate.add(nDays, \"day\");\n    assignSimilarDate(component, targetDate);\n    implySimilarTime(component, targetDate);\n    return component;\n}\n\nexport function tonight(reference: ReferenceWithTimezone, implyHour = 22): ParsingComponents {\n    const targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    component.imply(\"hour\", implyHour);\n    component.imply(\"meridiem\", Meridiem.PM);\n    assignSimilarDate(component, targetDate);\n    return component;\n}\n\nexport function lastNight(reference: ReferenceWithTimezone, implyHour = 0): ParsingComponents {\n    let targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    if (targetDate.hour() < 6) {\n        targetDate = targetDate.add(-1, \"day\");\n    }\n    assignSimilarDate(component, targetDate);\n    component.imply(\"hour\", implyHour);\n    return component;\n}\n\nexport function evening(reference: ReferenceWithTimezone, implyHour = 20): ParsingComponents {\n    const component = new ParsingComponents(reference, {});\n    component.imply(\"meridiem\", Meridiem.PM);\n    component.imply(\"hour\", implyHour);\n    return component;\n}\n\nexport function yesterdayEvening(reference: ReferenceWithTimezone, implyHour = 20): ParsingComponents {\n    let targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    targetDate = targetDate.add(-1, \"day\");\n    assignSimilarDate(component, targetDate);\n    component.imply(\"hour\", implyHour);\n    component.imply(\"meridiem\", Meridiem.PM);\n    return component;\n}\n\nexport function midnight(reference: ReferenceWithTimezone): ParsingComponents {\n    const component = new ParsingComponents(reference, {});\n    component.imply(\"hour\", 0);\n    component.imply(\"minute\", 0);\n    component.imply(\"second\", 0);\n    return component;\n}\n\nexport function morning(reference: ReferenceWithTimezone, implyHour = 6): ParsingComponents {\n    const component = new ParsingComponents(reference, {});\n    component.imply(\"meridiem\", Meridiem.AM);\n    component.imply(\"hour\", implyHour);\n    return component;\n}\n\nexport function noon(reference: ReferenceWithTimezone): ParsingComponents {\n    const component = new ParsingComponents(reference, {});\n    component.imply(\"meridiem\", Meridiem.AM);\n    component.imply(\"hour\", 12);\n    return component;\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport dayjs from \"dayjs\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { assignSimilarDate } from \"../../../utils/dayjs\";\nimport * as references from \"../../../common/casualReferences\";\n\nconst PATTERN = /(now|today|tonight|tomorrow|tmr|tmrw|yesterday|last\\s*night)(?=\\W|$)/i;\n\nexport default class ENCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        let targetDate = dayjs(context.refDate);\n        const lowerText = match[0].toLowerCase();\n        const component = context.createParsingComponents();\n\n        switch (lowerText) {\n            case \"now\":\n                return references.now(context.reference);\n\n            case \"today\":\n                return references.today(context.reference);\n\n            case \"yesterday\":\n                return references.yesterday(context.reference);\n\n            case \"tomorrow\":\n            case \"tmr\":\n            case \"tmrw\":\n                return references.tomorrow(context.reference);\n\n            case \"tonight\":\n                return references.tonight(context.reference);\n\n            default:\n                if (lowerText.match(/last\\s*night/)) {\n                    if (targetDate.hour() > 6) {\n                        targetDate = targetDate.add(-1, \"day\");\n                    }\n\n                    assignSimilarDate(component, targetDate);\n                    component.imply(\"hour\", 0);\n                }\n\n                break;\n        }\n\n        return component;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { Meridiem } from \"../../../index\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport dayjs from \"dayjs\";\nimport { assignTheNextDay } from \"../../../utils/dayjs\";\n\nconst PATTERN = /(?:this)?\\s{0,3}(morning|afternoon|evening|night|midnight|noon)(?=\\W|$)/i;\n\nexport default class ENCasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const targetDate = dayjs(context.refDate);\n        const component = context.createParsingComponents();\n\n        switch (match[1].toLowerCase()) {\n            case \"afternoon\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 15);\n                break;\n\n            case \"evening\":\n            case \"night\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 20);\n                break;\n\n            case \"midnight\":\n                assignTheNextDay(component, targetDate);\n                component.imply(\"hour\", 0);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                break;\n\n            case \"morning\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 6);\n                break;\n\n            case \"noon\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 12);\n                break;\n        }\n\n        return component;\n    }\n}\n", "import dayjs, { Dayjs } from \"dayjs\";\n\nexport function toDayJSWeekday(refDate: Date, offset: number, modifier?: \"this\" | \"next\" | \"last\"): Dayjs {\n    if (!modifier) {\n        return toDayJSClosestWeekday(refDate, offset);\n    }\n\n    let date = dayjs(refDate);\n    switch (modifier) {\n        case \"this\":\n            date = date.day(offset);\n            break;\n\n        case \"next\":\n            date = date.day(offset + 7);\n            break;\n\n        case \"last\":\n            date = date.day(offset - 7);\n            break;\n    }\n\n    return date;\n}\n\nexport function toDayJSClosestWeekday(refDate: Date, offset: number): Dayjs {\n    let date = dayjs(refDate);\n    const refOffset = date.day();\n    if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {\n        date = date.day(offset - 7);\n    } else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {\n        date = date.day(offset + 7);\n    } else {\n        date = date.day(offset);\n    }\n\n    return date;\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { WEEKDAY_DICTIONARY } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { toDayJSWeekday } from \"../../../calculation/weeks\";\n\nconst PATTERN = new RegExp(\n    \"(?:(?:\\\\,|\\\\(|\\\\\uFF08)\\\\s*)?\" +\n        \"(?:on\\\\s*?)?\" +\n        \"(?:(this|last|past|next)\\\\s*)?\" +\n        `(${matchAnyPattern(WEEKDAY_DICTIONARY)})` +\n        \"(?:\\\\s*(?:\\\\,|\\\\)|\\\\\uFF09))?\" +\n        \"(?:\\\\s*(this|last|past|next)\\\\s*week)?\" +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst PREFIX_GROUP = 1;\nconst WEEKDAY_GROUP = 2;\nconst POSTFIX_GROUP = 3;\n\nexport default class ENWeekdayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();\n        const offset = WEEKDAY_DICTIONARY[dayOfWeek];\n        const prefix = match[PREFIX_GROUP];\n        const postfix = match[POSTFIX_GROUP];\n        let modifierWord = prefix || postfix;\n        modifierWord = modifierWord || \"\";\n        modifierWord = modifierWord.toLowerCase();\n\n        let modifier = null;\n        if (modifierWord == \"last\" || modifierWord == \"past\") {\n            modifier = \"last\";\n        } else if (modifierWord == \"next\") {\n            modifier = \"next\";\n        } else if (modifierWord == \"this\") {\n            modifier = \"this\";\n        }\n\n        const date = toDayJSWeekday(context.refDate, offset, modifier);\n        return context\n            .createParsingComponents()\n            .assign(\"weekday\", offset)\n            .imply(\"day\", date.date())\n            .imply(\"month\", date.month() + 1)\n            .imply(\"year\", date.year());\n    }\n}\n", "import { TIME_UNIT_DICTIONARY } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport dayjs from \"dayjs\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\n\nconst PATTERN = new RegExp(\n    `(this|last|past|next|after\\\\s*this)\\\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})(?=\\\\s*)` + \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst MODIFIER_WORD_GROUP = 1;\nconst RELATIVE_WORD_GROUP = 2;\n\nexport default class ENRelativeDateFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();\n        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();\n        const timeunit = TIME_UNIT_DICTIONARY[unitWord];\n\n        if (modifier == \"next\" || modifier.startsWith(\"after\")) {\n            const timeUnits = {};\n            timeUnits[timeunit] = 1;\n            return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n        }\n\n        if (modifier == \"last\" || modifier == \"past\") {\n            const timeUnits = {};\n            timeUnits[timeunit] = -1;\n            return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n        }\n\n        const components = context.createParsingComponents();\n        let date = dayjs(context.reference.instant);\n\n        // This week\n        if (unitWord.match(/week/i)) {\n            date = date.add(-date.get(\"d\"), \"d\");\n            components.imply(\"day\", date.date());\n            components.imply(\"month\", date.month() + 1);\n            components.imply(\"year\", date.year());\n        }\n\n        // This month\n        else if (unitWord.match(/month/i)) {\n            date = date.add(-date.date() + 1, \"d\");\n            components.imply(\"day\", date.date());\n            components.assign(\"year\", date.year());\n            components.assign(\"month\", date.month() + 1);\n        }\n\n        // This year\n        else if (unitWord.match(/year/i)) {\n            date = date.add(-date.date() + 1, \"d\");\n            date = date.add(-date.month(), \"month\");\n\n            components.imply(\"day\", date.date());\n            components.imply(\"month\", date.month() + 1);\n            components.assign(\"year\", date.year());\n        }\n\n        return components;\n    }\n}\n", "import { ReferenceWithTimezone, ParsingComponents, ParsingResult } from \"./results\";\nimport { Component, ParsedResult, ParsingOption, ParsingReference } from \"./index\";\nimport { AsyncDebugBlock, DebugHandler } from \"./debugging\";\nimport { createCasualConfiguration } from \"./locales/en\";\n\n/**\n * Chrono configuration.\n * It is simply an ordered list of parsers and refiners\n */\nexport interface Configuration {\n    parsers: Parser[];\n    refiners: Refiner[];\n}\n\n/**\n * A abstraction for Chrono *Parser*.\n *\n * Each parser should recognize and handle a certain date format.\n * Chrono uses multiple parses (and refiners) together for parsing the input.\n *\n * The parser implementation must provide {@Link pattern | pattern()} for the date format.\n *\n * The {@Link extract | extract()} method is called with the pattern's *match*.\n * The matching and extracting is controlled and adjusted to avoid for overlapping results.\n */\nexport interface Parser {\n    pattern(context: ParsingContext): RegExp;\n    extract(\n        context: ParsingContext,\n        match: RegExpMatchArray\n    ): ParsingComponents | ParsingResult | { [c in Component]?: number } | null;\n}\n\n/**\n * A abstraction for Chrono *Refiner*.\n *\n * Each refiner takes the list of results (from parsers or other refiners) and returns another list of results.\n * Chrono applies each refiner in order and return the output from the last refiner.\n */\nexport interface Refiner {\n    refine: (context: ParsingContext, results: ParsingResult[]) => ParsingResult[];\n}\n\n/**\n * The Chrono object.\n */\nexport class Chrono {\n    parsers: Array<Parser>;\n    refiners: Array<Refiner>;\n\n    constructor(configuration?: Configuration) {\n        configuration = configuration || createCasualConfiguration();\n        this.parsers = [...configuration.parsers];\n        this.refiners = [...configuration.refiners];\n    }\n\n    /**\n     * Create a shallow copy of the Chrono object with the same configuration (`parsers` and `refiners`)\n     */\n    clone(): Chrono {\n        return new Chrono({\n            parsers: [...this.parsers],\n            refiners: [...this.refiners],\n        });\n    }\n\n    /**\n     * A shortcut for calling {@Link parse | parse() } then transform the result into Javascript's Date object\n     * @return Date object created from the first parse result\n     */\n    parseDate(text: string, referenceDate?: ParsingReference | Date, option?: ParsingOption): Date | null {\n        const results = this.parse(text, referenceDate, option);\n        return results.length > 0 ? results[0].start.date() : null;\n    }\n\n    parse(text: string, referenceDate?: ParsingReference | Date, option?: ParsingOption): ParsedResult[] {\n        const context = new ParsingContext(text, referenceDate, option);\n\n        let results = [];\n        this.parsers.forEach((parser) => {\n            const parsedResults = Chrono.executeParser(context, parser);\n            results = results.concat(parsedResults);\n        });\n\n        results.sort((a, b) => {\n            return a.index - b.index;\n        });\n\n        this.refiners.forEach(function (refiner) {\n            results = refiner.refine(context, results);\n        });\n\n        return results;\n    }\n\n    private static executeParser(context: ParsingContext, parser: Parser) {\n        const results = [];\n        const pattern = parser.pattern(context);\n\n        const originalText = context.text;\n        let remainingText = context.text;\n        let match = pattern.exec(remainingText);\n\n        while (match) {\n            // Calculate match index on the full text;\n            const index = match.index + originalText.length - remainingText.length;\n            match.index = index;\n\n            const result = parser.extract(context, match);\n            if (!result) {\n                // If fail, move on by 1\n                remainingText = originalText.substring(match.index + 1);\n                match = pattern.exec(remainingText);\n                continue;\n            }\n\n            let parsedResult: ParsingResult = null;\n            if (result instanceof ParsingResult) {\n                parsedResult = result;\n            } else if (result instanceof ParsingComponents) {\n                parsedResult = context.createParsingResult(match.index, match[0]);\n                parsedResult.start = result;\n            } else {\n                parsedResult = context.createParsingResult(match.index, match[0], result);\n            }\n\n            context.debug(() => console.log(`${parser.constructor.name} extracted result ${parsedResult}`));\n\n            results.push(parsedResult);\n            remainingText = originalText.substring(index + parsedResult.text.length);\n            match = pattern.exec(remainingText);\n        }\n\n        return results;\n    }\n}\n\nexport class ParsingContext implements DebugHandler {\n    readonly text: string;\n    readonly option: ParsingOption;\n    readonly reference: ReferenceWithTimezone;\n\n    // Deprecated. Use reference.instant instead.\n    readonly refDate: Date;\n\n    constructor(text: string, refDate?: ParsingReference | Date, option?: ParsingOption) {\n        this.text = text;\n        this.reference = new ReferenceWithTimezone(refDate);\n        this.option = option ?? {};\n\n        this.refDate = this.reference.instant;\n    }\n\n    createParsingComponents(components?: { [c in Component]?: number } | ParsingComponents): ParsingComponents {\n        if (components instanceof ParsingComponents) {\n            return components;\n        }\n\n        return new ParsingComponents(this.reference, components);\n    }\n\n    createParsingResult(\n        index: number,\n        textOrEndIndex: number | string,\n        startComponents?: { [c in Component]?: number } | ParsingComponents,\n        endComponents?: { [c in Component]?: number } | ParsingComponents\n    ): ParsingResult {\n        const text = typeof textOrEndIndex === \"string\" ? textOrEndIndex : this.text.substring(index, textOrEndIndex);\n\n        const start = startComponents ? this.createParsingComponents(startComponents) : null;\n        const end = endComponents ? this.createParsingComponents(endComponents) : null;\n\n        return new ParsingResult(this.reference, index, text, start, end);\n    }\n\n    debug(block: AsyncDebugBlock): void {\n        if (this.option.debug) {\n            if (this.option.debug instanceof Function) {\n                this.option.debug(block);\n            } else {\n                const handler: DebugHandler = <DebugHandler>this.option.debug;\n                handler.debug(block);\n            }\n        }\n    }\n}\n", "import { Parser, ParsingContext } from \"../../chrono\";\nimport { ParsingResult } from \"../../results\";\nimport { findMostLikelyADYear, findYearClosestToRef } from \"../../calculation/years\";\n\n/**\n * Date format with slash \"/\" (or dot \".\") between numbers.\n * For examples:\n * - 7/10\n * - 7/12/2020\n * - 7.12.2020\n */\nconst PATTERN = new RegExp(\n    \"([^\\\\d]|^)\" +\n        \"([0-3]{0,1}[0-9]{1})[\\\\/\\\\.\\\\-]([0-3]{0,1}[0-9]{1})\" +\n        \"(?:[\\\\/\\\\.\\\\-]([0-9]{4}|[0-9]{2}))?\" +\n        \"(\\\\W|$)\",\n    \"i\"\n);\n\nconst OPENING_GROUP = 1;\nconst ENDING_GROUP = 5;\n\nconst FIRST_NUMBERS_GROUP = 2;\nconst SECOND_NUMBERS_GROUP = 3;\n\nconst YEAR_GROUP = 4;\n\nexport default class SlashDateFormatParser implements Parser {\n    groupNumberMonth: number;\n    groupNumberDay: number;\n\n    constructor(littleEndian: boolean) {\n        this.groupNumberMonth = littleEndian ? SECOND_NUMBERS_GROUP : FIRST_NUMBERS_GROUP;\n        this.groupNumberDay = littleEndian ? FIRST_NUMBERS_GROUP : SECOND_NUMBERS_GROUP;\n    }\n\n    pattern(): RegExp {\n        return PATTERN;\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        if (match[OPENING_GROUP] == \"/\" || match[ENDING_GROUP] == \"/\") {\n            // Long skip, if there is some overlapping like:\n            // XX[/YY/ZZ]\n            // [XX/YY/]ZZ\n            match.index += match[0].length;\n            return;\n        }\n\n        const index = match.index + match[OPENING_GROUP].length;\n        const text = match[0].substr(\n            match[OPENING_GROUP].length,\n            match[0].length - match[OPENING_GROUP].length - match[ENDING_GROUP].length\n        );\n\n        // '1.12', '1.12.12' is more like a version numbers\n        if (text.match(/^\\d\\.\\d$/) || text.match(/^\\d\\.\\d{1,2}\\.\\d{1,2}\\s*$/)) {\n            return;\n        }\n\n        // MM/dd -> OK\n        // MM.dd -> NG\n        if (!match[YEAR_GROUP] && match[0].indexOf(\"/\") < 0) {\n            return;\n        }\n\n        const result = context.createParsingResult(index, text);\n        let month = parseInt(match[this.groupNumberMonth]);\n        let day = parseInt(match[this.groupNumberDay]);\n\n        if (month < 1 || month > 12) {\n            if (month > 12) {\n                if (day >= 1 && day <= 12 && month <= 31) {\n                    [day, month] = [month, day];\n                } else {\n                    return null;\n                }\n            }\n        }\n\n        if (day < 1 || day > 31) {\n            return null;\n        }\n\n        result.start.assign(\"day\", day);\n        result.start.assign(\"month\", month);\n\n        if (match[YEAR_GROUP]) {\n            const rawYearNumber = parseInt(match[YEAR_GROUP]);\n            const year = findMostLikelyADYear(rawYearNumber);\n            result.start.assign(\"year\", year);\n        } else {\n            const year = findYearClosestToRef(context.refDate, day, month);\n            result.start.imply(\"year\", year);\n        }\n\n        return result;\n    }\n}\n", "import { TIME_UNITS_PATTERN, parseTimeUnits } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nconst PATTERN = new RegExp(`(this|last|past|next|after|\\\\+|-)\\\\s*(${TIME_UNITS_PATTERN})(?=\\\\W|$)`, \"i\");\n\nexport default class ENTimeUnitCasualRelativeFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const prefix = match[1].toLowerCase();\n        let timeUnits = parseTimeUnits(match[2]);\n        switch (prefix) {\n            case \"last\":\n            case \"past\":\n            case \"-\":\n                timeUnits = reverseTimeUnits(timeUnits);\n                break;\n        }\n\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n", "import { MergingRefiner } from \"../../../common/abstractRefiners\";\nimport { ParsingComponents, ParsingResult, ReferenceWithTimezone } from \"../../../results\";\nimport { parseTimeUnits } from \"../constants\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nfunction hasImpliedEarlierReferenceDate(result: ParsingResult): boolean {\n    return result.text.match(/\\s+(before|from)$/i) != null;\n}\n\nfunction hasImpliedLaterReferenceDate(result: ParsingResult): boolean {\n    return result.text.match(/\\s+(after|since)$/i) != null;\n}\n\n/**\n * Merges an absolute date with a relative date.\n * - 2 weeks before 2020-02-13\n * - 2 days after next Friday\n */\nexport default class ENMergeRelativeDateRefiner extends MergingRefiner {\n    patternBetween(): RegExp {\n        return /^\\s*$/i;\n    }\n\n    shouldMergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): boolean {\n        // Dates need to be next to each other to get merged\n        if (!textBetween.match(this.patternBetween())) {\n            return false;\n        }\n\n        // Check if any relative tokens were swallowed by the first date.\n        // E.g. [<relative_date1> from] [<date2>]\n        if (!hasImpliedEarlierReferenceDate(currentResult) && !hasImpliedLaterReferenceDate(currentResult)) {\n            return false;\n        }\n\n        // make sure that <date2> implies an absolute date\n        return !!nextResult.start.get(\"day\") && !!nextResult.start.get(\"month\") && !!nextResult.start.get(\"year\");\n    }\n\n    mergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): ParsingResult {\n        let timeUnits = parseTimeUnits(currentResult.text);\n        if (hasImpliedEarlierReferenceDate(currentResult)) {\n            timeUnits = reverseTimeUnits(timeUnits);\n        }\n\n        const components = ParsingComponents.createRelativeFromReference(\n            new ReferenceWithTimezone(nextResult.start.date()),\n            timeUnits\n        );\n\n        return new ParsingResult(\n            nextResult.reference,\n            currentResult.index,\n            `${currentResult.text}${textBetween}${nextResult.text}`,\n            components\n        );\n    }\n}\n", "/**\n * Chrono components for English support (*parsers*, *refiners*, and *configuration*)\n *\n * @module\n */\n\nimport ENTimeUnitWithinFormatParser from \"./parsers/ENTimeUnitWithinFormatParser\";\nimport ENMonthNameLittleEndianParser from \"./parsers/ENMonthNameLittleEndianParser\";\nimport ENMonthNameMiddleEndianParser from \"./parsers/ENMonthNameMiddleEndianParser\";\nimport ENMonthNameParser from \"./parsers/ENMonthNameParser\";\nimport ENCasualYearMonthDayParser from \"./parsers/ENCasualYearMonthDayParser\";\nimport ENSlashMonthFormatParser from \"./parsers/ENSlashMonthFormatParser\";\nimport ENTimeExpressionParser from \"./parsers/ENTimeExpressionParser\";\nimport ENTimeUnitAgoFormatParser from \"./parsers/ENTimeUnitAgoFormatParser\";\nimport ENTimeUnitLaterFormatParser from \"./parsers/ENTimeUnitLaterFormatParser\";\nimport ENMergeDateRangeRefiner from \"./refiners/ENMergeDateRangeRefiner\";\nimport ENMergeDateTimeRefiner from \"./refiners/ENMergeDateTimeRefiner\";\n\nimport { includeCommonConfiguration } from \"../../configurations\";\nimport ENCasualDateParser from \"./parsers/ENCasualDateParser\";\nimport ENCasualTimeParser from \"./parsers/ENCasualTimeParser\";\nimport ENWeekdayParser from \"./parsers/ENWeekdayParser\";\nimport ENRelativeDateFormatParser from \"./parsers/ENRelativeDateFormatParser\";\n\nimport { ParsedResult, ParsingOption } from \"../../index\";\nimport { Chrono, Configuration } from \"../../chrono\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser\";\nimport ENTimeUnitCasualRelativeFormatParser from \"./parsers/ENTimeUnitCasualRelativeFormatParser\";\nimport ENMergeRelativeDateRefiner from \"./refiners/ENMergeRelativeDateRefiner\";\n\n/**\n * Chrono object configured for parsing *casual* English\n */\nexport const casual = new Chrono(createCasualConfiguration(false));\n\n/**\n * Chrono object configured for parsing *strict* English\n */\nexport const strict = new Chrono(createConfiguration(true, false));\n\n/**\n * Chrono object configured for parsing *UK-style* English\n */\nexport const GB = new Chrono(createConfiguration(false, true));\n\n/**\n * A shortcut for en.casual.parse()\n */\nexport function parse(text: string, ref?: Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\n/**\n * A shortcut for en.casual.parseDate()\n */\nexport function parseDate(text: string, ref?: Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\n/**\n * Create a default *casual* {@Link Configuration} for English chrono.\n * It calls {@Link createConfiguration} and includes additional parsers.\n */\nexport function createCasualConfiguration(littleEndian = false): Configuration {\n    const option = createConfiguration(false, littleEndian);\n    option.parsers.unshift(new ENCasualDateParser());\n    option.parsers.unshift(new ENCasualTimeParser());\n    option.parsers.unshift(new ENMonthNameParser());\n    option.parsers.unshift(new ENRelativeDateFormatParser());\n    option.parsers.unshift(new ENTimeUnitCasualRelativeFormatParser());\n    return option;\n}\n\n/**\n * Create a default {@Link Configuration} for English chrono\n *\n * @param strictMode If the timeunit mentioning should be strict, not casual\n * @param littleEndian If format should be date-first/littleEndian (e.g. en_UK), not month-first/middleEndian (e.g. en_US)\n */\nexport function createConfiguration(strictMode = true, littleEndian = false): Configuration {\n    return includeCommonConfiguration(\n        {\n            parsers: [\n                new SlashDateFormatParser(littleEndian),\n                new ENTimeUnitWithinFormatParser(),\n                new ENMonthNameLittleEndianParser(),\n                new ENMonthNameMiddleEndianParser(),\n                new ENWeekdayParser(),\n                new ENCasualYearMonthDayParser(),\n                new ENSlashMonthFormatParser(),\n                new ENTimeExpressionParser(strictMode),\n                new ENTimeUnitAgoFormatParser(strictMode),\n                new ENTimeUnitLaterFormatParser(strictMode),\n            ],\n            refiners: [new ENMergeRelativeDateRefiner(), new ENMergeDateTimeRefiner(), new ENMergeDateRangeRefiner()],\n        },\n        strictMode\n    );\n}\n", "import { AbstractTimeExpressionParser } from \"../../../common/parsers/AbstractTimeExpressionParser\";\nimport { ParsingComponents } from \"../../../results\";\nimport { ParsingContext } from \"../../../chrono\";\n\nexport default class DETimeExpressionParser extends AbstractTimeExpressionParser {\n    primaryPrefix(): string {\n        return \"(?:(?:um|von)\\\\s*)?\";\n    }\n\n    followingPhase(): string {\n        return \"\\\\s*(?:\\\\-|\\\\\u2013|\\\\~|\\\\\u301C|bis)\\\\s*\";\n    }\n\n    extractPrimaryTimeComponents(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | null {\n        // This looks more like a year e.g. 2020\n        if (match[0].match(/^\\s*\\d{4}\\s*$/)) {\n            return null;\n        }\n\n        return super.extractPrimaryTimeComponents(context, match);\n    }\n}\n", "import { OpUnitType, QUnitType } from \"dayjs\";\nimport { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern\";\nimport { findMostLikelyADYear } from \"../../calculation/years\";\nimport { TimeUnits } from \"../../utils/timeunits\";\n\nexport const WEEKDAY_DICTIONARY: { [word: string]: number } = {\n    \"sonntag\": 0,\n    \"so\": 0,\n    \"montag\": 1,\n    \"mo\": 1,\n    \"dienstag\": 2,\n    \"di\": 2,\n    \"mittwoch\": 3,\n    \"mi\": 3,\n    \"donnerstag\": 4,\n    \"do\": 4,\n    \"freitag\": 5,\n    \"fr\": 5,\n    \"samstag\": 6,\n    \"sa\": 6,\n};\n\nexport const MONTH_DICTIONARY: { [word: string]: number } = {\n    \"januar\": 1,\n    \"j\u00E4nner\": 1,\n    \"janner\": 1,\n    \"jan\": 1,\n    \"jan.\": 1,\n    \"februar\": 2,\n    \"feber\": 2,\n    \"feb\": 2,\n    \"feb.\": 2,\n    \"m\u00E4rz\": 3,\n    \"maerz\": 3,\n    \"m\u00E4r\": 3,\n    \"m\u00E4r.\": 3,\n    \"mrz\": 3,\n    \"mrz.\": 3,\n    \"april\": 4,\n    \"apr\": 4,\n    \"apr.\": 4,\n    \"mai\": 5,\n    \"juni\": 6,\n    \"jun\": 6,\n    \"jun.\": 6,\n    \"juli\": 7,\n    \"jul\": 7,\n    \"jul.\": 7,\n    \"august\": 8,\n    \"aug\": 8,\n    \"aug.\": 8,\n    \"september\": 9,\n    \"sep\": 9,\n    \"sep.\": 9,\n    \"sept\": 9,\n    \"sept.\": 9,\n    \"oktober\": 10,\n    \"okt\": 10,\n    \"okt.\": 10,\n    \"november\": 11,\n    \"nov\": 11,\n    \"nov.\": 11,\n    \"dezember\": 12,\n    \"dez\": 12,\n    \"dez.\": 12,\n};\n\nexport const INTEGER_WORD_DICTIONARY: { [word: string]: number } = {\n    \"eins\": 1,\n    \"eine\": 1,\n    \"einem\": 1,\n    \"einen\": 1,\n    \"einer\": 1,\n    \"zwei\": 2,\n    \"drei\": 3,\n    \"vier\": 4,\n    \"f\u00FCnf\": 5,\n    \"fuenf\": 5,\n    \"sechs\": 6,\n    \"sieben\": 7,\n    \"acht\": 8,\n    \"neun\": 9,\n    \"zehn\": 10,\n    \"elf\": 11,\n    \"zw\u00F6lf\": 12,\n    \"zwoelf\": 12,\n};\n\nexport const TIME_UNIT_DICTIONARY: { [word: string]: OpUnitType | QUnitType } = {\n    sek: \"second\",\n    sekunde: \"second\",\n    sekunden: \"second\",\n    min: \"minute\",\n    minute: \"minute\",\n    minuten: \"minute\",\n    h: \"hour\",\n    std: \"hour\",\n    stunde: \"hour\",\n    stunden: \"hour\",\n    tag: \"d\",\n    tage: \"d\",\n    tagen: \"d\",\n    woche: \"week\",\n    wochen: \"week\",\n    monat: \"month\",\n    monate: \"month\",\n    monaten: \"month\",\n    monats: \"month\",\n    quartal: \"quarter\",\n    quartals: \"quarter\",\n    quartale: \"quarter\",\n    quartalen: \"quarter\",\n    a: \"year\",\n    j: \"year\",\n    jr: \"year\",\n    jahr: \"year\",\n    jahre: \"year\",\n    jahren: \"year\",\n    jahres: \"year\",\n};\n\n//-----------------------------\n\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(\n    INTEGER_WORD_DICTIONARY\n)}|[0-9]+|[0-9]+\\\\.[0-9]+|half(?:\\\\s*an?)?|an?\\\\b(?:\\\\s*few)?|few|several|a?\\\\s*couple\\\\s*(?:of)?)`;\n\nexport function parseNumberPattern(match: string): number {\n    const num = match.toLowerCase();\n    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n        return INTEGER_WORD_DICTIONARY[num];\n    } else if (num === \"a\" || num === \"an\") {\n        return 1;\n    } else if (num.match(/few/)) {\n        return 3;\n    } else if (num.match(/half/)) {\n        return 0.5;\n    } else if (num.match(/couple/)) {\n        return 2;\n    } else if (num.match(/several/)) {\n        return 7;\n    }\n\n    return parseFloat(num);\n}\n\n//-----------------------------\n\nexport const YEAR_PATTERN = `(?:[0-9]{1,4}(?:\\\\s*[vn]\\\\.?\\\\s*(?:C(?:hr)?|(?:u\\\\.?|d\\\\.?(?:\\\\s*g\\\\.?)?)?\\\\s*Z)\\\\.?|\\\\s*(?:u\\\\.?|d\\\\.?(?:\\\\s*g\\\\.)?)\\\\s*Z\\\\.?)?)`;\nexport function parseYear(match: string): number {\n    if (/v/i.test(match)) {\n        // v.Chr.\n        return -parseInt(match.replace(/[^0-9]+/gi, \"\"));\n    }\n\n    if (/n/i.test(match)) {\n        // n.Chr.\n        return parseInt(match.replace(/[^0-9]+/gi, \"\"));\n    }\n\n    if (/z/i.test(match)) {\n        // n.Chr. as \"uZ\" or \"dgZ\"\n        return parseInt(match.replace(/[^0-9]+/gi, \"\"));\n    }\n\n    const rawYearNumber = parseInt(match);\n    return findMostLikelyADYear(rawYearNumber);\n}\n\n//-----------------------------\n\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,5}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\\\s{0,5}`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\n\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(\"\", SINGLE_TIME_UNIT_PATTERN);\n\nexport function parseTimeUnits(timeunitText): TimeUnits {\n    const fragments = {};\n    let remainingText = timeunitText;\n    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    while (match) {\n        collectDateTimeFragment(fragments, match);\n        remainingText = remainingText.substring(match[0].length);\n        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    }\n    return fragments;\n}\n\nfunction collectDateTimeFragment(fragments, match) {\n    const num = parseNumberPattern(match[1]);\n    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n    fragments[unit] = num;\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { WEEKDAY_DICTIONARY } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { toDayJSWeekday } from \"../../../calculation/weeks\";\n\nconst PATTERN = new RegExp(\n    \"(?:(?:\\\\,|\\\\(|\\\\\uFF08)\\\\s*)?\" +\n        \"(?:a[mn]\\\\s*?)?\" +\n        \"(?:(diese[mn]|letzte[mn]|n(?:\u00E4|ae)chste[mn])\\\\s*)?\" +\n        `(${matchAnyPattern(WEEKDAY_DICTIONARY)})` +\n        \"(?:\\\\s*(?:\\\\,|\\\\)|\\\\\uFF09))?\" +\n        \"(?:\\\\s*(diese|letzte|n(?:\u00E4|ae)chste)\\\\s*woche)?\" +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst PREFIX_GROUP = 1;\nconst SUFFIX_GROUP = 3;\nconst WEEKDAY_GROUP = 2;\n\nexport default class DEWeekdayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();\n        const offset = WEEKDAY_DICTIONARY[dayOfWeek];\n        const prefix = match[PREFIX_GROUP];\n        const postfix = match[SUFFIX_GROUP];\n\n        let modifierWord = prefix || postfix;\n        modifierWord = modifierWord || \"\";\n        modifierWord = modifierWord.toLowerCase();\n\n        let modifier = null;\n        if (modifierWord.match(/letzte/)) {\n            modifier = \"last\";\n        } else if (modifierWord.match(/chste/)) {\n            modifier = \"next\";\n        } else if (modifierWord.match(/diese/)) {\n            modifier = \"this\";\n        }\n\n        const date = toDayJSWeekday(context.refDate, offset, modifier);\n        return context\n            .createParsingComponents()\n            .assign(\"weekday\", offset)\n            .imply(\"day\", date.date())\n            .imply(\"month\", date.month() + 1)\n            .imply(\"year\", date.year());\n    }\n}\n", "import { Parser, ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport { Meridiem } from \"../../../index\";\n\n/**\n * 8h10m00s\n * 8h10m00\n * 8h10\n * 8 Uhr\n * 8h10m00s Uhr\n * 8:10 Uhr\n */\nconst FIRST_REG_PATTERN = new RegExp(\n    \"(^|\\\\s|T)\" +\n        \"(?:(?:um|von)\\\\s*)?\" +\n        \"(\\\\d{1,2})(?:h|:)?\" +\n        \"(?:(\\\\d{1,2})(?:m|:)?)?\" +\n        \"(?:(\\\\d{1,2})(?:s)?)?\" +\n        \"(?:\\\\s*Uhr)?\" +\n        \"(?:\\\\s*(morgens|vormittags|nachmittags|abends|nachts|am\\\\s+(?:Morgen|Vormittag|Nachmittag|Abend)|in\\\\s+der\\\\s+Nacht))?\" +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst SECOND_REG_PATTERN = new RegExp(\n    \"^\\\\s*(\\\\-|\\\\\u2013|\\\\~|\\\\\u301C|bis(?:\\\\s+um)?|\\\\?)\\\\s*\" +\n        \"(\\\\d{1,2})(?:h|:)?\" +\n        \"(?:(\\\\d{1,2})(?:m|:)?)?\" +\n        \"(?:(\\\\d{1,2})(?:s)?)?\" +\n        \"(?:\\\\s*Uhr)?\" +\n        \"(?:\\\\s*(morgens|vormittags|nachmittags|abends|nachts|am\\\\s+(?:Morgen|Vormittag|Nachmittag|Abend)|in\\\\s+der\\\\s+Nacht))?\" +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst HOUR_GROUP = 2;\nconst MINUTE_GROUP = 3;\nconst SECOND_GROUP = 4;\nconst AM_PM_HOUR_GROUP = 5;\n\nexport default class DESpecificTimeExpressionParser implements Parser {\n    pattern(context): RegExp {\n        return FIRST_REG_PATTERN;\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray): ParsingResult | null {\n        const result = context.createParsingResult(match.index + match[1].length, match[0].substring(match[1].length));\n\n        // This looks more like a year e.g. 2020\n        if (result.text.match(/^\\d{4}$/)) {\n            match.index += match[0].length;\n            return null;\n        }\n\n        result.start = DESpecificTimeExpressionParser.extractTimeComponent(result.start.clone(), match);\n        if (!result.start) {\n            match.index += match[0].length;\n            return null;\n        }\n\n        const remainingText = context.text.substring(match.index + match[0].length);\n        const secondMatch = SECOND_REG_PATTERN.exec(remainingText);\n        if (secondMatch) {\n            result.end = DESpecificTimeExpressionParser.extractTimeComponent(result.start.clone(), secondMatch);\n            if (result.end) {\n                result.text += secondMatch[0];\n            }\n        }\n\n        return result;\n    }\n\n    private static extractTimeComponent(\n        extractingComponents: ParsingComponents,\n        match: RegExpMatchArray\n    ): ParsingComponents | null {\n        let hour = 0;\n        let minute = 0;\n        let meridiem = null;\n\n        // ----- Hours\n        hour = parseInt(match[HOUR_GROUP]);\n\n        // ----- Minutes\n        if (match[MINUTE_GROUP] != null) {\n            minute = parseInt(match[MINUTE_GROUP]);\n        }\n\n        if (minute >= 60 || hour > 24) {\n            return null;\n        }\n\n        if (hour >= 12) {\n            meridiem = Meridiem.PM;\n        }\n\n        // ----- AM & PM\n        if (match[AM_PM_HOUR_GROUP] != null) {\n            if (hour > 12) return null;\n            const ampm = match[AM_PM_HOUR_GROUP].toLowerCase();\n            if (ampm.match(/morgen|vormittag/)) {\n                meridiem = Meridiem.AM;\n                if (hour == 12) {\n                    hour = 0;\n                }\n            }\n\n            if (ampm.match(/nachmittag|abend/)) {\n                meridiem = Meridiem.PM;\n                if (hour != 12) {\n                    hour += 12;\n                }\n            }\n\n            if (ampm.match(/nacht/)) {\n                if (hour == 12) {\n                    meridiem = Meridiem.AM;\n                    hour = 0;\n                } else if (hour < 6) {\n                    meridiem = Meridiem.AM;\n                } else {\n                    meridiem = Meridiem.PM;\n                    hour += 12;\n                }\n            }\n        }\n\n        extractingComponents.assign(\"hour\", hour);\n        extractingComponents.assign(\"minute\", minute);\n        if (meridiem !== null) {\n            extractingComponents.assign(\"meridiem\", meridiem);\n        } else {\n            if (hour < 12) {\n                extractingComponents.imply(\"meridiem\", Meridiem.AM);\n            } else {\n                extractingComponents.imply(\"meridiem\", Meridiem.PM);\n            }\n        }\n\n        // ----- Second\n        if (match[SECOND_GROUP] != null) {\n            const second = parseInt(match[SECOND_GROUP]);\n            if (second >= 60) return null;\n\n            extractingComponents.assign(\"second\", second);\n        }\n\n        return extractingComponents;\n    }\n}\n", "/*\n  \n*/\n\nimport AbstractMergeDateRangeRefiner from \"../../../common/refiners/AbstractMergeDateRangeRefiner\";\n\n/**\n * Merging before and after results (see. AbstractMergeDateRangeRefiner)\n *\n */\nexport default class DEMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner {\n    patternBetween(): RegExp {\n        return /^\\s*(bis(?:\\s*(?:am|zum))?|-)\\s*$/i;\n    }\n}\n", "import AbstractMergeDateTimeRefiner from \"../../../common/refiners/AbstractMergeDateTimeRefiner\";\n\n/**\n * Merging date-only result and time-only result (see. AbstractMergeDateTimeRefiner).\n */\nexport default class DEMergeDateTimeRefiner extends AbstractMergeDateTimeRefiner {\n    patternBetween(): RegExp {\n        return new RegExp(\"^\\\\s*(T|um|am|,|-)?\\\\s*$\");\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport dayjs from \"dayjs\";\nimport { Meridiem } from \"../../../index\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { implySimilarTime } from \"../../../utils/dayjs\";\nimport { addImpliedTimeUnits } from \"../../../utils/timeunits\";\n\nexport default class DECasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return /(diesen)?\\s*(morgen|vormittag|mittags?|nachmittag|abend|nacht|mitternacht)(?=\\W|$)/i;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        const targetDate = dayjs(context.refDate);\n        const timeKeywordPattern = match[2].toLowerCase();\n        const component = context.createParsingComponents();\n        implySimilarTime(component, targetDate);\n        return DECasualTimeParser.extractTimeComponents(component, timeKeywordPattern);\n    }\n\n    static extractTimeComponents(component: ParsingComponents, timeKeywordPattern: string): ParsingComponents {\n        switch (timeKeywordPattern) {\n            case \"morgen\":\n                component.imply(\"hour\", 6);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"meridiem\", Meridiem.AM);\n                break;\n\n            case \"vormittag\":\n                component.imply(\"hour\", 9);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"meridiem\", Meridiem.AM);\n                break;\n\n            case \"mittag\":\n            case \"mittags\":\n                component.imply(\"hour\", 12);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"meridiem\", Meridiem.AM);\n                break;\n\n            case \"nachmittag\":\n                component.imply(\"hour\", 15);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"meridiem\", Meridiem.PM);\n                break;\n\n            case \"abend\":\n                component.imply(\"hour\", 18);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"meridiem\", Meridiem.PM);\n                break;\n\n            case \"nacht\":\n                component.imply(\"hour\", 22);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"meridiem\", Meridiem.PM);\n                break;\n\n            case \"mitternacht\":\n                if (component.get(\"hour\") > 1) {\n                    component = addImpliedTimeUnits(component, { \"day\": 1 });\n                }\n\n                component.imply(\"hour\", 0);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"meridiem\", Meridiem.AM);\n                break;\n        }\n        return component;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport dayjs from \"dayjs\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { assignSimilarDate, assignTheNextDay, implySimilarTime } from \"../../../utils/dayjs\";\nimport DECasualTimeParser from \"./DECasualTimeParser\";\nimport * as references from \"../../../common/casualReferences\";\n\nconst PATTERN = new RegExp(\n    `(jetzt|heute|morgen|\u00FCbermorgen|uebermorgen|gestern|vorgestern|letzte\\\\s*nacht)` +\n        `(?:\\\\s*(morgen|vormittag|mittags?|nachmittag|abend|nacht|mitternacht))?` +\n        `(?=\\\\W|$)`,\n    \"i\"\n);\n\nconst DATE_GROUP = 1;\nconst TIME_GROUP = 2;\n\nexport default class DECasualDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        let targetDate = dayjs(context.refDate);\n        const dateKeyword = (match[DATE_GROUP] || \"\").toLowerCase();\n        const timeKeyword = (match[TIME_GROUP] || \"\").toLowerCase();\n\n        let component = context.createParsingComponents();\n        switch (dateKeyword) {\n            case \"jetzt\":\n                component = references.now(context.reference);\n                break;\n\n            case \"heute\":\n                component = references.today(context.reference);\n                break;\n\n            case \"morgen\":\n                assignTheNextDay(component, targetDate);\n                break;\n\n            case \"\u00FCbermorgen\":\n            case \"uebermorgen\":\n                targetDate = targetDate.add(1, \"day\");\n                assignTheNextDay(component, targetDate);\n                break;\n\n            case \"gestern\":\n                targetDate = targetDate.add(-1, \"day\");\n                assignSimilarDate(component, targetDate);\n                implySimilarTime(component, targetDate);\n                break;\n\n            case \"vorgestern\":\n                targetDate = targetDate.add(-2, \"day\");\n                assignSimilarDate(component, targetDate);\n                implySimilarTime(component, targetDate);\n                break;\n\n            default:\n                if (dateKeyword.match(/letzte\\s*nacht/)) {\n                    if (targetDate.hour() > 6) {\n                        targetDate = targetDate.add(-1, \"day\");\n                    }\n\n                    assignSimilarDate(component, targetDate);\n                    component.imply(\"hour\", 0);\n                }\n\n                break;\n        }\n\n        if (timeKeyword) {\n            component = DECasualTimeParser.extractTimeComponents(component, timeKeyword);\n        }\n\n        return component;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingResult } from \"../../../results\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { MONTH_DICTIONARY } from \"../constants\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    \"(?:am\\\\s*?)?\" +\n        \"(?:den\\\\s*?)?\" +\n        `([0-9]{1,2})\\\\.` +\n        `(?:\\\\s*(?:bis(?:\\\\s*(?:am|zum))?|\\\\-|\\\\\u2013|\\\\s)\\\\s*([0-9]{1,2})\\\\.?)?\\\\s*` +\n        `(${matchAnyPattern(MONTH_DICTIONARY)})` +\n        `(?:(?:-|/|,?\\\\s*)(${YEAR_PATTERN}(?![^\\\\s]\\\\d)))?` +\n        `(?=\\\\W|$)`,\n    \"i\"\n);\n\nconst DATE_GROUP = 1;\nconst DATE_TO_GROUP = 2;\nconst MONTH_NAME_GROUP = 3;\nconst YEAR_GROUP = 4;\n\nexport default class DEMonthNameLittleEndianParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        const result = context.createParsingResult(match.index, match[0]);\n\n        const month = MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n        const day = parseInt(match[DATE_GROUP]);\n        if (day > 31) {\n            // e.g. \"[96 Aug]\" => \"9[6 Aug]\", we need to shift away from the next number\n            match.index = match.index + match[DATE_GROUP].length;\n            return null;\n        }\n\n        result.start.assign(\"month\", month);\n        result.start.assign(\"day\", day);\n\n        if (match[YEAR_GROUP]) {\n            const yearNumber = parseYear(match[YEAR_GROUP]);\n            result.start.assign(\"year\", yearNumber);\n        } else {\n            const year = findYearClosestToRef(context.refDate, day, month);\n            result.start.imply(\"year\", year);\n        }\n\n        if (match[DATE_TO_GROUP]) {\n            const endDate = parseInt(match[DATE_TO_GROUP]);\n\n            result.end = result.start.clone();\n            result.end.assign(\"day\", endDate);\n        }\n\n        return result;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { NUMBER_PATTERN, parseNumberPattern, TIME_UNIT_DICTIONARY } from \"../constants\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\n\nexport default class DETimeUnitAgoFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor() {\n        super();\n    }\n\n    innerPattern(): RegExp {\n        return new RegExp(\n            `(?:\\\\s*((?:n\u00E4chste|kommende|folgende|letzte|vergangene|vorige|vor(?:her|an)gegangene)(?:s|n|m|r)?|vor|in)\\\\s*)?` +\n                `(${NUMBER_PATTERN})?` +\n                `(?:\\\\s*(n\u00E4chste|kommende|folgende|letzte|vergangene|vorige|vor(?:her|an)gegangene)(?:s|n|m|r)?)?` +\n                `\\\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})`,\n            \"i\"\n        );\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const num = match[2] ? parseNumberPattern(match[2]) : 1;\n        const unit = TIME_UNIT_DICTIONARY[match[4].toLowerCase()];\n        let timeUnits = {};\n        timeUnits[unit] = num;\n\n        // Modifier\n        let modifier = match[1] || match[3] || \"\";\n        modifier = modifier.toLowerCase();\n        if (!modifier) {\n            return;\n        }\n\n        if (/vor/.test(modifier) || /letzte/.test(modifier) || /vergangen/.test(modifier)) {\n            timeUnits = reverseTimeUnits(timeUnits);\n        }\n\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n", "import { includeCommonConfiguration } from \"../../configurations\";\nimport { ParsedResult, ParsingOption } from \"../../index\";\nimport { Chrono, Configuration } from \"../../chrono\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser\";\nimport ISOFormatParser from \"../../common/parsers/ISOFormatParser\";\nimport DETimeExpressionParser from \"./parsers/DETimeExpressionParser\";\nimport DEWeekdayParser from \"./parsers/DEWeekdayParser\";\nimport DESpecificTimeExpressionParser from \"./parsers/DESpecificTimeExpressionParser\";\nimport DEMergeDateRangeRefiner from \"./refiners/DEMergeDateRangeRefiner\";\nimport DEMergeDateTimeRefiner from \"./refiners/DEMergeDateTimeRefiner\";\nimport DECasualDateParser from \"./parsers/DECasualDateParser\";\nimport DECasualTimeParser from \"./parsers/DECasualTimeParser\";\nimport DEMonthNameLittleEndianParser from \"./parsers/DEMonthNameLittleEndianParser\";\nimport DETimeUnitRelativeFormatParser from \"./parsers/DETimeUnitRelativeFormatParser\";\n\n// Shortcuts\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration(true));\n\nexport function parse(text: string, ref?: Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\nexport function parseDate(text: string, ref?: Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\nexport function createCasualConfiguration(littleEndian = true): Configuration {\n    const option = createConfiguration(false, littleEndian);\n    option.parsers.unshift(new DECasualTimeParser());\n    option.parsers.unshift(new DECasualDateParser());\n    option.parsers.unshift(new DETimeUnitRelativeFormatParser());\n    return option;\n}\n\nexport function createConfiguration(strictMode = true, littleEndian = true): Configuration {\n    return includeCommonConfiguration(\n        {\n            parsers: [\n                new ISOFormatParser(),\n                new SlashDateFormatParser(littleEndian),\n                new DETimeExpressionParser(),\n                new DESpecificTimeExpressionParser(),\n                new DEMonthNameLittleEndianParser(),\n                new DEWeekdayParser(),\n            ],\n            refiners: [new DEMergeDateRangeRefiner(), new DEMergeDateTimeRefiner()],\n        },\n        strictMode\n    );\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport dayjs from \"dayjs\";\nimport { Meridiem } from \"../../../index\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { assignSimilarDate } from \"../../../utils/dayjs\";\nimport * as references from \"../../../common/casualReferences\";\n\nexport default class FRCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return /(maintenant|aujourd'hui|demain|hier|cette\\s*nuit|la\\s*veille)(?=\\W|$)/i;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        let targetDate = dayjs(context.refDate);\n        const lowerText = match[0].toLowerCase();\n        const component = context.createParsingComponents();\n\n        switch (lowerText) {\n            case \"maintenant\":\n                return references.now(context.reference);\n\n            case \"aujourd'hui\":\n                return references.today(context.reference);\n\n            case \"hier\":\n                return references.yesterday(context.reference);\n\n            case \"demain\":\n                return references.tomorrow(context.reference);\n\n            default:\n                if (lowerText.match(/cette\\s*nuit/)) {\n                    assignSimilarDate(component, targetDate);\n                    component.imply(\"hour\", 22);\n                    component.imply(\"meridiem\", Meridiem.PM);\n                } else if (lowerText.match(/la\\s*veille/)) {\n                    targetDate = targetDate.add(-1, \"day\");\n                    assignSimilarDate(component, targetDate);\n                    component.imply(\"hour\", 0);\n                }\n        }\n\n        return component;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport { Meridiem } from \"../../../index\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nexport default class FRCasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return /(cet?)?\\s*(matin|soir|apr\u00E8s-midi|aprem|a midi|\u00E0 minuit)(?=\\W|$)/i;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        const suffixLower = match[2].toLowerCase();\n        const component = context.createParsingComponents();\n\n        switch (suffixLower) {\n            case \"apr\u00E8s-midi\":\n            case \"aprem\":\n                component.imply(\"hour\", 14);\n                component.imply(\"minute\", 0);\n                component.imply(\"meridiem\", Meridiem.PM);\n                break;\n\n            case \"soir\":\n                component.imply(\"hour\", 18);\n                component.imply(\"minute\", 0);\n                component.imply(\"meridiem\", Meridiem.PM);\n                break;\n\n            case \"matin\":\n                component.imply(\"hour\", 8);\n                component.imply(\"minute\", 0);\n                component.imply(\"meridiem\", Meridiem.AM);\n                break;\n\n            case \"a midi\":\n                component.imply(\"hour\", 12);\n                component.imply(\"minute\", 0);\n                component.imply(\"meridiem\", Meridiem.AM);\n                break;\n\n            case \"\u00E0 minuit\":\n                component.imply(\"hour\", 0);\n                component.imply(\"meridiem\", Meridiem.AM);\n                break;\n        }\n\n        return component;\n    }\n}\n", "import { AbstractTimeExpressionParser } from \"../../../common/parsers/AbstractTimeExpressionParser\";\nimport { ParsingComponents } from \"../../../results\";\nimport { ParsingContext } from \"../../../chrono\";\n\nexport default class FRTimeExpressionParser extends AbstractTimeExpressionParser {\n    primaryPrefix(): string {\n        return \"(?:(?:[\u00E0a])\\\\s*)?\";\n    }\n\n    followingPhase(): string {\n        return \"\\\\s*(?:\\\\-|\\\\\u2013|\\\\~|\\\\\u301C|[\u00E0a]|\\\\?)\\\\s*\";\n    }\n\n    extractPrimaryTimeComponents(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | null {\n        // This looks more like a year e.g. 2020\n        if (match[0].match(/^\\s*\\d{4}\\s*$/)) {\n            return null;\n        }\n\n        return super.extractPrimaryTimeComponents(context, match);\n    }\n}\n", "import AbstractMergeDateTimeRefiner from \"../../../common/refiners/AbstractMergeDateTimeRefiner\";\n\n/**\n * Merging date-only result and time-only result (see. AbstractMergeDateTimeRefiner).\n */\nexport default class FRMergeDateTimeRefiner extends AbstractMergeDateTimeRefiner {\n    patternBetween(): RegExp {\n        return new RegExp(\"^\\\\s*(T|\u00E0|a|vers|de|,|-)?\\\\s*$\");\n    }\n}\n", "/*\n  \n*/\n\nimport AbstractMergeDateRangeRefiner from \"../../../common/refiners/AbstractMergeDateRangeRefiner\";\n\n/**\n * Merging before and after results (see. AbstractMergeDateRangeRefiner)\n *\n */\nexport default class FRMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner {\n    patternBetween(): RegExp {\n        return /^\\s*(\u00E0|a|-)\\s*$/i;\n    }\n}\n", "import { OpUnitType, QUnitType } from \"dayjs\";\nimport { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern\";\n\nexport const WEEKDAY_DICTIONARY: { [word: string]: number } = {\n    \"dimanche\": 0,\n    \"dim\": 0,\n    \"lundi\": 1,\n    \"lun\": 1,\n    \"mardi\": 2,\n    \"mar\": 2,\n    \"mercredi\": 3,\n    \"mer\": 3,\n    \"jeudi\": 4,\n    \"jeu\": 4,\n    \"vendredi\": 5,\n    \"ven\": 5,\n    \"samedi\": 6,\n    \"sam\": 6,\n};\n\nexport const MONTH_DICTIONARY: { [word: string]: number } = {\n    \"janvier\": 1,\n    \"jan\": 1,\n    \"jan.\": 1,\n    \"f\u00E9vrier\": 2,\n    \"f\u00E9v\": 2,\n    \"f\u00E9v.\": 2,\n    \"fevrier\": 2,\n    \"fev\": 2,\n    \"fev.\": 2,\n    \"mars\": 3,\n    \"mar\": 3,\n    \"mar.\": 3,\n    \"avril\": 4,\n    \"avr\": 4,\n    \"avr.\": 4,\n    \"mai\": 5,\n    \"juin\": 6,\n    \"jun\": 6,\n    \"juillet\": 7,\n    \"juil\": 7,\n    \"jul\": 7,\n    \"jul.\": 7,\n    \"ao\u00FBt\": 8,\n    \"aout\": 8,\n    \"septembre\": 9,\n    \"sep\": 9,\n    \"sep.\": 9,\n    \"sept\": 9,\n    \"sept.\": 9,\n    \"octobre\": 10,\n    \"oct\": 10,\n    \"oct.\": 10,\n    \"novembre\": 11,\n    \"nov\": 11,\n    \"nov.\": 11,\n    \"d\u00E9cembre\": 12,\n    \"decembre\": 12,\n    \"dec\": 12,\n    \"dec.\": 12,\n};\n\nexport const INTEGER_WORD_DICTIONARY: { [word: string]: number } = {\n    \"un\": 1,\n    \"deux\": 2,\n    \"trois\": 3,\n    \"quatre\": 4,\n    \"cinq\": 5,\n    \"six\": 6,\n    \"sept\": 7,\n    \"huit\": 8,\n    \"neuf\": 9,\n    \"dix\": 10,\n    \"onze\": 11,\n    \"douze\": 12,\n    \"treize\": 13,\n};\n\nexport const TIME_UNIT_DICTIONARY: { [word: string]: OpUnitType | QUnitType } = {\n    \"sec\": \"second\",\n    \"seconde\": \"second\",\n    \"secondes\": \"second\",\n    \"min\": \"minute\",\n    \"mins\": \"minute\",\n    \"minute\": \"minute\",\n    \"minutes\": \"minute\",\n    \"h\": \"hour\",\n    \"hr\": \"hour\",\n    \"hrs\": \"hour\",\n    \"heure\": \"hour\",\n    \"heures\": \"hour\",\n    \"jour\": \"d\",\n    \"jours\": \"d\",\n    \"semaine\": \"week\",\n    \"semaines\": \"week\",\n    \"mois\": \"month\",\n    \"trimestre\": \"quarter\",\n    \"trimestres\": \"quarter\",\n    \"ans\": \"year\",\n    \"ann\u00E9e\": \"year\",\n    \"ann\u00E9es\": \"year\",\n};\n\n//-----------------------------\n\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(\n    INTEGER_WORD_DICTIONARY\n)}|[0-9]+|[0-9]+\\\\.[0-9]+|une?\\\\b|quelques?|demi-?)`;\n\nexport function parseNumberPattern(match: string): number {\n    const num = match.toLowerCase();\n    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n        return INTEGER_WORD_DICTIONARY[num];\n    } else if (num === \"une\" || num === \"un\") {\n        return 1;\n    } else if (num.match(/quelques?/)) {\n        return 3;\n    } else if (num.match(/demi-?/)) {\n        return 0.5;\n    }\n\n    return parseFloat(num);\n}\n\n//-----------------------------\n\nexport const ORDINAL_NUMBER_PATTERN = `(?:[0-9]{1,2}(?:er)?)`;\nexport function parseOrdinalNumberPattern(match: string): number {\n    let num = match.toLowerCase();\n    num = num.replace(/(?:er)$/i, \"\");\n    return parseInt(num);\n}\n\n//-----------------------------\n// 88 p. Chr. n.\n// 234 AC\nexport const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\\\s*(?:AC|AD|p\\\\.\\\\s*C(?:hr?)?\\\\.\\\\s*n\\\\.)|[1-2][0-9]{3}|[5-9][0-9])`;\nexport function parseYear(match: string): number {\n    if (/AC/i.test(match)) {\n        match = match.replace(/BC/i, \"\");\n        return -parseInt(match);\n    }\n\n    if (/AD/i.test(match) || /C/i.test(match)) {\n        match = match.replace(/[^\\d]+/i, \"\");\n        return parseInt(match);\n    }\n\n    let yearNumber = parseInt(match);\n    if (yearNumber < 100) {\n        if (yearNumber > 50) {\n            yearNumber = yearNumber + 1900;\n        } else {\n            yearNumber = yearNumber + 2000;\n        }\n    }\n\n    return yearNumber;\n}\n\n//-----------------------------\n\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,5}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\\\s{0,5}`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\n\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(\"\", SINGLE_TIME_UNIT_PATTERN);\n\nexport function parseTimeUnits(timeunitText): { [c in OpUnitType | QUnitType]?: number } {\n    const fragments = {};\n    let remainingText = timeunitText;\n    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    while (match) {\n        collectDateTimeFragment(fragments, match);\n        remainingText = remainingText.substring(match[0].length);\n        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    }\n    return fragments as { [c in OpUnitType | QUnitType]?: number };\n}\n\nfunction collectDateTimeFragment(fragments, match) {\n    const num = parseNumberPattern(match[1]);\n    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n    fragments[unit] = num;\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { WEEKDAY_DICTIONARY } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { toDayJSWeekday } from \"../../../calculation/weeks\";\n\nconst PATTERN = new RegExp(\n    \"(?:(?:\\\\,|\\\\(|\\\\\uFF08)\\\\s*)?\" +\n        \"(?:(?:ce)\\\\s*)?\" +\n        `(${matchAnyPattern(WEEKDAY_DICTIONARY)})` +\n        \"(?:\\\\s*(?:\\\\,|\\\\)|\\\\\uFF09))?\" +\n        \"(?:\\\\s*(dernier|prochain)\\\\s*)?\" +\n        \"(?=\\\\W|\\\\d|$)\",\n    \"i\"\n);\n\nconst WEEKDAY_GROUP = 1;\nconst POSTFIX_GROUP = 2;\n\nexport default class FRWeekdayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();\n        const offset = WEEKDAY_DICTIONARY[dayOfWeek];\n        if (offset === undefined) {\n            return null;\n        }\n\n        let suffix = match[POSTFIX_GROUP];\n        suffix = suffix || \"\";\n        suffix = suffix.toLowerCase();\n\n        let modifier = null;\n        if (suffix == \"dernier\") {\n            modifier = \"last\";\n        } else if (suffix == \"prochain\") {\n            modifier = \"next\";\n        }\n\n        const date = toDayJSWeekday(context.refDate, offset, modifier);\n        return context\n            .createParsingComponents()\n            .assign(\"weekday\", offset)\n            .imply(\"day\", date.date())\n            .imply(\"month\", date.month() + 1)\n            .imply(\"year\", date.year());\n    }\n}\n", "import { Parser, ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport { Meridiem } from \"../../../index\";\n\n/**\n * 8h10m00s\n * 8h10m00\n * 8h10\n */\nconst FIRST_REG_PATTERN = new RegExp(\n    \"(^|\\\\s|T)\" +\n        \"(?:(?:[\u00E0a])\\\\s*)?\" +\n        \"(\\\\d{1,2})(?:h|:)?\" +\n        \"(?:(\\\\d{1,2})(?:m|:)?)?\" +\n        \"(?:(\\\\d{1,2})(?:s|:)?)?\" +\n        \"(?:\\\\s*(A\\\\.M\\\\.|P\\\\.M\\\\.|AM?|PM?))?\" +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst SECOND_REG_PATTERN = new RegExp(\n    \"^\\\\s*(\\\\-|\\\\\u2013|\\\\~|\\\\\u301C|[\u00E0a]|\\\\?)\\\\s*\" +\n        \"(\\\\d{1,2})(?:h|:)?\" +\n        \"(?:(\\\\d{1,2})(?:m|:)?)?\" +\n        \"(?:(\\\\d{1,2})(?:s|:)?)?\" +\n        \"(?:\\\\s*(A\\\\.M\\\\.|P\\\\.M\\\\.|AM?|PM?))?\" +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst HOUR_GROUP = 2;\nconst MINUTE_GROUP = 3;\nconst SECOND_GROUP = 4;\nconst AM_PM_HOUR_GROUP = 5;\n\nexport default class FRSpecificTimeExpressionParser implements Parser {\n    pattern(context): RegExp {\n        return FIRST_REG_PATTERN;\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray): ParsingResult | null {\n        const result = context.createParsingResult(match.index + match[1].length, match[0].substring(match[1].length));\n\n        // This looks more like a year e.g. 2020\n        if (result.text.match(/^\\d{4}$/)) {\n            match.index += match[0].length;\n            return null;\n        }\n\n        result.start = FRSpecificTimeExpressionParser.extractTimeComponent(result.start.clone(), match);\n        if (!result.start) {\n            match.index += match[0].length;\n            return null;\n        }\n\n        const remainingText = context.text.substring(match.index + match[0].length);\n        const secondMatch = SECOND_REG_PATTERN.exec(remainingText);\n        if (secondMatch) {\n            result.end = FRSpecificTimeExpressionParser.extractTimeComponent(result.start.clone(), secondMatch);\n            if (result.end) {\n                result.text += secondMatch[0];\n            }\n        }\n\n        return result;\n    }\n\n    private static extractTimeComponent(\n        extractingComponents: ParsingComponents,\n        match: RegExpMatchArray\n    ): ParsingComponents | null {\n        let hour = 0;\n        let minute = 0;\n        let meridiem = null;\n\n        // ----- Hours\n        hour = parseInt(match[HOUR_GROUP]);\n\n        // ----- Minutes\n        if (match[MINUTE_GROUP] != null) {\n            minute = parseInt(match[MINUTE_GROUP]);\n        }\n\n        if (minute >= 60 || hour > 24) {\n            return null;\n        }\n\n        if (hour >= 12) {\n            meridiem = Meridiem.PM;\n        }\n\n        // ----- AM & PM\n        if (match[AM_PM_HOUR_GROUP] != null) {\n            if (hour > 12) return null;\n            const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n            if (ampm == \"a\") {\n                meridiem = Meridiem.AM;\n                if (hour == 12) {\n                    hour = 0;\n                }\n            }\n\n            if (ampm == \"p\") {\n                meridiem = Meridiem.PM;\n                if (hour != 12) {\n                    hour += 12;\n                }\n            }\n        }\n\n        extractingComponents.assign(\"hour\", hour);\n        extractingComponents.assign(\"minute\", minute);\n        if (meridiem !== null) {\n            extractingComponents.assign(\"meridiem\", meridiem);\n        } else {\n            if (hour < 12) {\n                extractingComponents.imply(\"meridiem\", Meridiem.AM);\n            } else {\n                extractingComponents.imply(\"meridiem\", Meridiem.PM);\n            }\n        }\n\n        // ----- Second\n        if (match[SECOND_GROUP] != null) {\n            const second = parseInt(match[SECOND_GROUP]);\n            if (second >= 60) return null;\n\n            extractingComponents.assign(\"second\", second);\n        }\n\n        return extractingComponents;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingResult } from \"../../../results\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { MONTH_DICTIONARY } from \"../constants\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { ORDINAL_NUMBER_PATTERN, parseOrdinalNumberPattern } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    \"(?:on\\\\s*?)?\" +\n        `(${ORDINAL_NUMBER_PATTERN})` +\n        `(?:\\\\s*(?:au|\\\\-|\\\\\u2013|jusqu'au?|\\\\s)\\\\s*(${ORDINAL_NUMBER_PATTERN}))?` +\n        `(?:-|/|\\\\s*(?:de)?\\\\s*)` +\n        `(${matchAnyPattern(MONTH_DICTIONARY)})` +\n        `(?:(?:-|/|,?\\\\s*)(${YEAR_PATTERN}(?![^\\\\s]\\\\d)))?` +\n        `(?=\\\\W|$)`,\n    \"i\"\n);\n\nconst DATE_GROUP = 1;\nconst DATE_TO_GROUP = 2;\nconst MONTH_NAME_GROUP = 3;\nconst YEAR_GROUP = 4;\n\nexport default class FRMonthNameLittleEndianParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        //console.log(match)\n\n        const result = context.createParsingResult(match.index, match[0]);\n\n        const month = MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n        const day = parseOrdinalNumberPattern(match[DATE_GROUP]);\n        if (day > 31) {\n            // e.g. \"[96 Aug]\" => \"9[6 Aug]\", we need to shift away from the next number\n            match.index = match.index + match[DATE_GROUP].length;\n            return null;\n        }\n\n        result.start.assign(\"month\", month);\n        result.start.assign(\"day\", day);\n\n        if (match[YEAR_GROUP]) {\n            const yearNumber = parseYear(match[YEAR_GROUP]);\n            result.start.assign(\"year\", yearNumber);\n        } else {\n            const year = findYearClosestToRef(context.refDate, day, month);\n            result.start.imply(\"year\", year);\n        }\n\n        if (match[DATE_TO_GROUP]) {\n            const endDate = parseOrdinalNumberPattern(match[DATE_TO_GROUP]);\n\n            result.end = result.start.clone();\n            result.end.assign(\"day\", endDate);\n        }\n\n        return result;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { parseTimeUnits, TIME_UNITS_PATTERN } from \"../constants\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nexport default class FRTimeUnitAgoFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor() {\n        super();\n    }\n\n    innerPattern(): RegExp {\n        return new RegExp(`il y a\\\\s*(${TIME_UNITS_PATTERN})(?=(?:\\\\W|$))`, \"i\");\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const timeUnits = parseTimeUnits(match[1]);\n        const outputTimeUnits = reverseTimeUnits(timeUnits);\n\n        return ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);\n    }\n}\n", "import { TIME_UNITS_PATTERN, parseTimeUnits } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nexport default class FRTimeUnitWithinFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return new RegExp(`(?:dans|en|pour|pendant|de)\\\\s*(${TIME_UNITS_PATTERN})(?=\\\\W|$)`, \"i\");\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const timeUnits = parseTimeUnits(match[1]);\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { NUMBER_PATTERN, parseNumberPattern, TIME_UNIT_DICTIONARY } from \"../constants\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\n\nexport default class FRTimeUnitAgoFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor() {\n        super();\n    }\n\n    innerPattern(): RegExp {\n        return new RegExp(\n            `(?:les?|la|l'|du|des?)\\\\s*` +\n                `(${NUMBER_PATTERN})?` +\n                `(?:\\\\s*(prochaine?s?|derni[e\u00E8]re?s?|pass[\u00E9e]e?s?|pr[\u00E9e]c[\u00E9e]dents?|suivante?s?))?` +\n                `\\\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})` +\n                `(?:\\\\s*(prochaine?s?|derni[e\u00E8]re?s?|pass[\u00E9e]e?s?|pr[\u00E9e]c[\u00E9e]dents?|suivante?s?))?`,\n            \"i\"\n        );\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const num = match[1] ? parseNumberPattern(match[1]) : 1;\n        const unit = TIME_UNIT_DICTIONARY[match[3].toLowerCase()];\n        let timeUnits = {};\n        timeUnits[unit] = num;\n\n        // Modifier\n        let modifier = match[2] || match[4] || \"\";\n        modifier = modifier.toLowerCase();\n        if (!modifier) {\n            return;\n        }\n\n        if (/derni[e\u00E8]re?s?/.test(modifier) || /pass[\u00E9e]e?s?/.test(modifier) || /pr[\u00E9e]c[\u00E9e]dents?/.test(modifier)) {\n            timeUnits = reverseTimeUnits(timeUnits);\n        }\n\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n", "/**\n * Chrono components for French support (*parsers*, *refiners*, and *configuration*)\n *\n * @module\n */\n\nimport { includeCommonConfiguration } from \"../../configurations\";\nimport { ParsedResult, ParsingOption } from \"../../index\";\nimport { Chrono, Configuration } from \"../../chrono\";\nimport FRCasualDateParser from \"./parsers/FRCasualDateParser\";\nimport FRCasualTimeParser from \"./parsers/FRCasualTimeParser\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser\";\nimport FRTimeExpressionParser from \"./parsers/FRTimeExpressionParser\";\nimport FRMergeDateTimeRefiner from \"./refiners/FRMergeDateTimeRefiner\";\nimport FRMergeDateRangeRefiner from \"./refiners/FRMergeDateRangeRefiner\";\nimport FRWeekdayParser from \"./parsers/FRWeekdayParser\";\nimport FRSpecificTimeExpressionParser from \"./parsers/FRSpecificTimeExpressionParser\";\nimport FRMonthNameLittleEndianParser from \"./parsers/FRMonthNameLittleEndianParser\";\nimport FRTimeUnitAgoFormatParser from \"./parsers/FRTimeUnitAgoFormatParser\";\nimport FRTimeUnitWithinFormatParser from \"./parsers/FRTimeUnitWithinFormatParser\";\nimport FRTimeUnitRelativeFormatParser from \"./parsers/FRTimeUnitRelativeFormatParser\";\n\n// Shortcuts\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration(true));\n\nexport function parse(text: string, ref?: Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\nexport function parseDate(text: string, ref?: Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createCasualConfiguration(littleEndian = true): Configuration {\n    const option = createConfiguration(false, littleEndian);\n    option.parsers.unshift(new FRCasualDateParser());\n    option.parsers.unshift(new FRCasualTimeParser());\n    option.parsers.unshift(new FRTimeUnitRelativeFormatParser());\n    return option;\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createConfiguration(strictMode = true, littleEndian = true): Configuration {\n    return includeCommonConfiguration(\n        {\n            parsers: [\n                new SlashDateFormatParser(littleEndian),\n                new FRMonthNameLittleEndianParser(),\n                new FRTimeExpressionParser(),\n                new FRSpecificTimeExpressionParser(),\n                new FRTimeUnitAgoFormatParser(),\n                new FRTimeUnitWithinFormatParser(),\n                new FRWeekdayParser(),\n            ],\n            refiners: [new FRMergeDateTimeRefiner(), new FRMergeDateRangeRefiner()],\n        },\n        strictMode\n    );\n}\n", "/**\n * to-hankaku.js\n * convert to ascii code strings.\n *\n * @version 1.0.1\n * @author think49\n * @url https://gist.github.com/964592\n * @license http://www.opensource.org/licenses/mit-license.php (The MIT License)\n */\nexport function toHankaku(text) {\n    return String(text)\n        .replace(/\\u2019/g, \"\\u0027\")\n        .replace(/\\u201D/g, \"\\u0022\")\n        .replace(/\\u3000/g, \"\\u0020\")\n        .replace(/\\uFFE5/g, \"\\u00A5\")\n        .replace(\n            /[\\uFF01\\uFF03-\\uFF06\\uFF08\\uFF09\\uFF0C-\\uFF19\\uFF1C-\\uFF1F\\uFF21-\\uFF3B\\uFF3D\\uFF3F\\uFF41-\\uFF5B\\uFF5D\\uFF5E]/g,\n            alphaNum\n        );\n}\n\nfunction alphaNum(token) {\n    return String.fromCharCode(token.charCodeAt(0) - 65248);\n}\n", "import { Parser, ParsingContext } from \"../../../chrono\";\nimport { toHankaku } from \"../constants\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\n\nimport dayjs from \"dayjs\";\n\nconst PATTERN =\n    /(?:(?:([\u540C\u4ECA\u672C])|((\u662D\u548C|\u5E73\u6210|\u4EE4\u548C)?([0-9\uFF10-\uFF19]{1,4}|\u5143)))\u5E74\\s*)?([0-9\uFF10-\uFF19]{1,2})\u6708\\s*([0-9\uFF10-\uFF19]{1,2})\u65E5/i;\nconst SPECIAL_YEAR_GROUP = 1;\nconst TYPICAL_YEAR_GROUP = 2;\nconst ERA_GROUP = 3;\nconst YEAR_NUMBER_GROUP = 4;\nconst MONTH_GROUP = 5;\nconst DAY_GROUP = 6;\n\nexport default class JPStandardParser implements Parser {\n    pattern() {\n        return PATTERN;\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray) {\n        const month = parseInt(toHankaku(match[MONTH_GROUP]));\n        const day = parseInt(toHankaku(match[DAY_GROUP]));\n        const components = context.createParsingComponents({\n            day: day,\n            month: month,\n        });\n\n        if (match[SPECIAL_YEAR_GROUP] && match[SPECIAL_YEAR_GROUP].match(\"\u540C|\u4ECA|\u672C\")) {\n            const moment = dayjs(context.refDate);\n            components.assign(\"year\", moment.year());\n        }\n\n        if (match[TYPICAL_YEAR_GROUP]) {\n            const yearNumText = match[YEAR_NUMBER_GROUP];\n\n            let year = yearNumText == \"\u5143\" ? 1 : parseInt(toHankaku(yearNumText));\n            if (match[ERA_GROUP] == \"\u4EE4\u548C\") {\n                year += 2018;\n            } else if (match[ERA_GROUP] == \"\u5E73\u6210\") {\n                year += 1988;\n            } else if (match[ERA_GROUP] == \"\u662D\u548C\") {\n                year += 1925;\n            }\n\n            components.assign(\"year\", year);\n        } else {\n            const year = findYearClosestToRef(context.refDate, day, month);\n            components.imply(\"year\", year);\n        }\n\n        return components;\n    }\n}\n", "import AbstractMergeDateRangeRefiner from \"../../../common/refiners/AbstractMergeDateRangeRefiner\";\n\n/**\n * Merging before and after results (see. AbstractMergeDateRangeRefiner)\n * This implementation should provide Japanese connecting phases\n * - \u6C34\u66DC\u65E5[\u30FC]\u65E5\u66DC\u65E5\n * - \u6C34\u66DC\u65E5[\u304B\u3089]\u65E5\u66DC\u65E5\n */\nexport default class JPMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner {\n    patternBetween(): RegExp {\n        return /^\\s*(\u304B\u3089|\u30FC|-)\\s*$/i;\n    }\n}\n", "import { Parser, ParsingContext } from \"../../../chrono\";\nimport dayjs from \"dayjs\";\nimport { Meridiem } from \"../../../index\";\nimport * as references from \"../../../common/casualReferences\";\n\nconst PATTERN = /\u4ECA\u65E5|\u5F53\u65E5|\u6628\u65E5|\u660E\u65E5|\u4ECA\u591C|\u4ECA\u5915|\u4ECA\u6669|\u4ECA\u671D/i;\n\nexport default class JPCasualDateParser implements Parser {\n    pattern() {\n        return PATTERN;\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray) {\n        const text = match[0];\n\n        const date = dayjs(context.refDate);\n        const components = context.createParsingComponents();\n\n        switch (text) {\n            case \"\u6628\u65E5\":\n                return references.yesterday(context.reference);\n\n            case \"\u660E\u65E5\":\n                return references.tomorrow(context.reference);\n\n            case \"\u4ECA\u65E5\":\n            case \"\u5F53\u65E5\":\n                return references.today(context.reference);\n        }\n\n        if (text == \"\u4ECA\u591C\" || text == \"\u4ECA\u5915\" || text == \"\u4ECA\u6669\") {\n            components.imply(\"hour\", 22);\n            components.assign(\"meridiem\", Meridiem.PM);\n        } else if (text.match(\"\u4ECA\u671D\")) {\n            components.imply(\"hour\", 6);\n            components.assign(\"meridiem\", Meridiem.AM);\n        }\n\n        components.assign(\"day\", date.date());\n        components.assign(\"month\", date.month() + 1);\n        components.assign(\"year\", date.year());\n        return components;\n    }\n}\n", "/**\n * Chrono components for Japanese support (*parsers*, *refiners*, and *configuration*)\n *\n * @module\n */\n\nimport JPStandardParser from \"./parsers/JPStandardParser\";\nimport JPMergeDateRangeRefiner from \"./refiners/JPMergeDateRangeRefiner\";\nimport JPCasualDateParser from \"./parsers/JPCasualDateParser\";\n\nimport { Chrono, Configuration } from \"../../chrono\";\nimport { ParsedResult, ParsingOption } from \"../../index\";\n\n// Shortcuts\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration());\n\nexport function parse(text: string, ref?: Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\nexport function parseDate(text: string, ref?: Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createCasualConfiguration(): Configuration {\n    const option = createConfiguration();\n    option.parsers.unshift(new JPCasualDateParser());\n    return option;\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createConfiguration(): Configuration {\n    return {\n        parsers: [new JPStandardParser()],\n        refiners: [new JPMergeDateRangeRefiner()],\n    };\n}\n", "export const WEEKDAY_DICTIONARY: { [word: string]: number } = {\n    \"domingo\": 0,\n    \"dom\": 0,\n    \"segunda\": 1,\n    \"segunda-feira\": 1,\n    \"seg\": 1,\n    \"ter\u00E7a\": 2,\n    \"ter\u00E7a-feira\": 2,\n    \"ter\": 2,\n    \"quarta\": 3,\n    \"quarta-feira\": 3,\n    \"qua\": 3,\n    \"quinta\": 4,\n    \"quinta-feira\": 4,\n    \"qui\": 4,\n    \"sexta\": 5,\n    \"sexta-feira\": 5,\n    \"sex\": 5,\n    \"s\u00E1bado\": 6,\n    \"sabado\": 6,\n    \"sab\": 6,\n};\n\nexport const MONTH_DICTIONARY: { [word: string]: number } = {\n    \"janeiro\": 1,\n    \"jan\": 1,\n    \"jan.\": 1,\n    \"fevereiro\": 2,\n    \"fev\": 2,\n    \"fev.\": 2,\n    \"mar\u00E7o\": 3,\n    \"mar\": 3,\n    \"mar.\": 3,\n    \"abril\": 4,\n    \"abr\": 4,\n    \"abr.\": 4,\n    \"maio\": 5,\n    \"mai\": 5,\n    \"mai.\": 5,\n    \"junho\": 6,\n    \"jun\": 6,\n    \"jun.\": 6,\n    \"julho\": 7,\n    \"jul\": 7,\n    \"jul.\": 7,\n    \"agosto\": 8,\n    \"ago\": 8,\n    \"ago.\": 8,\n    \"setembro\": 9,\n    \"set\": 9,\n    \"set.\": 9,\n    \"outubro\": 10,\n    \"out\": 10,\n    \"out.\": 10,\n    \"novembro\": 11,\n    \"nov\": 11,\n    \"nov.\": 11,\n    \"dezembro\": 12,\n    \"dez\": 12,\n    \"dez.\": 12,\n};\n\n//-----------------------------\n// 88 p. Chr. n.\n// 234 AC\nexport const YEAR_PATTERN = \"[0-9]{1,4}(?![^\\\\s]\\\\d)(?:\\\\s*[a|d]\\\\.?\\\\s*c\\\\.?|\\\\s*a\\\\.?\\\\s*d\\\\.?)?\";\nexport function parseYear(match: string): number {\n    if (match.match(/^[0-9]{1,4}$/)) {\n        let yearNumber = parseInt(match);\n        if (yearNumber < 100) {\n            if (yearNumber > 50) {\n                yearNumber = yearNumber + 1900;\n            } else {\n                yearNumber = yearNumber + 2000;\n            }\n        }\n        return yearNumber;\n    }\n\n    if (match.match(/a\\.?\\s*c\\.?/i)) {\n        match = match.replace(/a\\.?\\s*c\\.?/i, \"\");\n        return -parseInt(match);\n    }\n\n    return parseInt(match);\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { WEEKDAY_DICTIONARY } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { toDayJSWeekday } from \"../../../calculation/weeks\";\n\nconst PATTERN = new RegExp(\n    \"(?:(?:\\\\,|\\\\(|\\\\\uFF08)\\\\s*)?\" +\n        \"(?:(este|esta|passado|pr[o\u00F3]ximo)\\\\s*)?\" +\n        `(${matchAnyPattern(WEEKDAY_DICTIONARY)})` +\n        \"(?:\\\\s*(?:\\\\,|\\\\)|\\\\\uFF09))?\" +\n        \"(?:\\\\s*(este|esta|passado|pr[\u00F3o]ximo)\\\\s*semana)?\" +\n        \"(?=\\\\W|\\\\d|$)\",\n    \"i\"\n);\n\nconst PREFIX_GROUP = 1;\nconst WEEKDAY_GROUP = 2;\nconst POSTFIX_GROUP = 3;\n\nexport default class PTWeekdayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();\n        const offset = WEEKDAY_DICTIONARY[dayOfWeek];\n        if (offset === undefined) {\n            return null;\n        }\n\n        const prefix = match[PREFIX_GROUP];\n        const postfix = match[POSTFIX_GROUP];\n        let norm = prefix || postfix || \"\";\n        norm = norm.toLowerCase();\n\n        let modifier = null;\n        if (norm == \"passado\") {\n            modifier = \"this\";\n        } else if (norm == \"pr\u00F3ximo\" || norm == \"proximo\") {\n            modifier = \"next\";\n        } else if (norm == \"este\") {\n            modifier = \"this\";\n        }\n\n        const date = toDayJSWeekday(context.refDate, offset, modifier);\n        return context\n            .createParsingComponents()\n            .assign(\"weekday\", offset)\n            .imply(\"day\", date.date())\n            .imply(\"month\", date.month() + 1)\n            .imply(\"year\", date.year());\n    }\n}\n", "import { AbstractTimeExpressionParser } from \"../../../common/parsers/AbstractTimeExpressionParser\";\n\nexport default class PTTimeExpressionParser extends AbstractTimeExpressionParser {\n    primaryPrefix(): string {\n        return \"(?:(?:ao?|\u00E0s?|das|da|de|do)\\\\s*)?\";\n    }\n\n    followingPhase(): string {\n        return \"\\\\s*(?:\\\\-|\\\\\u2013|\\\\~|\\\\\u301C|a(?:o)?|\\\\?)\\\\s*\";\n    }\n\n    // extractPrimaryTimeComponents(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | null {\n    //     // This looks more like a year e.g. 2020\n    //     // if (match[0].match(/^\\s*\\d{4}\\s*$/)) {\n    //     //     return null;\n    //     // }\n    //\n    //     return super.extractPrimaryTimeComponents(context, match);\n    // }\n}\n", "import AbstractMergeDateTimeRefiner from \"../../../common/refiners/AbstractMergeDateTimeRefiner\";\n\n/**\n * Merging date-only result and time-only result (see. AbstractMergeDateTimeRefiner).\n */\nexport default class PTMergeDateTimeRefiner extends AbstractMergeDateTimeRefiner {\n    patternBetween(): RegExp {\n        return new RegExp(\"^\\\\s*(?:,|\u00E0)?\\\\s*$\");\n    }\n}\n", "/*\n  \n*/\n\nimport AbstractMergeDateRangeRefiner from \"../../../common/refiners/AbstractMergeDateRangeRefiner\";\n\n/**\n * Merging before and after results (see. AbstractMergeDateRangeRefiner)\n *\n */\nexport default class PTMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner {\n    patternBetween(): RegExp {\n        return /^\\s*(?:-)\\s*$/i;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingResult } from \"../../../results\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { MONTH_DICTIONARY } from \"../constants\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    `([0-9]{1,2})(?:\u00BA|\u00AA|\u00B0)?` +\n        \"(?:\\\\s*(?:desde|de|\\\\-|\\\\\u2013|ao?|\\\\s)\\\\s*([0-9]{1,2})(?:\u00BA|\u00AA|\u00B0)?)?\\\\s*(?:de)?\\\\s*\" +\n        `(?:-|/|\\\\s*(?:de|,)?\\\\s*)` +\n        `(${matchAnyPattern(MONTH_DICTIONARY)})` +\n        `(?:\\\\s*(?:de|,)?\\\\s*(${YEAR_PATTERN}))?` +\n        `(?=\\\\W|$)`,\n    \"i\"\n);\n\nconst DATE_GROUP = 1;\nconst DATE_TO_GROUP = 2;\nconst MONTH_NAME_GROUP = 3;\nconst YEAR_GROUP = 4;\n\nexport default class PTMonthNameLittleEndianParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        const result = context.createParsingResult(match.index, match[0]);\n\n        const month = MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n        const day = parseInt(match[DATE_GROUP]);\n        if (day > 31) {\n            // e.g. \"[96 Aug]\" => \"9[6 Aug]\", we need to shift away from the next number\n            match.index = match.index + match[DATE_GROUP].length;\n            return null;\n        }\n\n        result.start.assign(\"month\", month);\n        result.start.assign(\"day\", day);\n\n        if (match[YEAR_GROUP]) {\n            const yearNumber = parseYear(match[YEAR_GROUP]);\n            result.start.assign(\"year\", yearNumber);\n        } else {\n            const year = findYearClosestToRef(context.refDate, day, month);\n            result.start.imply(\"year\", year);\n        }\n\n        if (match[DATE_TO_GROUP]) {\n            const endDate = parseInt(match[DATE_TO_GROUP]);\n\n            result.end = result.start.clone();\n            result.end.assign(\"day\", endDate);\n        }\n\n        return result;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport * as references from \"../../../common/casualReferences\";\n\nexport default class PTCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return /(agora|hoje|amanha|amanh\u00E3|ontem)(?=\\W|$)/i;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        const lowerText = match[0].toLowerCase();\n        const component = context.createParsingComponents();\n\n        switch (lowerText) {\n            case \"agora\":\n                return references.now(context.reference);\n\n            case \"hoje\":\n                return references.today(context.reference);\n\n            case \"amanha\":\n            case \"amanh\u00E3\":\n                return references.tomorrow(context.reference);\n\n            case \"ontem\":\n                return references.yesterday(context.reference);\n        }\n\n        return component;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { Meridiem } from \"../../../index\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { assignTheNextDay } from \"../../../utils/dayjs\";\nimport dayjs from \"dayjs\";\n\nexport default class PTCasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        return /(?:esta\\s*)?(manha|manh\u00E3|tarde|meia-noite|meio-dia|noite)(?=\\W|$)/i;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const targetDate = dayjs(context.refDate);\n        const component = context.createParsingComponents();\n        switch (match[1].toLowerCase()) {\n            case \"tarde\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 15);\n                break;\n\n            case \"noite\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 22);\n                break;\n\n            case \"manha\":\n            case \"manh\u00E3\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 6);\n                break;\n\n            case \"meia-noite\":\n                assignTheNextDay(component, targetDate);\n                component.imply(\"hour\", 0);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                break;\n\n            case \"meio-dia\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 12);\n                break;\n        }\n\n        return component;\n    }\n}\n", "/**\n * Chrono components for Portuguese support (*parsers*, *refiners*, and *configuration*)\n *\n * @module\n */\n\nimport { includeCommonConfiguration } from \"../../configurations\";\nimport { ParsedResult, ParsingOption } from \"../../index\";\nimport { Chrono, Configuration } from \"../../chrono\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser\";\nimport PTWeekdayParser from \"./parsers/PTWeekdayParser\";\nimport PTTimeExpressionParser from \"./parsers/PTTimeExpressionParser\";\nimport PTMergeDateTimeRefiner from \"./refiners/PTMergeDateTimeRefiner\";\nimport PTMergeDateRangeRefiner from \"./refiners/PTMergeDateRangeRefiner\";\nimport PTMonthNameLittleEndianParser from \"./parsers/PTMonthNameLittleEndianParser\";\nimport PTCasualDateParser from \"./parsers/PTCasualDateParser\";\nimport PTCasualTimeParser from \"./parsers/PTCasualTimeParser\";\n\n// Shortcuts\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration(true));\n\nexport function parse(text: string, ref?: Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\nexport function parseDate(text: string, ref?: Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createCasualConfiguration(littleEndian = true): Configuration {\n    const option = createConfiguration(false, littleEndian);\n    option.parsers.push(new PTCasualDateParser());\n    option.parsers.push(new PTCasualTimeParser());\n    return option;\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createConfiguration(strictMode = true, littleEndian = true): Configuration {\n    return includeCommonConfiguration(\n        {\n            parsers: [\n                new SlashDateFormatParser(littleEndian),\n                new PTWeekdayParser(),\n                new PTTimeExpressionParser(),\n                new PTMonthNameLittleEndianParser(),\n            ],\n            refiners: [new PTMergeDateTimeRefiner(), new PTMergeDateRangeRefiner()],\n        },\n        strictMode\n    );\n}\n", "/*\n  \n*/\n\nimport AbstractMergeDateRangeRefiner from \"../../../common/refiners/AbstractMergeDateRangeRefiner\";\n\n/**\n * Merging before and after results (see. AbstractMergeDateRangeRefiner)\n * This implementation should provide English connecting phases\n * - 2020-02-13 [tot] 2020-02-13\n * - Wednesday [-] Friday\n */\nexport default class NLMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner {\n    patternBetween(): RegExp {\n        return /^\\s*(tot|-)\\s*$/i;\n    }\n}\n", "import AbstractMergeDateTimeRefiner from \"../../../common/refiners/AbstractMergeDateTimeRefiner\";\n\n/**\n * Merging date-only result and time-only result (see. AbstractMergeDateTimeRefiner).\n * This implementation should provide English connecting phases\n * - 2020-02-13 [at] 6pm\n * - Tomorrow [after] 7am\n */\nexport default class NLMergeDateTimeRefiner extends AbstractMergeDateTimeRefiner {\n    patternBetween(): RegExp {\n        return new RegExp(\"^\\\\s*(om|na|voor|in de|,|-)?\\\\s*$\");\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport * as references from \"../../../common/casualReferences\";\n\nexport default class NLCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return /(nu|vandaag|morgen|morgend|gisteren)(?=\\W|$)/i;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        const lowerText = match[0].toLowerCase();\n        const component = context.createParsingComponents();\n\n        switch (lowerText) {\n            case \"nu\":\n                return references.now(context.reference);\n\n            case \"vandaag\":\n                return references.today(context.reference);\n\n            case \"morgen\":\n            case \"morgend\":\n                return references.tomorrow(context.reference);\n\n            case \"gisteren\":\n                return references.yesterday(context.reference);\n        }\n\n        return component;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { Meridiem } from \"../../../index\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport dayjs from \"dayjs\";\nimport { assignTheNextDay } from \"../../../utils/dayjs\";\n\nconst DAY_GROUP = 1;\nconst MOMENT_GROUP = 2;\n\nexport default class NLCasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        return /(deze)?\\s*(namiddag|avond|middernacht|ochtend|middag|'s middags|'s avonds|'s ochtends)(?=\\W|$)/i;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const targetDate = dayjs(context.refDate);\n        const component = context.createParsingComponents();\n\n        if (match[DAY_GROUP] === \"deze\") {\n            component.assign(\"day\", context.refDate.getDate());\n            component.assign(\"month\", context.refDate.getMonth() + 1);\n            component.assign(\"year\", context.refDate.getFullYear());\n        }\n\n        switch (match[MOMENT_GROUP].toLowerCase()) {\n            case \"namiddag\":\n            case \"'s namiddags\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 15);\n                break;\n\n            case \"avond\":\n            case \"'s avonds'\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 20);\n                break;\n\n            case \"middernacht\":\n                assignTheNextDay(component, targetDate);\n                component.imply(\"hour\", 0);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                break;\n\n            case \"ochtend\":\n            case \"'s ochtends\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 6);\n                break;\n\n            case \"middag\":\n            case \"'s middags\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 12);\n                break;\n        }\n\n        return component;\n    }\n}\n", "import { OpUnitType } from \"dayjs\";\nimport { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern\";\nimport { findMostLikelyADYear } from \"../../calculation/years\";\nimport { TimeUnits } from \"../../utils/timeunits\";\n\nexport const WEEKDAY_DICTIONARY: { [word: string]: number } = {\n    // Zondag\n    zondag: 0,\n    zon: 0,\n    \"zon.\": 0,\n    zo: 0,\n    \"zo.\": 0,\n    // Maandag\n    maandag: 1,\n    ma: 1,\n    \"ma.\": 1,\n    // Dinsdag\n    dinsdag: 2,\n    din: 2,\n    \"din.\": 2,\n    di: 2,\n    \"di.\": 2,\n    // Woensdag\n    woensdag: 3,\n    woe: 3,\n    \"woe.\": 3,\n    wo: 3,\n    \"wo.\": 3,\n    // Donderdag\n    donderdag: 4,\n    dond: 4,\n    \"dond.\": 4,\n    do: 4,\n    \"do.\": 4,\n    // Vrijdag\n    vrijdag: 5,\n    vrij: 5,\n    \"vrij.\": 5,\n    vr: 5,\n    \"vr.\": 5,\n    // Zaterdag\n    zaterdag: 6,\n    zat: 6,\n    \"zat.\": 6,\n    \"za\": 6,\n    \"za.\": 6,\n};\n\nexport const MONTH_DICTIONARY: { [word: string]: number } = {\n    januari: 1,\n    jan: 1,\n    \"jan.\": 1,\n    februari: 2,\n    feb: 2,\n    \"feb.\": 2,\n    maart: 3,\n    mar: 3,\n    \"mar.\": 3,\n    april: 4,\n    apr: 4,\n    \"apr.\": 4,\n    mei: 5,\n    juni: 6,\n    jun: 6,\n    \"jun.\": 6,\n    juli: 7,\n    jul: 7,\n    \"jul.\": 7,\n    augustus: 8,\n    aug: 8,\n    \"aug.\": 8,\n    september: 9,\n    sep: 9,\n    \"sep.\": 9,\n    sept: 9,\n    \"sept.\": 9,\n    oktober: 10,\n    okt: 10,\n    \"okt.\": 10,\n    november: 11,\n    nov: 11,\n    \"nov.\": 11,\n    december: 12,\n    dec: 12,\n    \"dec.\": 12,\n};\n\nexport const INTEGER_WORD_DICTIONARY: { [word: string]: number } = {\n    een: 1,\n    twee: 2,\n    drie: 3,\n    vier: 4,\n    vijf: 5,\n    zes: 6,\n    zeven: 7,\n    acht: 8,\n    negen: 9,\n    tien: 10,\n    elf: 11,\n    twaalf: 12,\n};\n\nexport const ORDINAL_WORD_DICTIONARY: { [word: string]: number } = {\n    eerste: 1,\n    tweede: 2,\n    derde: 3,\n    vierde: 4,\n    vijfde: 5,\n    zesde: 6,\n    zevende: 7,\n    achtste: 8,\n    negende: 9,\n    tiende: 10,\n    elfde: 11,\n    twaalfde: 12,\n    dertiende: 13,\n    veertiende: 14,\n    vijftiende: 15,\n    zestiende: 16,\n    zeventiende: 17,\n    achttiende: 18,\n    negentiende: 19,\n    twintigste: 20,\n    \"eenentwintigste\": 21,\n    \"twee\u00EBntwintigste\": 22,\n    \"drieentwintigste\": 23,\n    \"vierentwintigste\": 24,\n    \"vijfentwintigste\": 25,\n    \"zesentwintigste\": 26,\n    \"zevenentwintigste\": 27,\n    \"achtentwintig\": 28,\n    \"negenentwintig\": 29,\n    \"dertigste\": 30,\n    \"eenendertigste\": 31,\n};\n\nexport const TIME_UNIT_DICTIONARY: { [word: string]: OpUnitType } = {\n    sec: \"second\",\n    second: \"second\",\n    seconden: \"second\",\n    min: \"minute\",\n    mins: \"minute\",\n    minute: \"minute\",\n    minuut: \"minute\",\n    minuten: \"minute\",\n    minuutje: \"minute\",\n    h: \"hour\",\n    hr: \"hour\",\n    hrs: \"hour\",\n    uur: \"hour\",\n    u: \"hour\",\n    uren: \"hour\",\n    dag: \"d\",\n    dagen: \"d\",\n    week: \"week\",\n    weken: \"week\",\n    maand: \"month\",\n    maanden: \"month\",\n    jaar: \"year\",\n    jr: \"year\",\n    jaren: \"year\",\n};\n\n//-----------------------------\n\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(\n    INTEGER_WORD_DICTIONARY\n)}|[0-9]+|[0-9]+[\\\\.,][0-9]+|halve?|half|paar)`;\n\nexport function parseNumberPattern(match: string): number {\n    const num = match.toLowerCase();\n    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n        return INTEGER_WORD_DICTIONARY[num];\n    } else if (num === \"paar\") {\n        return 2;\n    } else if (num === \"half\" || num.match(/halve?/)) {\n        return 0.5;\n    }\n    // Replace \",\" with \".\" to support some European languages\n    return parseFloat(num.replace(\",\", \".\"));\n}\n\n//-----------------------------\n\nexport const ORDINAL_NUMBER_PATTERN = `(?:${matchAnyPattern(ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:ste|de)?)`;\nexport function parseOrdinalNumberPattern(match: string): number {\n    let num = match.toLowerCase();\n    if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {\n        return ORDINAL_WORD_DICTIONARY[num];\n    }\n    num = num.replace(/(?:ste|de)$/i, \"\");\n    return parseInt(num);\n}\n\n//-----------------------------\n\nexport const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\\\s*(?:voor Christus|na Christus)|[1-2][0-9]{3}|[5-9][0-9])`;\nexport function parseYear(match: string): number {\n    if (/voor Christus/i.test(match)) {\n        // Before Christ\n        match = match.replace(/voor Christus/i, \"\");\n        return -parseInt(match);\n    }\n\n    if (/na Christus/i.test(match)) {\n        match = match.replace(/na Christus/i, \"\");\n        return parseInt(match);\n    }\n\n    const rawYearNumber = parseInt(match);\n    return findMostLikelyADYear(rawYearNumber);\n}\n\n//-----------------------------\n\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,5}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\\\s{0,5}`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\n\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(`(?:(?:binnen|in)\\\\s*)?`, SINGLE_TIME_UNIT_PATTERN);\n\nexport function parseTimeUnits(timeunitText): TimeUnits {\n    const fragments = {};\n    let remainingText = timeunitText;\n    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    while (match) {\n        collectDateTimeFragment(fragments, match);\n        remainingText = remainingText.substring(match[0].length);\n        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    }\n    return fragments;\n}\n\nfunction collectDateTimeFragment(fragments, match) {\n    const num = parseNumberPattern(match[1]);\n    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n    fragments[unit] = num;\n}\n", "import { TIME_UNITS_PATTERN, parseTimeUnits } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nexport default class NLTimeUnitWithinFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return new RegExp(`(?:binnen|in|binnen de|voor)\\\\s*` + \"(\" + TIME_UNITS_PATTERN + \")\" + `(?=\\\\W|$)`, \"i\");\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const timeUnits = parseTimeUnits(match[1]);\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { WEEKDAY_DICTIONARY } from \"../../nl/constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { toDayJSWeekday } from \"../../../calculation/weeks\";\n\nconst PATTERN = new RegExp(\n    \"(?:(?:\\\\,|\\\\(|\\\\\uFF08)\\\\s*)?\" +\n        \"(?:op\\\\s*?)?\" +\n        \"(?:(deze|vorige|volgende)\\\\s*(?:week\\\\s*)?)?\" +\n        `(${matchAnyPattern(WEEKDAY_DICTIONARY)})` +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst PREFIX_GROUP = 1;\nconst WEEKDAY_GROUP = 2;\nconst POSTFIX_GROUP = 3;\n\nexport default class NLWeekdayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();\n        const offset = WEEKDAY_DICTIONARY[dayOfWeek];\n        const prefix = match[PREFIX_GROUP];\n        const postfix = match[POSTFIX_GROUP];\n        let modifierWord = prefix || postfix;\n        modifierWord = modifierWord || \"\";\n        modifierWord = modifierWord.toLowerCase();\n\n        let modifier = null;\n        if (modifierWord == \"vorige\") {\n            modifier = \"last\";\n        } else if (modifierWord == \"volgende\") {\n            modifier = \"next\";\n        } else if (modifierWord == \"deze\") {\n            modifier = \"this\";\n        }\n\n        const date = toDayJSWeekday(context.refDate, offset, modifier);\n        return context\n            .createParsingComponents()\n            .assign(\"weekday\", offset)\n            .imply(\"day\", date.date())\n            .imply(\"month\", date.month() + 1)\n            .imply(\"year\", date.year());\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { MONTH_DICTIONARY } from \"../constants\";\nimport { ORDINAL_NUMBER_PATTERN, parseOrdinalNumberPattern } from \"../constants\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    \"(?:on\\\\s*?)?\" +\n        `(${ORDINAL_NUMBER_PATTERN})` +\n        \"(?:\\\\s*\" +\n        \"(?:tot|\\\\-|\\\\\u2013|until|through|till|\\\\s)\\\\s*\" +\n        `(${ORDINAL_NUMBER_PATTERN})` +\n        \")?\" +\n        \"(?:-|/|\\\\s*(?:of)?\\\\s*)\" +\n        \"(\" +\n        matchAnyPattern(MONTH_DICTIONARY) +\n        \")\" +\n        \"(?:\" +\n        \"(?:-|/|,?\\\\s*)\" +\n        `(${YEAR_PATTERN}(?![^\\\\s]\\\\d))` +\n        \")?\" +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst MONTH_NAME_GROUP = 3;\nconst DATE_GROUP = 1;\nconst DATE_TO_GROUP = 2;\nconst YEAR_GROUP = 4;\n\n/**\n * The parser for parsing BE/NL date format with month's name in full writing\n *  - 1 januari 2019\n *  - 01 januari 2019\n *  - 10 januari 2019\n *  - 13 januari\n *  - 10 - 25 maart\n *  - 10 - 25 maart 2019\n *  - 1 aug 2019\n *  - 1 september 200 voor Christus\n *  - 1 september 2002 na Christus\n *  - 19 januari 87\n *  - 12de juli 2013\n *  - 1ste november 2013\n */\nexport default class NLMonthNameMiddleEndianParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const month = MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n        const day = parseOrdinalNumberPattern(match[DATE_GROUP]);\n        if (day > 31) {\n            // e.g. \"[96 Aug]\" => \"9[6 Aug]\", we need to shift away from the next number\n            match.index = match.index + match[DATE_GROUP].length;\n            return null;\n        }\n\n        const components = context.createParsingComponents({\n            day: day,\n            month: month,\n        });\n\n        if (match[YEAR_GROUP]) {\n            const year = parseYear(match[YEAR_GROUP]);\n            components.assign(\"year\", year);\n        } else {\n            const year = findYearClosestToRef(context.refDate, day, month);\n            components.imply(\"year\", year);\n        }\n\n        if (!match[DATE_TO_GROUP]) {\n            return components;\n        }\n\n        // Text can be 'range' value. Such as 'January 12 - 13, 2012'\n        const endDate = parseOrdinalNumberPattern(match[DATE_TO_GROUP]);\n        const result = context.createParsingResult(match.index, match[0]);\n        result.start = components;\n        result.end = components.clone();\n        result.end.assign(\"day\", endDate);\n\n        return result;\n    }\n}\n", "import { MONTH_DICTIONARY } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    `(${matchAnyPattern(MONTH_DICTIONARY)})` +\n        `\\\\s*` +\n        `(?:` +\n        `[,-]?\\\\s*(${YEAR_PATTERN})?` +\n        \")?\" +\n        \"(?=[^\\\\s\\\\w]|\\\\s+[^0-9]|\\\\s+$|$)\",\n    \"i\"\n);\n\nconst MONTH_NAME_GROUP = 1;\nconst YEAR_GROUP = 2;\n\n/**\n * The parser for parsing month name and year.\n * - januari, 2012\n * - januari 2012\n * - januari\n */\nexport default class NLMonthNameParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const components = context.createParsingComponents();\n        components.imply(\"day\", 1);\n\n        const monthName = match[MONTH_NAME_GROUP];\n        const month = MONTH_DICTIONARY[monthName.toLowerCase()];\n        components.assign(\"month\", month);\n\n        if (match[YEAR_GROUP]) {\n            const year = parseYear(match[YEAR_GROUP]);\n            components.assign(\"year\", year);\n        } else {\n            const year = findYearClosestToRef(context.refDate, 1, month);\n            components.imply(\"year\", year);\n        }\n\n        return components;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\"([0-9]|0[1-9]|1[012])/([0-9]{4})\" + \"\", \"i\");\n\nconst MONTH_GROUP = 1;\nconst YEAR_GROUP = 2;\n\n/**\n * Month/Year date format with slash \"/\" (also \"-\" and \".\") between numbers\n * - 11/05\n * - 06/2005\n */\nexport default class NLSlashMonthFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const year = parseInt(match[YEAR_GROUP]);\n        const month = parseInt(match[MONTH_GROUP]);\n\n        return context.createParsingComponents().imply(\"day\", 1).assign(\"month\", month).assign(\"year\", year);\n    }\n}\n", "import { AbstractTimeExpressionParser } from \"../../../common/parsers/AbstractTimeExpressionParser\";\nimport { ParsingComponents } from \"../../../results\";\nimport { ParsingContext } from \"../../../chrono\";\n\nexport default class NLTimeExpressionParser extends AbstractTimeExpressionParser {\n    primaryPrefix(): string {\n        return \"(?:(?:om)\\\\s*)?\";\n    }\n\n    followingPhase(): string {\n        return \"\\\\s*(?:\\\\-|\\\\\u2013|\\\\~|\\\\\u301C|om|\\\\?)\\\\s*\";\n    }\n\n    primarySuffix(): string {\n        return \"(?:\\\\s*(?:uur))?(?!/)(?=\\\\W|$)\";\n    }\n\n    extractPrimaryTimeComponents(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | null {\n        // This looks more like a year e.g. 2020\n        if (match[0].match(/^\\s*\\d{4}\\s*$/)) {\n            return null;\n        }\n\n        return super.extractPrimaryTimeComponents(context, match);\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { MONTH_DICTIONARY } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\n/*\n    Date format with slash \"/\" between numbers like ENSlashDateFormatParser,\n    but this parser expect year before month and date.\n    - YYYY/MM/DD\n    - YYYY-MM-DD\n    - YYYY.MM.DD\n*/\nconst PATTERN = new RegExp(\n    `([0-9]{4})[\\\\.\\\\/\\\\s]` +\n        `(?:(${matchAnyPattern(MONTH_DICTIONARY)})|([0-9]{1,2}))[\\\\.\\\\/\\\\s]` +\n        `([0-9]{1,2})` +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst YEAR_NUMBER_GROUP = 1;\nconst MONTH_NAME_GROUP = 2;\nconst MONTH_NUMBER_GROUP = 3;\nconst DATE_NUMBER_GROUP = 4;\n\nexport default class NLCasualYearMonthDayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const month = match[MONTH_NUMBER_GROUP]\n            ? parseInt(match[MONTH_NUMBER_GROUP])\n            : MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n\n        if (month < 1 || month > 12) {\n            return null;\n        }\n\n        const year = parseInt(match[YEAR_NUMBER_GROUP]);\n        const day = parseInt(match[DATE_NUMBER_GROUP]);\n\n        return {\n            day: day,\n            month: month,\n            year: year,\n        };\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { Meridiem } from \"../../../index\";\nimport { assignSimilarDate, assignTheNextDay } from \"../../../utils/dayjs\";\nimport dayjs from \"dayjs\";\n\n/*\n * Find combined words\n * - morgenochtend\n * - morgenmiddag\n * - morgennamiddag\n * - morgenavond\n * - morgennacht\n * - vanochtend\n * - vanmiddag\n * - vannamiddag\n * - vanavond\n * - vannacht\n * - gisterenochtend\n * - gisterenmiddag\n * - gisterennamiddag\n * - gisterenavond\n * - gisterennacht\n * */\n\nconst DATE_GROUP = 1;\nconst TIME_OF_DAY_GROUP = 2;\n\nexport default class NLCasualDateTimeParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return /(gisteren|morgen|van)(ochtend|middag|namiddag|avond|nacht)(?=\\W|$)/i;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        const dateText = match[DATE_GROUP].toLowerCase();\n        const timeText = match[TIME_OF_DAY_GROUP].toLowerCase();\n        const component = context.createParsingComponents();\n        const targetDate = dayjs(context.refDate);\n\n        switch (dateText) {\n            case \"gisteren\":\n                assignSimilarDate(component, targetDate.add(-1, \"day\"));\n                break;\n            case \"van\":\n                assignSimilarDate(component, targetDate);\n                break;\n            case \"morgen\":\n                assignTheNextDay(component, targetDate);\n                break;\n        }\n\n        switch (timeText) {\n            case \"ochtend\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 6);\n                break;\n            case \"middag\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 12);\n                break;\n            case \"namiddag\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 15);\n                break;\n\n            case \"avond\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 20);\n                break;\n        }\n\n        return component;\n    }\n}\n", "import { TIME_UNITS_PATTERN, parseTimeUnits } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nconst PATTERN = new RegExp(`(deze|vorige|afgelopen|komende|over|\\\\+|-)\\\\s*(${TIME_UNITS_PATTERN})(?=\\\\W|$)`, \"i\");\n\nexport default class NLTimeUnitCasualRelativeFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const prefix = match[1].toLowerCase();\n        let timeUnits = parseTimeUnits(match[2]);\n        switch (prefix) {\n            case \"vorige\":\n            case \"afgelopen\":\n            case \"-\":\n                timeUnits = reverseTimeUnits(timeUnits);\n                break;\n        }\n\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n", "import { TIME_UNIT_DICTIONARY } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport dayjs from \"dayjs\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\n\nconst PATTERN = new RegExp(\n    `(dit|deze|komende|volgend|volgende|afgelopen|vorige)\\\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})(?=\\\\s*)` +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst MODIFIER_WORD_GROUP = 1;\nconst RELATIVE_WORD_GROUP = 2;\n\nexport default class NLRelativeDateFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();\n        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();\n        const timeunit = TIME_UNIT_DICTIONARY[unitWord];\n\n        if (modifier == \"volgend\" || modifier == \"volgende\" || modifier == \"komende\") {\n            const timeUnits = {};\n            timeUnits[timeunit] = 1;\n            return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n        }\n\n        if (modifier == \"afgelopen\" || modifier == \"vorige\") {\n            const timeUnits = {};\n            timeUnits[timeunit] = -1;\n            return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n        }\n\n        const components = context.createParsingComponents();\n        let date = dayjs(context.reference.instant);\n\n        // This week\n        if (unitWord.match(/week/i)) {\n            date = date.add(-date.get(\"d\"), \"d\");\n            components.imply(\"day\", date.date());\n            components.imply(\"month\", date.month() + 1);\n            components.imply(\"year\", date.year());\n        }\n\n        // This month\n        else if (unitWord.match(/maand/i)) {\n            date = date.add(-date.date() + 1, \"d\");\n            components.imply(\"day\", date.date());\n            components.assign(\"year\", date.year());\n            components.assign(\"month\", date.month() + 1);\n        }\n\n        // This year\n        else if (unitWord.match(/jaar/i)) {\n            date = date.add(-date.date() + 1, \"d\");\n            date = date.add(-date.month(), \"month\");\n\n            components.imply(\"day\", date.date());\n            components.imply(\"month\", date.month() + 1);\n            components.assign(\"year\", date.year());\n        }\n\n        return components;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { parseTimeUnits, TIME_UNITS_PATTERN } from \"../constants\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nconst PATTERN = new RegExp(\"\" + \"(\" + TIME_UNITS_PATTERN + \")\" + \"(?:geleden|voor|eerder)(?=(?:\\\\W|$))\", \"i\");\n\nconst STRICT_PATTERN = new RegExp(\"\" + \"(\" + TIME_UNITS_PATTERN + \")\" + \"geleden(?=(?:\\\\W|$))\", \"i\");\n\nexport default class NLTimeUnitAgoFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor(private strictMode: boolean) {\n        super();\n    }\n\n    innerPattern(): RegExp {\n        return this.strictMode ? STRICT_PATTERN : PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const timeUnits = parseTimeUnits(match[1]);\n        const outputTimeUnits = reverseTimeUnits(timeUnits);\n\n        return ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { parseTimeUnits, TIME_UNITS_PATTERN } from \"../constants\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    \"\" + \"(\" + TIME_UNITS_PATTERN + \")\" + \"(later|na|vanaf nu|voortaan|vooruit|uit)\" + \"(?=(?:\\\\W|$))\",\n    \"i\"\n);\n\nconst STRICT_PATTERN = new RegExp(\"\" + \"(\" + TIME_UNITS_PATTERN + \")\" + \"(later|vanaf nu)\" + \"(?=(?:\\\\W|$))\", \"i\");\nconst GROUP_NUM_TIMEUNITS = 1;\n\nexport default class NLTimeUnitLaterFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor(private strictMode: boolean) {\n        super();\n    }\n\n    innerPattern(): RegExp {\n        return this.strictMode ? STRICT_PATTERN : PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const fragments = parseTimeUnits(match[GROUP_NUM_TIMEUNITS]);\n        return ParsingComponents.createRelativeFromReference(context.reference, fragments);\n    }\n}\n", "/**\n * Chrono components for Dutch support (*parsers*, *refiners*, and *configuration*)\n *\n * @module\n */\n\nimport { includeCommonConfiguration } from \"../../configurations\";\nimport { ParsedResult, ParsingOption } from \"../../index\";\nimport { Chrono, Configuration } from \"../../chrono\";\nimport NLMergeDateRangeRefiner from \"./refiners/NLMergeDateRangeRefiner\";\nimport NLMergeDateTimeRefiner from \"./refiners/NLMergeDateTimeRefiner\";\nimport NLCasualDateParser from \"./parsers/NLCasualDateParser\";\nimport NLCasualTimeParser from \"./parsers/NLCasualTimeParser\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser\";\nimport NLTimeUnitWithinFormatParser from \"./parsers/NLTimeUnitWithinFormatParser\";\nimport NLWeekdayParser from \"./parsers/NLWeekdayParser\";\nimport NLMonthNameMiddleEndianParser from \"./parsers/NLMonthNameMiddleEndianParser\";\nimport NLMonthNameParser from \"./parsers/NLMonthNameParser\";\nimport NLSlashMonthFormatParser from \"./parsers/NLSlashMonthFormatParser\";\nimport NLTimeExpressionParser from \"./parsers/NLTimeExpressionParser\";\nimport NLCasualYearMonthDayParser from \"./parsers/NLCasualYearMonthDayParser\";\nimport NLCasualDateTimeParser from \"./parsers/NLCasualDateTimeParser\";\nimport NLTimeUnitCasualRelativeFormatParser from \"./parsers/NLTimeUnitCasualRelativeFormatParser\";\nimport NLRelativeDateFormatParser from \"./parsers/NLRelativeDateFormatParser\";\nimport NLTimeUnitAgoFormatParser from \"./parsers/NLTimeUnitAgoFormatParser\";\nimport NLTimeUnitLaterFormatParser from \"./parsers/NLTimeUnitLaterFormatParser\";\n\n// Shortcuts\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration(true));\n\nexport function parse(text: string, ref?: Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\nexport function parseDate(text: string, ref?: Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\nexport function createCasualConfiguration(littleEndian = true): Configuration {\n    const option = createConfiguration(false, littleEndian);\n    option.parsers.unshift(new NLCasualDateParser());\n    option.parsers.unshift(new NLCasualTimeParser());\n    option.parsers.unshift(new NLCasualDateTimeParser());\n    option.parsers.unshift(new NLMonthNameParser());\n    option.parsers.unshift(new NLRelativeDateFormatParser());\n    option.parsers.unshift(new NLTimeUnitCasualRelativeFormatParser());\n    return option;\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createConfiguration(strictMode = true, littleEndian = true): Configuration {\n    return includeCommonConfiguration(\n        {\n            parsers: [\n                new SlashDateFormatParser(littleEndian),\n                new NLTimeUnitWithinFormatParser(),\n                new NLMonthNameMiddleEndianParser(),\n                new NLMonthNameParser(),\n                new NLWeekdayParser(),\n                new NLCasualYearMonthDayParser(),\n                new NLSlashMonthFormatParser(),\n                new NLTimeExpressionParser(strictMode),\n                new NLTimeUnitAgoFormatParser(strictMode),\n                new NLTimeUnitLaterFormatParser(strictMode),\n            ],\n            refiners: [new NLMergeDateTimeRefiner(), new NLMergeDateRangeRefiner()],\n        },\n        strictMode\n    );\n}\n", "import dayjs from \"dayjs\";\nimport { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { ParsingComponents, ParsingResult } from \"../../../../results\";\n\nconst NOW_GROUP = 1;\nconst DAY_GROUP_1 = 2;\nconst TIME_GROUP_1 = 3;\nconst TIME_GROUP_2 = 4;\nconst DAY_GROUP_3 = 5;\nconst TIME_GROUP_3 = 6;\n\nexport default class ZHHantCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return new RegExp(\n            \"(\u800C\u5BB6|\u7ACB(?:\u523B|\u5373)|\u5373\u523B)|\" +\n                \"(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(\u65E9|\u671D|\u665A)|\" +\n                \"(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|\" +\n                \"(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(?:\u65E5|\u5929)\" +\n                \"(?:[\\\\s|,|\uFF0C]*)\" +\n                \"(?:(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?\",\n            \"i\"\n        );\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        const index = match.index;\n        const result = context.createParsingResult(index, match[0]);\n\n        const refMoment = dayjs(context.refDate);\n        let startMoment = refMoment;\n\n        if (match[NOW_GROUP]) {\n            result.start.imply(\"hour\", refMoment.hour());\n            result.start.imply(\"minute\", refMoment.minute());\n            result.start.imply(\"second\", refMoment.second());\n            result.start.imply(\"millisecond\", refMoment.millisecond());\n        } else if (match[DAY_GROUP_1]) {\n            const day1 = match[DAY_GROUP_1];\n            const time1 = match[TIME_GROUP_1];\n\n            if (day1 == \"\u660E\" || day1 == \"\u807D\") {\n                // Check not \"Tomorrow\" on late night\n                if (refMoment.hour() > 1) {\n                    startMoment = startMoment.add(1, \"day\");\n                }\n            } else if (day1 == \"\u6628\" || day1 == \"\u5C0B\" || day1 == \"\u7434\") {\n                startMoment = startMoment.add(-1, \"day\");\n            } else if (day1 == \"\u524D\") {\n                startMoment = startMoment.add(-2, \"day\");\n            } else if (day1 == \"\u5927\u524D\") {\n                startMoment = startMoment.add(-3, \"day\");\n            } else if (day1 == \"\u5F8C\") {\n                startMoment = startMoment.add(2, \"day\");\n            } else if (day1 == \"\u5927\u5F8C\") {\n                startMoment = startMoment.add(3, \"day\");\n            }\n\n            if (time1 == \"\u65E9\" || time1 == \"\u671D\") {\n                result.start.imply(\"hour\", 6);\n            } else if (time1 == \"\u665A\") {\n                result.start.imply(\"hour\", 22);\n                result.start.imply(\"meridiem\", 1);\n            }\n        } else if (match[TIME_GROUP_2]) {\n            const timeString2 = match[TIME_GROUP_2];\n            const time2 = timeString2[0];\n            if (time2 == \"\u65E9\" || time2 == \"\u671D\" || time2 == \"\u4E0A\") {\n                result.start.imply(\"hour\", 6);\n            } else if (time2 == \"\u4E0B\" || time2 == \"\u664F\") {\n                result.start.imply(\"hour\", 15);\n                result.start.imply(\"meridiem\", 1);\n            } else if (time2 == \"\u4E2D\") {\n                result.start.imply(\"hour\", 12);\n                result.start.imply(\"meridiem\", 1);\n            } else if (time2 == \"\u591C\" || time2 == \"\u665A\") {\n                result.start.imply(\"hour\", 22);\n                result.start.imply(\"meridiem\", 1);\n            } else if (time2 == \"\u51CC\") {\n                result.start.imply(\"hour\", 0);\n            }\n        } else if (match[DAY_GROUP_3]) {\n            const day3 = match[DAY_GROUP_3];\n\n            if (day3 == \"\u660E\" || day3 == \"\u807D\") {\n                // Check not \"Tomorrow\" on late night\n                if (refMoment.hour() > 1) {\n                    startMoment = startMoment.add(1, \"day\");\n                }\n            } else if (day3 == \"\u6628\" || day3 == \"\u5C0B\" || day3 == \"\u7434\") {\n                startMoment = startMoment.add(-1, \"day\");\n            } else if (day3 == \"\u524D\") {\n                startMoment = startMoment.add(-2, \"day\");\n            } else if (day3 == \"\u5927\u524D\") {\n                startMoment = startMoment.add(-3, \"day\");\n            } else if (day3 == \"\u5F8C\") {\n                startMoment = startMoment.add(2, \"day\");\n            } else if (day3 == \"\u5927\u5F8C\") {\n                startMoment = startMoment.add(3, \"day\");\n            }\n\n            const timeString3 = match[TIME_GROUP_3];\n            if (timeString3) {\n                const time3 = timeString3[0];\n                if (time3 == \"\u65E9\" || time3 == \"\u671D\" || time3 == \"\u4E0A\") {\n                    result.start.imply(\"hour\", 6);\n                } else if (time3 == \"\u4E0B\" || time3 == \"\u664F\") {\n                    result.start.imply(\"hour\", 15);\n                    result.start.imply(\"meridiem\", 1);\n                } else if (time3 == \"\u4E2D\") {\n                    result.start.imply(\"hour\", 12);\n                    result.start.imply(\"meridiem\", 1);\n                } else if (time3 == \"\u591C\" || time3 == \"\u665A\") {\n                    result.start.imply(\"hour\", 22);\n                    result.start.imply(\"meridiem\", 1);\n                } else if (time3 == \"\u51CC\") {\n                    result.start.imply(\"hour\", 0);\n                }\n            }\n        }\n\n        result.start.assign(\"day\", startMoment.date());\n        result.start.assign(\"month\", startMoment.month() + 1);\n        result.start.assign(\"year\", startMoment.year());\n\n        return result;\n    }\n}\n", "export const NUMBER = {\n    \"\u96F6\": 0,\n    \"\u4E00\": 1,\n    \"\u4E8C\": 2,\n    \"\u5169\": 2,\n    \"\u4E09\": 3,\n    \"\u56DB\": 4,\n    \"\u4E94\": 5,\n    \"\u516D\": 6,\n    \"\u4E03\": 7,\n    \"\u516B\": 8,\n    \"\u4E5D\": 9,\n    \"\u5341\": 10,\n    \"\u5EFF\": 20,\n    \"\u5345\": 30,\n};\n\nexport const WEEKDAY_OFFSET = {\n    \"\u5929\": 0,\n    \"\u65E5\": 0,\n    \"\u4E00\": 1,\n    \"\u4E8C\": 2,\n    \"\u4E09\": 3,\n    \"\u56DB\": 4,\n    \"\u4E94\": 5,\n    \"\u516D\": 6,\n};\n\nexport function zhStringToNumber(text: string) {\n    let number = 0;\n\n    for (let i = 0; i < text.length; i++) {\n        const char = text[i];\n        if (char === \"\u5341\") {\n            number = number === 0 ? NUMBER[char] : number * NUMBER[char];\n        } else {\n            number += NUMBER[char];\n        }\n    }\n\n    return number;\n}\n\nexport function zhStringToYear(text: string) {\n    let string = \"\";\n\n    for (let i = 0; i < text.length; i++) {\n        const char = text[i];\n        string = string + NUMBER[char];\n    }\n\n    return parseInt(string);\n}\n", "import dayjs from \"dayjs\";\nimport { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { NUMBER, zhStringToNumber, zhStringToYear } from \"../constants\";\n\nconst YEAR_GROUP = 1;\nconst MONTH_GROUP = 2;\nconst DAY_GROUP = 3;\n\nexport default class ZHHantDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        // prettier-ignore\n        return new RegExp(\n            \"(\" +\n                \"\\\\d{2,4}|\" +\n                \"[\" + Object.keys(NUMBER).join(\"\") + \"]{4}|\" +\n                \"[\" + Object.keys(NUMBER).join(\"\") + \"]{2}\" +\n            \")?\"+\n            \"(?:\\\\s*)\" +\n            \"(?:\u5E74)?\" +\n            \"(?:[\\\\s|,|\uFF0C]*)\" +\n\n            \"(\" +\n                \"\\\\d{1,2}|\"+\n                \"[\" +Object.keys(NUMBER).join(\"\") +\"]{1,2}\"+\n            \")\" +\n            \"(?:\\\\s*)\" +\n            \"(?:\u6708)\" +\n            \"(?:\\\\s*)\" +\n            \"(\" + \n                \"\\\\d{1,2}|\" +\n                \"[\" + Object.keys(NUMBER).join(\"\") + \"]{1,2}\" +\n            \")?\" +\n            \"(?:\\\\s*)\" +\n            \"(?:\u65E5|\u865F)?\"\n        );\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const startMoment = dayjs(context.refDate);\n        const result = context.createParsingResult(match.index, match[0]);\n\n        //Month\n        let month = parseInt(match[MONTH_GROUP]);\n        if (isNaN(month)) month = zhStringToNumber(match[MONTH_GROUP]);\n        result.start.assign(\"month\", month);\n\n        //Day\n        if (match[DAY_GROUP]) {\n            let day = parseInt(match[DAY_GROUP]);\n            if (isNaN(day)) day = zhStringToNumber(match[DAY_GROUP]);\n            result.start.assign(\"day\", day);\n        } else {\n            result.start.imply(\"day\", startMoment.date());\n        }\n\n        //Year\n        if (match[YEAR_GROUP]) {\n            let year = parseInt(match[YEAR_GROUP]);\n            if (isNaN(year)) year = zhStringToYear(match[YEAR_GROUP]);\n            result.start.assign(\"year\", year);\n        } else {\n            result.start.imply(\"year\", startMoment.year());\n        }\n\n        return result;\n    }\n}\n", "import dayjs from \"dayjs\";\nimport { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { NUMBER, zhStringToNumber } from \"../constants\";\n\nconst PATTERN = new RegExp(\n    \"(\\\\d+|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+|\u534A|\u5E7E)(?:\\\\s*)\" +\n        \"(?:\u500B)?\" +\n        \"(\u79D2(?:\u9418)?|\u5206\u9418|\u5C0F\u6642|\u9418|\u65E5|\u5929|\u661F\u671F|\u79AE\u62DC|\u6708|\u5E74)\" +\n        \"(?:(?:\u4E4B|\u904E)?\u5F8C|(?:\u4E4B)?\u5167)\",\n    \"i\"\n);\n\nconst NUMBER_GROUP = 1;\nconst UNIT_GROUP = 2;\n\nexport default class ZHHantDeadlineFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const result = context.createParsingResult(match.index, match[0]);\n\n        let number = parseInt(match[NUMBER_GROUP]);\n        if (isNaN(number)) {\n            number = zhStringToNumber(match[NUMBER_GROUP]);\n        }\n\n        if (isNaN(number)) {\n            const string = match[NUMBER_GROUP];\n            if (string === \"\u5E7E\") {\n                number = 3;\n            } else if (string === \"\u534A\") {\n                number = 0.5;\n            } else {\n                //just in case\n                return null;\n            }\n        }\n\n        let date = dayjs(context.refDate);\n        const unit = match[UNIT_GROUP];\n        const unitAbbr = unit[0];\n\n        if (unitAbbr.match(/[\u65E5\u5929\u661F\u79AE\u6708\u5E74]/)) {\n            if (unitAbbr == \"\u65E5\" || unitAbbr == \"\u5929\") {\n                date = date.add(number, \"d\");\n            } else if (unitAbbr == \"\u661F\" || unitAbbr == \"\u79AE\") {\n                date = date.add(number * 7, \"d\");\n            } else if (unitAbbr == \"\u6708\") {\n                date = date.add(number, \"month\");\n            } else if (unitAbbr == \"\u5E74\") {\n                date = date.add(number, \"year\");\n            }\n\n            result.start.assign(\"year\", date.year());\n            result.start.assign(\"month\", date.month() + 1);\n            result.start.assign(\"day\", date.date());\n            return result;\n        }\n\n        if (unitAbbr == \"\u79D2\") {\n            date = date.add(number, \"second\");\n        } else if (unitAbbr == \"\u5206\") {\n            date = date.add(number, \"minute\");\n        } else if (unitAbbr == \"\u5C0F\" || unitAbbr == \"\u9418\") {\n            date = date.add(number, \"hour\");\n        }\n\n        result.start.imply(\"year\", date.year());\n        result.start.imply(\"month\", date.month() + 1);\n        result.start.imply(\"day\", date.date());\n        result.start.assign(\"hour\", date.hour());\n        result.start.assign(\"minute\", date.minute());\n        result.start.assign(\"second\", date.second());\n        return result;\n    }\n}\n", "import dayjs from \"dayjs\";\nimport { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { ParsingResult } from \"../../../../results\";\nimport { WEEKDAY_OFFSET } from \"../constants\";\n\nconst PATTERN = new RegExp(\n    \"(?<prefix>\u4E0A|\u4ECA|\u4E0B|\u9019|\u5462)(?:\u500B)?(?:\u661F\u671F|\u79AE\u62DC|\u9031)(?<weekday>\" + Object.keys(WEEKDAY_OFFSET).join(\"|\") + \")\"\n);\n\nexport default class ZHHantRelationWeekdayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        const result = context.createParsingResult(match.index, match[0]);\n\n        const dayOfWeek = match.groups.weekday;\n        const offset = WEEKDAY_OFFSET[dayOfWeek];\n        if (offset === undefined) return null;\n\n        let modifier = null;\n        const prefix = match.groups.prefix;\n\n        if (prefix == \"\u4E0A\") {\n            modifier = \"last\";\n        } else if (prefix == \"\u4E0B\") {\n            modifier = \"next\";\n        } else if (prefix == \"\u4ECA\" || prefix == \"\u9019\" || prefix == \"\u5462\") {\n            modifier = \"this\";\n        }\n\n        let startMoment = dayjs(context.refDate);\n        let startMomentFixed = false;\n        const refOffset = startMoment.day();\n\n        if (modifier == \"last\" || modifier == \"past\") {\n            startMoment = startMoment.day(offset - 7);\n            startMomentFixed = true;\n        } else if (modifier == \"next\") {\n            startMoment = startMoment.day(offset + 7);\n            startMomentFixed = true;\n        } else if (modifier == \"this\") {\n            startMoment = startMoment.day(offset);\n        } else {\n            if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {\n                startMoment = startMoment.day(offset - 7);\n            } else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {\n                startMoment = startMoment.day(offset + 7);\n            } else {\n                startMoment = startMoment.day(offset);\n            }\n        }\n\n        result.start.assign(\"weekday\", offset);\n        if (startMomentFixed) {\n            result.start.assign(\"day\", startMoment.date());\n            result.start.assign(\"month\", startMoment.month() + 1);\n            result.start.assign(\"year\", startMoment.year());\n        } else {\n            result.start.imply(\"day\", startMoment.date());\n            result.start.imply(\"month\", startMoment.month() + 1);\n            result.start.imply(\"year\", startMoment.year());\n        }\n\n        return result;\n    }\n}\n", "import dayjs from \"dayjs\";\nimport { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { NUMBER, zhStringToNumber } from \"../constants\";\n\nconst FIRST_REG_PATTERN = new RegExp(\n    \"(?:\u7531|\u5F9E|\u81EA)?\" +\n        \"(?:\" +\n        \"(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(\u65E9|\u671D|\u665A)|\" +\n        \"(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|\" +\n        \"(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(?:\u65E5|\u5929)\" +\n        \"(?:[\\\\s,\uFF0C]*)\" +\n        \"(?:(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?\" +\n        \")?\" +\n        \"(?:[\\\\s,\uFF0C]*)\" +\n        \"(?:(\\\\d+|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)(?:\\\\s*)(?:\u9EDE|\u6642|:|\uFF1A)\" +\n        \"(?:\\\\s*)\" +\n        \"(\\\\d+|\u534A|\u6B63|\u6574|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)?(?:\\\\s*)(?:\u5206|:|\uFF1A)?\" +\n        \"(?:\\\\s*)\" +\n        \"(\\\\d+|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)?(?:\\\\s*)(?:\u79D2)?)\" +\n        \"(?:\\\\s*(A.M.|P.M.|AM?|PM?))?\",\n    \"i\"\n);\n\nconst SECOND_REG_PATTERN = new RegExp(\n    \"(?:^\\\\s*(?:\u5230|\u81F3|\\\\-|\\\\\u2013|\\\\~|\\\\\u301C)\\\\s*)\" +\n        \"(?:\" +\n        \"(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(\u65E9|\u671D|\u665A)|\" +\n        \"(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|\" +\n        \"(\u4ECA|\u660E|\u524D|\u5927\u524D|\u5F8C|\u5927\u5F8C|\u807D|\u6628|\u5C0B|\u7434)(?:\u65E5|\u5929)\" +\n        \"(?:[\\\\s,\uFF0C]*)\" +\n        \"(?:(\u4E0A(?:\u5348|\u665D)|\u671D(?:\u65E9)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348|\u665D)|\u664F(?:\u665D)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?\" +\n        \")?\" +\n        \"(?:[\\\\s,\uFF0C]*)\" +\n        \"(?:(\\\\d+|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)(?:\\\\s*)(?:\u9EDE|\u6642|:|\uFF1A)\" +\n        \"(?:\\\\s*)\" +\n        \"(\\\\d+|\u534A|\u6B63|\u6574|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)?(?:\\\\s*)(?:\u5206|:|\uFF1A)?\" +\n        \"(?:\\\\s*)\" +\n        \"(\\\\d+|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)?(?:\\\\s*)(?:\u79D2)?)\" +\n        \"(?:\\\\s*(A.M.|P.M.|AM?|PM?))?\",\n    \"i\"\n);\n\nconst DAY_GROUP_1 = 1;\nconst ZH_AM_PM_HOUR_GROUP_1 = 2;\nconst ZH_AM_PM_HOUR_GROUP_2 = 3;\nconst DAY_GROUP_3 = 4;\nconst ZH_AM_PM_HOUR_GROUP_3 = 5;\nconst HOUR_GROUP = 6;\nconst MINUTE_GROUP = 7;\nconst SECOND_GROUP = 8;\nconst AM_PM_HOUR_GROUP = 9;\n\nexport default class ZHHantTimeExpressionParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return FIRST_REG_PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        // This pattern can be overlaped Ex. [12] AM, 1[2] AM\n        if (match.index > 0 && context.text[match.index - 1].match(/\\w/)) {\n            return null;\n        }\n\n        const refMoment = dayjs(context.refDate);\n        const result = context.createParsingResult(match.index, match[0]);\n        const startMoment = refMoment.clone();\n\n        // ----- Day\n        if (match[DAY_GROUP_1]) {\n            var day1 = match[DAY_GROUP_1];\n            if (day1 == \"\u660E\" || day1 == \"\u807D\") {\n                // Check not \"Tomorrow\" on late night\n                if (refMoment.hour() > 1) {\n                    startMoment.add(1, \"day\");\n                }\n            } else if (day1 == \"\u6628\" || day1 == \"\u5C0B\" || day1 == \"\u7434\") {\n                startMoment.add(-1, \"day\");\n            } else if (day1 == \"\u524D\") {\n                startMoment.add(-2, \"day\");\n            } else if (day1 == \"\u5927\u524D\") {\n                startMoment.add(-3, \"day\");\n            } else if (day1 == \"\u5F8C\") {\n                startMoment.add(2, \"day\");\n            } else if (day1 == \"\u5927\u5F8C\") {\n                startMoment.add(3, \"day\");\n            }\n            result.start.assign(\"day\", startMoment.date());\n            result.start.assign(\"month\", startMoment.month() + 1);\n            result.start.assign(\"year\", startMoment.year());\n        } else if (match[DAY_GROUP_3]) {\n            var day3 = match[DAY_GROUP_3];\n            if (day3 == \"\u660E\" || day3 == \"\u807D\") {\n                startMoment.add(1, \"day\");\n            } else if (day3 == \"\u6628\" || day3 == \"\u5C0B\" || day3 == \"\u7434\") {\n                startMoment.add(-1, \"day\");\n            } else if (day3 == \"\u524D\") {\n                startMoment.add(-2, \"day\");\n            } else if (day3 == \"\u5927\u524D\") {\n                startMoment.add(-3, \"day\");\n            } else if (day3 == \"\u5F8C\") {\n                startMoment.add(2, \"day\");\n            } else if (day3 == \"\u5927\u5F8C\") {\n                startMoment.add(3, \"day\");\n            }\n            result.start.assign(\"day\", startMoment.date());\n            result.start.assign(\"month\", startMoment.month() + 1);\n            result.start.assign(\"year\", startMoment.year());\n        } else {\n            result.start.imply(\"day\", startMoment.date());\n            result.start.imply(\"month\", startMoment.month() + 1);\n            result.start.imply(\"year\", startMoment.year());\n        }\n\n        let hour = 0;\n        let minute = 0;\n        let meridiem = -1;\n\n        // ----- Second\n        if (match[SECOND_GROUP]) {\n            var second = parseInt(match[SECOND_GROUP]);\n            if (isNaN(second)) {\n                second = zhStringToNumber(match[SECOND_GROUP]);\n            }\n            if (second >= 60) return null;\n            result.start.assign(\"second\", second);\n        }\n\n        hour = parseInt(match[HOUR_GROUP]);\n        if (isNaN(hour)) {\n            hour = zhStringToNumber(match[HOUR_GROUP]);\n        }\n\n        // ----- Minutes\n        if (match[MINUTE_GROUP]) {\n            if (match[MINUTE_GROUP] == \"\u534A\") {\n                minute = 30;\n            } else if (match[MINUTE_GROUP] == \"\u6B63\" || match[MINUTE_GROUP] == \"\u6574\") {\n                minute = 0;\n            } else {\n                minute = parseInt(match[MINUTE_GROUP]);\n                if (isNaN(minute)) {\n                    minute = zhStringToNumber(match[MINUTE_GROUP]);\n                }\n            }\n        } else if (hour > 100) {\n            minute = hour % 100;\n            hour = Math.floor(hour / 100);\n        }\n\n        if (minute >= 60) {\n            return null;\n        }\n\n        if (hour > 24) {\n            return null;\n        }\n        if (hour >= 12) {\n            meridiem = 1;\n        }\n\n        // ----- AM & PM\n        if (match[AM_PM_HOUR_GROUP]) {\n            if (hour > 12) return null;\n            var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n            if (ampm == \"a\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            }\n\n            if (ampm == \"p\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        } else if (match[ZH_AM_PM_HOUR_GROUP_1]) {\n            var zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];\n            var zhAMPM1 = zhAMPMString1[0];\n            if (zhAMPM1 == \"\u671D\" || zhAMPM1 == \"\u65E9\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM1 == \"\u665A\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        } else if (match[ZH_AM_PM_HOUR_GROUP_2]) {\n            var zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];\n            var zhAMPM2 = zhAMPMString2[0];\n            if (zhAMPM2 == \"\u4E0A\" || zhAMPM2 == \"\u671D\" || zhAMPM2 == \"\u65E9\" || zhAMPM2 == \"\u51CC\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM2 == \"\u4E0B\" || zhAMPM2 == \"\u664F\" || zhAMPM2 == \"\u665A\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        } else if (match[ZH_AM_PM_HOUR_GROUP_3]) {\n            var zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];\n            var zhAMPM3 = zhAMPMString3[0];\n            if (zhAMPM3 == \"\u4E0A\" || zhAMPM3 == \"\u671D\" || zhAMPM3 == \"\u65E9\" || zhAMPM3 == \"\u51CC\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM3 == \"\u4E0B\" || zhAMPM3 == \"\u664F\" || zhAMPM3 == \"\u665A\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        }\n\n        result.start.assign(\"hour\", hour);\n        result.start.assign(\"minute\", minute);\n\n        if (meridiem >= 0) {\n            result.start.assign(\"meridiem\", meridiem);\n        } else {\n            if (hour < 12) {\n                result.start.imply(\"meridiem\", 0);\n            } else {\n                result.start.imply(\"meridiem\", 1);\n            }\n        }\n\n        // ==============================================================\n        //                  Extracting the 'to' chunk\n        // ==============================================================\n\n        match = SECOND_REG_PATTERN.exec(context.text.substring(result.index + result.text.length));\n        if (!match) {\n            // Not accept number only result\n            if (result.text.match(/^\\d+$/)) {\n                return null;\n            }\n            return result;\n        }\n\n        const endMoment = startMoment.clone();\n        result.end = context.createParsingComponents();\n\n        // ----- Day\n        if (match[DAY_GROUP_1]) {\n            var day1 = match[DAY_GROUP_1];\n            if (day1 == \"\u660E\" || day1 == \"\u807D\") {\n                // Check not \"Tomorrow\" on late night\n                if (refMoment.hour() > 1) {\n                    endMoment.add(1, \"day\");\n                }\n            } else if (day1 == \"\u6628\" || day1 == \"\u5C0B\" || day1 == \"\u7434\") {\n                endMoment.add(-1, \"day\");\n            } else if (day1 == \"\u524D\") {\n                endMoment.add(-2, \"day\");\n            } else if (day1 == \"\u5927\u524D\") {\n                endMoment.add(-3, \"day\");\n            } else if (day1 == \"\u5F8C\") {\n                endMoment.add(2, \"day\");\n            } else if (day1 == \"\u5927\u5F8C\") {\n                endMoment.add(3, \"day\");\n            }\n            result.end.assign(\"day\", endMoment.date());\n            result.end.assign(\"month\", endMoment.month() + 1);\n            result.end.assign(\"year\", endMoment.year());\n        } else if (match[DAY_GROUP_3]) {\n            var day3 = match[DAY_GROUP_3];\n            if (day3 == \"\u660E\" || day3 == \"\u807D\") {\n                endMoment.add(1, \"day\");\n            } else if (day3 == \"\u6628\" || day3 == \"\u5C0B\" || day3 == \"\u7434\") {\n                endMoment.add(-1, \"day\");\n            } else if (day3 == \"\u524D\") {\n                endMoment.add(-2, \"day\");\n            } else if (day3 == \"\u5927\u524D\") {\n                endMoment.add(-3, \"day\");\n            } else if (day3 == \"\u5F8C\") {\n                endMoment.add(2, \"day\");\n            } else if (day3 == \"\u5927\u5F8C\") {\n                endMoment.add(3, \"day\");\n            }\n            result.end.assign(\"day\", endMoment.date());\n            result.end.assign(\"month\", endMoment.month() + 1);\n            result.end.assign(\"year\", endMoment.year());\n        } else {\n            result.end.imply(\"day\", endMoment.date());\n            result.end.imply(\"month\", endMoment.month() + 1);\n            result.end.imply(\"year\", endMoment.year());\n        }\n\n        hour = 0;\n        minute = 0;\n        meridiem = -1;\n\n        // ----- Second\n        if (match[SECOND_GROUP]) {\n            var second = parseInt(match[SECOND_GROUP]);\n            if (isNaN(second)) {\n                second = zhStringToNumber(match[SECOND_GROUP]);\n            }\n\n            if (second >= 60) return null;\n            result.end.assign(\"second\", second);\n        }\n\n        hour = parseInt(match[HOUR_GROUP]);\n        if (isNaN(hour)) {\n            hour = zhStringToNumber(match[HOUR_GROUP]);\n        }\n\n        // ----- Minutes\n        if (match[MINUTE_GROUP]) {\n            if (match[MINUTE_GROUP] == \"\u534A\") {\n                minute = 30;\n            } else if (match[MINUTE_GROUP] == \"\u6B63\" || match[MINUTE_GROUP] == \"\u6574\") {\n                minute = 0;\n            } else {\n                minute = parseInt(match[MINUTE_GROUP]);\n                if (isNaN(minute)) {\n                    minute = zhStringToNumber(match[MINUTE_GROUP]);\n                }\n            }\n        } else if (hour > 100) {\n            minute = hour % 100;\n            hour = Math.floor(hour / 100);\n        }\n\n        if (minute >= 60) {\n            return null;\n        }\n\n        if (hour > 24) {\n            return null;\n        }\n        if (hour >= 12) {\n            meridiem = 1;\n        }\n\n        // ----- AM & PM\n        if (match[AM_PM_HOUR_GROUP]) {\n            if (hour > 12) return null;\n            var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n            if (ampm == \"a\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            }\n\n            if (ampm == \"p\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n\n            if (!result.start.isCertain(\"meridiem\")) {\n                if (meridiem == 0) {\n                    result.start.imply(\"meridiem\", 0);\n\n                    if (result.start.get(\"hour\") == 12) {\n                        result.start.assign(\"hour\", 0);\n                    }\n                } else {\n                    result.start.imply(\"meridiem\", 1);\n\n                    if (result.start.get(\"hour\") != 12) {\n                        result.start.assign(\"hour\", result.start.get(\"hour\") + 12);\n                    }\n                }\n            }\n        } else if (match[ZH_AM_PM_HOUR_GROUP_1]) {\n            var zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];\n            var zhAMPM1 = zhAMPMString1[0];\n            if (zhAMPM1 == \"\u671D\" || zhAMPM1 == \"\u65E9\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM1 == \"\u665A\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        } else if (match[ZH_AM_PM_HOUR_GROUP_2]) {\n            var zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];\n            var zhAMPM2 = zhAMPMString2[0];\n            if (zhAMPM2 == \"\u4E0A\" || zhAMPM2 == \"\u671D\" || zhAMPM2 == \"\u65E9\" || zhAMPM2 == \"\u51CC\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM2 == \"\u4E0B\" || zhAMPM2 == \"\u664F\" || zhAMPM2 == \"\u665A\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        } else if (match[ZH_AM_PM_HOUR_GROUP_3]) {\n            var zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];\n            var zhAMPM3 = zhAMPMString3[0];\n            if (zhAMPM3 == \"\u4E0A\" || zhAMPM3 == \"\u671D\" || zhAMPM3 == \"\u65E9\" || zhAMPM3 == \"\u51CC\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM3 == \"\u4E0B\" || zhAMPM3 == \"\u664F\" || zhAMPM3 == \"\u665A\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        }\n\n        result.text = result.text + match[0];\n        result.end.assign(\"hour\", hour);\n        result.end.assign(\"minute\", minute);\n        if (meridiem >= 0) {\n            result.end.assign(\"meridiem\", meridiem);\n        } else {\n            const startAtPM = result.start.isCertain(\"meridiem\") && result.start.get(\"meridiem\") == 1;\n            if (startAtPM && result.start.get(\"hour\") > hour) {\n                // 10pm - 1 (am)\n                result.end.imply(\"meridiem\", 0);\n            } else if (hour > 12) {\n                result.end.imply(\"meridiem\", 1);\n            }\n        }\n\n        if (result.end.date().getTime() < result.start.date().getTime()) {\n            result.end.imply(\"day\", result.end.get(\"day\") + 1);\n        }\n\n        return result;\n    }\n}\n", "import dayjs from \"dayjs\";\nimport { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { ParsingResult } from \"../../../../results\";\nimport { WEEKDAY_OFFSET } from \"../constants\";\n\nconst PATTERN = new RegExp(\"(?:\u661F\u671F|\u79AE\u62DC|\u9031)(?<weekday>\" + Object.keys(WEEKDAY_OFFSET).join(\"|\") + \")\");\n\nexport default class ZHHantWeekdayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        const result = context.createParsingResult(match.index, match[0]);\n\n        const dayOfWeek = match.groups.weekday;\n        const offset = WEEKDAY_OFFSET[dayOfWeek];\n        if (offset === undefined) return null;\n\n        let startMoment = dayjs(context.refDate);\n        const startMomentFixed = false;\n        const refOffset = startMoment.day();\n\n        if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {\n            startMoment = startMoment.day(offset - 7);\n        } else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {\n            startMoment = startMoment.day(offset + 7);\n        } else {\n            startMoment = startMoment.day(offset);\n        }\n\n        result.start.assign(\"weekday\", offset);\n        if (startMomentFixed) {\n            result.start.assign(\"day\", startMoment.date());\n            result.start.assign(\"month\", startMoment.month() + 1);\n            result.start.assign(\"year\", startMoment.year());\n        } else {\n            result.start.imply(\"day\", startMoment.date());\n            result.start.imply(\"month\", startMoment.month() + 1);\n            result.start.imply(\"year\", startMoment.year());\n        }\n\n        return result;\n    }\n}\n", "import AbstractMergeDateRangeRefiner from \"../../../../common/refiners/AbstractMergeDateRangeRefiner\";\n\nexport default class ZHHantMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner {\n    patternBetween(): RegExp {\n        return /^\\s*(\u81F3|\u5230|\\-|\\~|\uFF5E|\uFF0D|\u30FC)\\s*$/i;\n    }\n}\n", "import AbstractMergeDateTimeRefiner from \"../../../../common/refiners/AbstractMergeDateTimeRefiner\";\n\nexport default class ZHHantMergeDateTimeRefiner extends AbstractMergeDateTimeRefiner {\n    patternBetween(): RegExp {\n        return /^\\s*$/i;\n    }\n}\n", "/**\n * Chrono components for zh support\n * TODO: Complete general zh support (current support only zh-Hant)\n */\n\nimport { Chrono, Configuration } from \"../../../chrono\";\nimport ExtractTimezoneOffsetRefiner from \"../../../common/refiners/ExtractTimezoneOffsetRefiner\";\nimport { includeCommonConfiguration } from \"../../../configurations\";\nimport { ParsedResult, ParsingOption } from \"../../../index\";\nimport ZHHantCasualDateParser from \"./parsers/ZHHantCasualDateParser\";\nimport ZHHantDateParser from \"./parsers/ZHHantDateParser\";\nimport ZHHantDeadlineFormatParser from \"./parsers/ZHHantDeadlineFormatParser\";\nimport ZHHantRelationWeekdayParser from \"./parsers/ZHHantRelationWeekdayParser\";\nimport ZHHantTimeExpressionParser from \"./parsers/ZHHantTimeExpressionParser\";\nimport ZHHantWeekdayParser from \"./parsers/ZHHantWeekdayParser\";\nimport ZHHantMergeDateRangeRefiner from \"./refiners/ZHHantMergeDateRangeRefiner\";\nimport ZHHantMergeDateTimeRefiner from \"./refiners/ZHHantMergeDateTimeRefiner\";\n\n// Shortcuts\nexport const hant = new Chrono(createCasualConfiguration());\n\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration());\n\nexport function parse(text: string, ref?: Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\nexport function parseDate(text: string, ref?: Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createCasualConfiguration(): Configuration {\n    const option = createConfiguration();\n    option.parsers.unshift(new ZHHantCasualDateParser());\n    return option;\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createConfiguration(): Configuration {\n    const configuration = includeCommonConfiguration({\n        parsers: [\n            new ZHHantDateParser(),\n            new ZHHantRelationWeekdayParser(),\n            new ZHHantWeekdayParser(),\n            new ZHHantTimeExpressionParser(),\n            new ZHHantDeadlineFormatParser(),\n        ],\n        refiners: [new ZHHantMergeDateRangeRefiner(), new ZHHantMergeDateTimeRefiner()],\n    });\n\n    // REMOVE ExtractTimezoneOffsetRefiner\n    configuration.refiners = configuration.refiners.filter(\n        (refiner) => !(refiner instanceof ExtractTimezoneOffsetRefiner)\n    );\n\n    return configuration;\n}\n", "import dayjs from \"dayjs\";\nimport { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { ParsingComponents, ParsingResult } from \"../../../../results\";\n\nconst NOW_GROUP = 1;\nconst DAY_GROUP_1 = 2;\nconst TIME_GROUP_1 = 3;\nconst TIME_GROUP_2 = 4;\nconst DAY_GROUP_3 = 5;\nconst TIME_GROUP_3 = 6;\n\nexport default class ZHHansCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return new RegExp(\n            \"(\u73B0\u5728|\u7ACB(?:\u523B|\u5373)|\u5373\u523B)|\" +\n                \"(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(\u65E9|\u665A)|\" +\n                \"(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|\" +\n                \"(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(?:\u65E5|\u5929)\" +\n                \"(?:[\\\\s|,|\uFF0C]*)\" +\n                \"(?:(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?\",\n            \"i\"\n        );\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        const index = match.index;\n        const result = context.createParsingResult(index, match[0]);\n\n        const refMoment = dayjs(context.refDate);\n        let startMoment = refMoment;\n\n        if (match[NOW_GROUP]) {\n            result.start.imply(\"hour\", refMoment.hour());\n            result.start.imply(\"minute\", refMoment.minute());\n            result.start.imply(\"second\", refMoment.second());\n            result.start.imply(\"millisecond\", refMoment.millisecond());\n        } else if (match[DAY_GROUP_1]) {\n            const day1 = match[DAY_GROUP_1];\n            const time1 = match[TIME_GROUP_1];\n\n            if (day1 == \"\u660E\") {\n                // Check not \"Tomorrow\" on late night\n                if (refMoment.hour() > 1) {\n                    startMoment = startMoment.add(1, \"day\");\n                }\n            } else if (day1 == \"\u6628\") {\n                startMoment = startMoment.add(-1, \"day\");\n            } else if (day1 == \"\u524D\") {\n                startMoment = startMoment.add(-2, \"day\");\n            } else if (day1 == \"\u5927\u524D\") {\n                startMoment = startMoment.add(-3, \"day\");\n            } else if (day1 == \"\u540E\") {\n                startMoment = startMoment.add(2, \"day\");\n            } else if (day1 == \"\u5927\u540E\") {\n                startMoment = startMoment.add(3, \"day\");\n            }\n\n            if (time1 == \"\u65E9\") {\n                result.start.imply(\"hour\", 6);\n            } else if (time1 == \"\u665A\") {\n                result.start.imply(\"hour\", 22);\n                result.start.imply(\"meridiem\", 1);\n            }\n        } else if (match[TIME_GROUP_2]) {\n            const timeString2 = match[TIME_GROUP_2];\n            const time2 = timeString2[0];\n            if (time2 == \"\u65E9\" || time2 == \"\u4E0A\") {\n                result.start.imply(\"hour\", 6);\n            } else if (time2 == \"\u4E0B\") {\n                result.start.imply(\"hour\", 15);\n                result.start.imply(\"meridiem\", 1);\n            } else if (time2 == \"\u4E2D\") {\n                result.start.imply(\"hour\", 12);\n                result.start.imply(\"meridiem\", 1);\n            } else if (time2 == \"\u591C\" || time2 == \"\u665A\") {\n                result.start.imply(\"hour\", 22);\n                result.start.imply(\"meridiem\", 1);\n            } else if (time2 == \"\u51CC\") {\n                result.start.imply(\"hour\", 0);\n            }\n        } else if (match[DAY_GROUP_3]) {\n            const day3 = match[DAY_GROUP_3];\n\n            if (day3 == \"\u660E\") {\n                // Check not \"Tomorrow\" on late night\n                if (refMoment.hour() > 1) {\n                    startMoment = startMoment.add(1, \"day\");\n                }\n            } else if (day3 == \"\u6628\") {\n                startMoment = startMoment.add(-1, \"day\");\n            } else if (day3 == \"\u524D\") {\n                startMoment = startMoment.add(-2, \"day\");\n            } else if (day3 == \"\u5927\u524D\") {\n                startMoment = startMoment.add(-3, \"day\");\n            } else if (day3 == \"\u540E\") {\n                startMoment = startMoment.add(2, \"day\");\n            } else if (day3 == \"\u5927\u540E\") {\n                startMoment = startMoment.add(3, \"day\");\n            }\n\n            const timeString3 = match[TIME_GROUP_3];\n            if (timeString3) {\n                const time3 = timeString3[0];\n                if (time3 == \"\u65E9\" || time3 == \"\u4E0A\") {\n                    result.start.imply(\"hour\", 6);\n                } else if (time3 == \"\u4E0B\") {\n                    result.start.imply(\"hour\", 15);\n                    result.start.imply(\"meridiem\", 1);\n                } else if (time3 == \"\u4E2D\") {\n                    result.start.imply(\"hour\", 12);\n                    result.start.imply(\"meridiem\", 1);\n                } else if (time3 == \"\u591C\" || time3 == \"\u665A\") {\n                    result.start.imply(\"hour\", 22);\n                    result.start.imply(\"meridiem\", 1);\n                } else if (time3 == \"\u51CC\") {\n                    result.start.imply(\"hour\", 0);\n                }\n            }\n        }\n\n        result.start.assign(\"day\", startMoment.date());\n        result.start.assign(\"month\", startMoment.month() + 1);\n        result.start.assign(\"year\", startMoment.year());\n\n        return result;\n    }\n}\n", "export const NUMBER = {\n    \"\u96F6\": 0,\n    \"\u3007\": 0,\n    \"\u4E00\": 1,\n    \"\u4E8C\": 2,\n    \"\u4E24\": 2,\n    \"\u4E09\": 3,\n    \"\u56DB\": 4,\n    \"\u4E94\": 5,\n    \"\u516D\": 6,\n    \"\u4E03\": 7,\n    \"\u516B\": 8,\n    \"\u4E5D\": 9,\n    \"\u5341\": 10,\n};\n\nexport const WEEKDAY_OFFSET = {\n    \"\u5929\": 0,\n    \"\u65E5\": 0,\n    \"\u4E00\": 1,\n    \"\u4E8C\": 2,\n    \"\u4E09\": 3,\n    \"\u56DB\": 4,\n    \"\u4E94\": 5,\n    \"\u516D\": 6,\n};\n\nexport function zhStringToNumber(text: string) {\n    let number = 0;\n\n    for (let i = 0; i < text.length; i++) {\n        const char = text[i];\n        if (char === \"\u5341\") {\n            number = number === 0 ? NUMBER[char] : number * NUMBER[char];\n        } else {\n            number += NUMBER[char];\n        }\n    }\n\n    return number;\n}\n\nexport function zhStringToYear(text: string) {\n    let string = \"\";\n\n    for (let i = 0; i < text.length; i++) {\n        const char = text[i];\n        string = string + NUMBER[char];\n    }\n\n    return parseInt(string);\n}\n", "import dayjs from \"dayjs\";\nimport { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { NUMBER, zhStringToNumber, zhStringToYear } from \"../constants\";\n\nconst YEAR_GROUP = 1;\nconst MONTH_GROUP = 2;\nconst DAY_GROUP = 3;\n\nexport default class ZHHansDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        // prettier-ignore\n        return new RegExp(\n            \"(\" +\n                \"\\\\d{2,4}|\" +\n                \"[\" +\n                Object.keys(NUMBER).join(\"\") +\n                \"]{4}|\" +\n                \"[\" +\n                Object.keys(NUMBER).join(\"\") +\n                \"]{2}\" +\n                \")?\" +\n                \"(?:\\\\s*)\" +\n                \"(?:\u5E74)?\" +\n                \"(?:[\\\\s|,|\uFF0C]*)\" +\n                \"(\" +\n                \"\\\\d{1,2}|\" +\n                \"[\" +\n                Object.keys(NUMBER).join(\"\") +\n                \"]{1,3}\" +\n                \")\" +\n                \"(?:\\\\s*)\" +\n                \"(?:\u6708)\" +\n                \"(?:\\\\s*)\" +\n                \"(\" +\n                \"\\\\d{1,2}|\" +\n                \"[\" +\n                Object.keys(NUMBER).join(\"\") +\n                \"]{1,3}\" +\n                \")?\" +\n                \"(?:\\\\s*)\" +\n                \"(?:\u65E5|\u53F7)?\"\n        );\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const startMoment = dayjs(context.refDate);\n        const result = context.createParsingResult(match.index, match[0]);\n\n        //Month\n        let month = parseInt(match[MONTH_GROUP]);\n        if (isNaN(month)) month = zhStringToNumber(match[MONTH_GROUP]);\n        result.start.assign(\"month\", month);\n\n        //Day\n        if (match[DAY_GROUP]) {\n            let day = parseInt(match[DAY_GROUP]);\n            if (isNaN(day)) day = zhStringToNumber(match[DAY_GROUP]);\n            result.start.assign(\"day\", day);\n        } else {\n            result.start.imply(\"day\", startMoment.date());\n        }\n\n        //Year\n        if (match[YEAR_GROUP]) {\n            let year = parseInt(match[YEAR_GROUP]);\n            if (isNaN(year)) year = zhStringToYear(match[YEAR_GROUP]);\n            result.start.assign(\"year\", year);\n        } else {\n            result.start.imply(\"year\", startMoment.year());\n        }\n\n        return result;\n    }\n}\n", "import dayjs from \"dayjs\";\nimport { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { NUMBER, zhStringToNumber } from \"../constants\";\n\nconst PATTERN = new RegExp(\n    \"(\\\\d+|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+|\u534A|\u51E0)(?:\\\\s*)\" +\n        \"(?:\u4E2A)?\" +\n        \"(\u79D2(?:\u949F)?|\u5206\u949F|\u5C0F\u65F6|\u949F|\u65E5|\u5929|\u661F\u671F|\u793C\u62DC|\u6708|\u5E74)\" +\n        \"(?:(?:\u4E4B|\u8FC7)?\u540E|(?:\u4E4B)?\u5185)\",\n    \"i\"\n);\n\nconst NUMBER_GROUP = 1;\nconst UNIT_GROUP = 2;\n\nexport default class ZHHansDeadlineFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const result = context.createParsingResult(match.index, match[0]);\n\n        let number = parseInt(match[NUMBER_GROUP]);\n        if (isNaN(number)) {\n            number = zhStringToNumber(match[NUMBER_GROUP]);\n        }\n\n        if (isNaN(number)) {\n            const string = match[NUMBER_GROUP];\n            if (string === \"\u51E0\") {\n                number = 3;\n            } else if (string === \"\u534A\") {\n                number = 0.5;\n            } else {\n                //just in case\n                return null;\n            }\n        }\n\n        let date = dayjs(context.refDate);\n        const unit = match[UNIT_GROUP];\n        const unitAbbr = unit[0];\n\n        if (unitAbbr.match(/[\u65E5\u5929\u661F\u793C\u6708\u5E74]/)) {\n            if (unitAbbr == \"\u65E5\" || unitAbbr == \"\u5929\") {\n                date = date.add(number, \"d\");\n            } else if (unitAbbr == \"\u661F\" || unitAbbr == \"\u793C\") {\n                date = date.add(number * 7, \"d\");\n            } else if (unitAbbr == \"\u6708\") {\n                date = date.add(number, \"month\");\n            } else if (unitAbbr == \"\u5E74\") {\n                date = date.add(number, \"year\");\n            }\n\n            result.start.assign(\"year\", date.year());\n            result.start.assign(\"month\", date.month() + 1);\n            result.start.assign(\"day\", date.date());\n            return result;\n        }\n\n        if (unitAbbr == \"\u79D2\") {\n            date = date.add(number, \"second\");\n        } else if (unitAbbr == \"\u5206\") {\n            date = date.add(number, \"minute\");\n        } else if (unitAbbr == \"\u5C0F\" || unitAbbr == \"\u949F\") {\n            date = date.add(number, \"hour\");\n        }\n\n        result.start.imply(\"year\", date.year());\n        result.start.imply(\"month\", date.month() + 1);\n        result.start.imply(\"day\", date.date());\n        result.start.assign(\"hour\", date.hour());\n        result.start.assign(\"minute\", date.minute());\n        result.start.assign(\"second\", date.second());\n        return result;\n    }\n}\n", "import dayjs from \"dayjs\";\nimport { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { ParsingResult } from \"../../../../results\";\nimport { WEEKDAY_OFFSET } from \"../constants\";\n\nconst PATTERN = new RegExp(\n    \"(?<prefix>\u4E0A|\u4E0B|\u8FD9)(?:\u4E2A)?(?:\u661F\u671F|\u793C\u62DC|\u5468)(?<weekday>\" + Object.keys(WEEKDAY_OFFSET).join(\"|\") + \")\"\n);\n\nexport default class ZHHansRelationWeekdayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        const result = context.createParsingResult(match.index, match[0]);\n\n        const dayOfWeek = match.groups.weekday;\n        const offset = WEEKDAY_OFFSET[dayOfWeek];\n        if (offset === undefined) return null;\n\n        let modifier = null;\n        const prefix = match.groups.prefix;\n\n        if (prefix == \"\u4E0A\") {\n            modifier = \"last\";\n        } else if (prefix == \"\u4E0B\") {\n            modifier = \"next\";\n        } else if (prefix == \"\u8FD9\") {\n            modifier = \"this\";\n        }\n\n        let startMoment = dayjs(context.refDate);\n        let startMomentFixed = false;\n        const refOffset = startMoment.day();\n\n        if (modifier == \"last\" || modifier == \"past\") {\n            startMoment = startMoment.day(offset - 7);\n            startMomentFixed = true;\n        } else if (modifier == \"next\") {\n            startMoment = startMoment.day(offset + 7);\n            startMomentFixed = true;\n        } else if (modifier == \"this\") {\n            startMoment = startMoment.day(offset);\n        } else {\n            if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {\n                startMoment = startMoment.day(offset - 7);\n            } else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {\n                startMoment = startMoment.day(offset + 7);\n            } else {\n                startMoment = startMoment.day(offset);\n            }\n        }\n\n        result.start.assign(\"weekday\", offset);\n        if (startMomentFixed) {\n            result.start.assign(\"day\", startMoment.date());\n            result.start.assign(\"month\", startMoment.month() + 1);\n            result.start.assign(\"year\", startMoment.year());\n        } else {\n            result.start.imply(\"day\", startMoment.date());\n            result.start.imply(\"month\", startMoment.month() + 1);\n            result.start.imply(\"year\", startMoment.year());\n        }\n\n        return result;\n    }\n}\n", "import dayjs from \"dayjs\";\nimport { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { NUMBER, zhStringToNumber } from \"../constants\";\n\nconst FIRST_REG_PATTERN = new RegExp(\n    \"(?:\u4ECE|\u81EA)?\" +\n        \"(?:\" +\n        \"(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(\u65E9|\u671D|\u665A)|\" +\n        \"(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|\" +\n        \"(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(?:\u65E5|\u5929)\" +\n        \"(?:[\\\\s,\uFF0C]*)\" +\n        \"(?:(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?\" +\n        \")?\" +\n        \"(?:[\\\\s,\uFF0C]*)\" +\n        \"(?:(\\\\d+|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)(?:\\\\s*)(?:\u70B9|\u65F6|:|\uFF1A)\" +\n        \"(?:\\\\s*)\" +\n        \"(\\\\d+|\u534A|\u6B63|\u6574|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)?(?:\\\\s*)(?:\u5206|:|\uFF1A)?\" +\n        \"(?:\\\\s*)\" +\n        \"(\\\\d+|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)?(?:\\\\s*)(?:\u79D2)?)\" +\n        \"(?:\\\\s*(A.M.|P.M.|AM?|PM?))?\",\n    \"i\"\n);\n\nconst SECOND_REG_PATTERN = new RegExp(\n    \"(?:^\\\\s*(?:\u5230|\u81F3|\\\\-|\\\\\u2013|\\\\~|\\\\\u301C)\\\\s*)\" +\n        \"(?:\" +\n        \"(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(\u65E9|\u671D|\u665A)|\" +\n        \"(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668))|\" +\n        \"(\u4ECA|\u660E|\u524D|\u5927\u524D|\u540E|\u5927\u540E|\u6628)(?:\u65E5|\u5929)\" +\n        \"(?:[\\\\s,\uFF0C]*)\" +\n        \"(?:(\u4E0A(?:\u5348)|\u65E9(?:\u4E0A)|\u4E0B(?:\u5348)|\u665A(?:\u4E0A)|\u591C(?:\u665A)?|\u4E2D(?:\u5348)|\u51CC(?:\u6668)))?\" +\n        \")?\" +\n        \"(?:[\\\\s,\uFF0C]*)\" +\n        \"(?:(\\\\d+|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)(?:\\\\s*)(?:\u70B9|\u65F6|:|\uFF1A)\" +\n        \"(?:\\\\s*)\" +\n        \"(\\\\d+|\u534A|\u6B63|\u6574|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)?(?:\\\\s*)(?:\u5206|:|\uFF1A)?\" +\n        \"(?:\\\\s*)\" +\n        \"(\\\\d+|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)?(?:\\\\s*)(?:\u79D2)?)\" +\n        \"(?:\\\\s*(A.M.|P.M.|AM?|PM?))?\",\n    \"i\"\n);\n\nconst DAY_GROUP_1 = 1;\nconst ZH_AM_PM_HOUR_GROUP_1 = 2;\nconst ZH_AM_PM_HOUR_GROUP_2 = 3;\nconst DAY_GROUP_3 = 4;\nconst ZH_AM_PM_HOUR_GROUP_3 = 5;\nconst HOUR_GROUP = 6;\nconst MINUTE_GROUP = 7;\nconst SECOND_GROUP = 8;\nconst AM_PM_HOUR_GROUP = 9;\n\nexport default class ZHHansTimeExpressionParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return FIRST_REG_PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        // This pattern can be overlaped Ex. [12] AM, 1[2] AM\n        if (match.index > 0 && context.text[match.index - 1].match(/\\w/)) {\n            return null;\n        }\n\n        const refMoment = dayjs(context.refDate);\n        const result = context.createParsingResult(match.index, match[0]);\n        const startMoment = refMoment.clone();\n\n        // ----- Day\n        if (match[DAY_GROUP_1]) {\n            const day1 = match[DAY_GROUP_1];\n            if (day1 == \"\u660E\") {\n                // Check not \"Tomorrow\" on late night\n                if (refMoment.hour() > 1) {\n                    startMoment.add(1, \"day\");\n                }\n            } else if (day1 == \"\u6628\") {\n                startMoment.add(-1, \"day\");\n            } else if (day1 == \"\u524D\") {\n                startMoment.add(-2, \"day\");\n            } else if (day1 == \"\u5927\u524D\") {\n                startMoment.add(-3, \"day\");\n            } else if (day1 == \"\u540E\") {\n                startMoment.add(2, \"day\");\n            } else if (day1 == \"\u5927\u540E\") {\n                startMoment.add(3, \"day\");\n            }\n            result.start.assign(\"day\", startMoment.date());\n            result.start.assign(\"month\", startMoment.month() + 1);\n            result.start.assign(\"year\", startMoment.year());\n        } else if (match[DAY_GROUP_3]) {\n            const day3 = match[DAY_GROUP_3];\n            if (day3 == \"\u660E\") {\n                startMoment.add(1, \"day\");\n            } else if (day3 == \"\u6628\") {\n                startMoment.add(-1, \"day\");\n            } else if (day3 == \"\u524D\") {\n                startMoment.add(-2, \"day\");\n            } else if (day3 == \"\u5927\u524D\") {\n                startMoment.add(-3, \"day\");\n            } else if (day3 == \"\u540E\") {\n                startMoment.add(2, \"day\");\n            } else if (day3 == \"\u5927\u540E\") {\n                startMoment.add(3, \"day\");\n            }\n            result.start.assign(\"day\", startMoment.date());\n            result.start.assign(\"month\", startMoment.month() + 1);\n            result.start.assign(\"year\", startMoment.year());\n        } else {\n            result.start.imply(\"day\", startMoment.date());\n            result.start.imply(\"month\", startMoment.month() + 1);\n            result.start.imply(\"year\", startMoment.year());\n        }\n\n        let hour = 0;\n        let minute = 0;\n        let meridiem = -1;\n\n        // ----- Second\n        if (match[SECOND_GROUP]) {\n            let second = parseInt(match[SECOND_GROUP]);\n            if (isNaN(second)) {\n                second = zhStringToNumber(match[SECOND_GROUP]);\n            }\n            if (second >= 60) return null;\n            result.start.assign(\"second\", second);\n        }\n\n        hour = parseInt(match[HOUR_GROUP]);\n        if (isNaN(hour)) {\n            hour = zhStringToNumber(match[HOUR_GROUP]);\n        }\n\n        // ----- Minutes\n        if (match[MINUTE_GROUP]) {\n            if (match[MINUTE_GROUP] == \"\u534A\") {\n                minute = 30;\n            } else if (match[MINUTE_GROUP] == \"\u6B63\" || match[MINUTE_GROUP] == \"\u6574\") {\n                minute = 0;\n            } else {\n                minute = parseInt(match[MINUTE_GROUP]);\n                if (isNaN(minute)) {\n                    minute = zhStringToNumber(match[MINUTE_GROUP]);\n                }\n            }\n        } else if (hour > 100) {\n            minute = hour % 100;\n            hour = Math.floor(hour / 100);\n        }\n\n        if (minute >= 60) {\n            return null;\n        }\n\n        if (hour > 24) {\n            return null;\n        }\n        if (hour >= 12) {\n            meridiem = 1;\n        }\n\n        // ----- AM & PM\n        if (match[AM_PM_HOUR_GROUP]) {\n            if (hour > 12) return null;\n            const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n            if (ampm == \"a\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            }\n\n            if (ampm == \"p\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        } else if (match[ZH_AM_PM_HOUR_GROUP_1]) {\n            const zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];\n            const zhAMPM1 = zhAMPMString1[0];\n            if (zhAMPM1 == \"\u65E9\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM1 == \"\u665A\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        } else if (match[ZH_AM_PM_HOUR_GROUP_2]) {\n            const zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];\n            const zhAMPM2 = zhAMPMString2[0];\n            if (zhAMPM2 == \"\u4E0A\" || zhAMPM2 == \"\u65E9\" || zhAMPM2 == \"\u51CC\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM2 == \"\u4E0B\" || zhAMPM2 == \"\u665A\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        } else if (match[ZH_AM_PM_HOUR_GROUP_3]) {\n            const zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];\n            const zhAMPM3 = zhAMPMString3[0];\n            if (zhAMPM3 == \"\u4E0A\" || zhAMPM3 == \"\u65E9\" || zhAMPM3 == \"\u51CC\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM3 == \"\u4E0B\" || zhAMPM3 == \"\u665A\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        }\n\n        result.start.assign(\"hour\", hour);\n        result.start.assign(\"minute\", minute);\n\n        if (meridiem >= 0) {\n            result.start.assign(\"meridiem\", meridiem);\n        } else {\n            if (hour < 12) {\n                result.start.imply(\"meridiem\", 0);\n            } else {\n                result.start.imply(\"meridiem\", 1);\n            }\n        }\n\n        // ==============================================================\n        //                  Extracting the 'to' chunk\n        // ==============================================================\n\n        match = SECOND_REG_PATTERN.exec(context.text.substring(result.index + result.text.length));\n        if (!match) {\n            // Not accept number only result\n            if (result.text.match(/^\\d+$/)) {\n                return null;\n            }\n            return result;\n        }\n\n        const endMoment = startMoment.clone();\n        result.end = context.createParsingComponents();\n\n        // ----- Day\n        if (match[DAY_GROUP_1]) {\n            const day1 = match[DAY_GROUP_1];\n            if (day1 == \"\u660E\") {\n                // Check not \"Tomorrow\" on late night\n                if (refMoment.hour() > 1) {\n                    endMoment.add(1, \"day\");\n                }\n            } else if (day1 == \"\u6628\") {\n                endMoment.add(-1, \"day\");\n            } else if (day1 == \"\u524D\") {\n                endMoment.add(-2, \"day\");\n            } else if (day1 == \"\u5927\u524D\") {\n                endMoment.add(-3, \"day\");\n            } else if (day1 == \"\u540E\") {\n                endMoment.add(2, \"day\");\n            } else if (day1 == \"\u5927\u540E\") {\n                endMoment.add(3, \"day\");\n            }\n            result.end.assign(\"day\", endMoment.date());\n            result.end.assign(\"month\", endMoment.month() + 1);\n            result.end.assign(\"year\", endMoment.year());\n        } else if (match[DAY_GROUP_3]) {\n            const day3 = match[DAY_GROUP_3];\n            if (day3 == \"\u660E\") {\n                endMoment.add(1, \"day\");\n            } else if (day3 == \"\u6628\") {\n                endMoment.add(-1, \"day\");\n            } else if (day3 == \"\u524D\") {\n                endMoment.add(-2, \"day\");\n            } else if (day3 == \"\u5927\u524D\") {\n                endMoment.add(-3, \"day\");\n            } else if (day3 == \"\u540E\") {\n                endMoment.add(2, \"day\");\n            } else if (day3 == \"\u5927\u540E\") {\n                endMoment.add(3, \"day\");\n            }\n            result.end.assign(\"day\", endMoment.date());\n            result.end.assign(\"month\", endMoment.month() + 1);\n            result.end.assign(\"year\", endMoment.year());\n        } else {\n            result.end.imply(\"day\", endMoment.date());\n            result.end.imply(\"month\", endMoment.month() + 1);\n            result.end.imply(\"year\", endMoment.year());\n        }\n\n        hour = 0;\n        minute = 0;\n        meridiem = -1;\n\n        // ----- Second\n        if (match[SECOND_GROUP]) {\n            let second = parseInt(match[SECOND_GROUP]);\n            if (isNaN(second)) {\n                second = zhStringToNumber(match[SECOND_GROUP]);\n            }\n\n            if (second >= 60) return null;\n            result.end.assign(\"second\", second);\n        }\n\n        hour = parseInt(match[HOUR_GROUP]);\n        if (isNaN(hour)) {\n            hour = zhStringToNumber(match[HOUR_GROUP]);\n        }\n\n        // ----- Minutes\n        if (match[MINUTE_GROUP]) {\n            if (match[MINUTE_GROUP] == \"\u534A\") {\n                minute = 30;\n            } else if (match[MINUTE_GROUP] == \"\u6B63\" || match[MINUTE_GROUP] == \"\u6574\") {\n                minute = 0;\n            } else {\n                minute = parseInt(match[MINUTE_GROUP]);\n                if (isNaN(minute)) {\n                    minute = zhStringToNumber(match[MINUTE_GROUP]);\n                }\n            }\n        } else if (hour > 100) {\n            minute = hour % 100;\n            hour = Math.floor(hour / 100);\n        }\n\n        if (minute >= 60) {\n            return null;\n        }\n\n        if (hour > 24) {\n            return null;\n        }\n        if (hour >= 12) {\n            meridiem = 1;\n        }\n\n        // ----- AM & PM\n        if (match[AM_PM_HOUR_GROUP]) {\n            if (hour > 12) return null;\n            const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n            if (ampm == \"a\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            }\n\n            if (ampm == \"p\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n\n            if (!result.start.isCertain(\"meridiem\")) {\n                if (meridiem == 0) {\n                    result.start.imply(\"meridiem\", 0);\n\n                    if (result.start.get(\"hour\") == 12) {\n                        result.start.assign(\"hour\", 0);\n                    }\n                } else {\n                    result.start.imply(\"meridiem\", 1);\n\n                    if (result.start.get(\"hour\") != 12) {\n                        result.start.assign(\"hour\", result.start.get(\"hour\") + 12);\n                    }\n                }\n            }\n        } else if (match[ZH_AM_PM_HOUR_GROUP_1]) {\n            const zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];\n            const zhAMPM1 = zhAMPMString1[0];\n            if (zhAMPM1 == \"\u65E9\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM1 == \"\u665A\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        } else if (match[ZH_AM_PM_HOUR_GROUP_2]) {\n            const zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];\n            const zhAMPM2 = zhAMPMString2[0];\n            if (zhAMPM2 == \"\u4E0A\" || zhAMPM2 == \"\u65E9\" || zhAMPM2 == \"\u51CC\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM2 == \"\u4E0B\" || zhAMPM2 == \"\u665A\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        } else if (match[ZH_AM_PM_HOUR_GROUP_3]) {\n            const zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];\n            const zhAMPM3 = zhAMPMString3[0];\n            if (zhAMPM3 == \"\u4E0A\" || zhAMPM3 == \"\u65E9\" || zhAMPM3 == \"\u51CC\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM3 == \"\u4E0B\" || zhAMPM3 == \"\u665A\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        }\n\n        result.text = result.text + match[0];\n        result.end.assign(\"hour\", hour);\n        result.end.assign(\"minute\", minute);\n        if (meridiem >= 0) {\n            result.end.assign(\"meridiem\", meridiem);\n        } else {\n            const startAtPM = result.start.isCertain(\"meridiem\") && result.start.get(\"meridiem\") == 1;\n            if (startAtPM && result.start.get(\"hour\") > hour) {\n                // 10pm - 1 (am)\n                result.end.imply(\"meridiem\", 0);\n            } else if (hour > 12) {\n                result.end.imply(\"meridiem\", 1);\n            }\n        }\n\n        if (result.end.date().getTime() < result.start.date().getTime()) {\n            result.end.imply(\"day\", result.end.get(\"day\") + 1);\n        }\n\n        return result;\n    }\n}\n", "import dayjs from \"dayjs\";\nimport { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { ParsingResult } from \"../../../../results\";\nimport { WEEKDAY_OFFSET } from \"../constants\";\n\nconst PATTERN = new RegExp(\"(?:\u661F\u671F|\u793C\u62DC|\u5468)(?<weekday>\" + Object.keys(WEEKDAY_OFFSET).join(\"|\") + \")\");\n\nexport default class ZHHansWeekdayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        const result = context.createParsingResult(match.index, match[0]);\n\n        const dayOfWeek = match.groups.weekday;\n        const offset = WEEKDAY_OFFSET[dayOfWeek];\n        if (offset === undefined) return null;\n\n        let startMoment = dayjs(context.refDate);\n        const startMomentFixed = false;\n        const refOffset = startMoment.day();\n\n        if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {\n            startMoment = startMoment.day(offset - 7);\n        } else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {\n            startMoment = startMoment.day(offset + 7);\n        } else {\n            startMoment = startMoment.day(offset);\n        }\n\n        result.start.assign(\"weekday\", offset);\n        if (startMomentFixed) {\n            result.start.assign(\"day\", startMoment.date());\n            result.start.assign(\"month\", startMoment.month() + 1);\n            result.start.assign(\"year\", startMoment.year());\n        } else {\n            result.start.imply(\"day\", startMoment.date());\n            result.start.imply(\"month\", startMoment.month() + 1);\n            result.start.imply(\"year\", startMoment.year());\n        }\n\n        return result;\n    }\n}\n", "import AbstractMergeDateRangeRefiner from \"../../../../common/refiners/AbstractMergeDateRangeRefiner\";\n\nexport default class ZHHansMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner {\n    patternBetween(): RegExp {\n        return /^\\s*(\u81F3|\u5230|-|~|\uFF5E|\uFF0D|\u30FC)\\s*$/i;\n    }\n}\n", "import AbstractMergeDateTimeRefiner from \"../../../../common/refiners/AbstractMergeDateTimeRefiner\";\n\nexport default class ZHHansMergeDateTimeRefiner extends AbstractMergeDateTimeRefiner {\n    patternBetween(): RegExp {\n        return /^\\s*$/i;\n    }\n}\n", "/**\n * Chrono components for zh support\n */\n\nimport { Chrono, Configuration } from \"../../../chrono\";\nimport ExtractTimezoneOffsetRefiner from \"../../../common/refiners/ExtractTimezoneOffsetRefiner\";\nimport { includeCommonConfiguration } from \"../../../configurations\";\nimport { ParsedResult, ParsingOption } from \"../../../index\";\nimport ZHHansCasualDateParser from \"./parsers/ZHHansCasualDateParser\";\nimport ZHHansDateParser from \"./parsers/ZHHansDateParser\";\nimport ZHHansDeadlineFormatParser from \"./parsers/ZHHansDeadlineFormatParser\";\nimport ZHHansRelationWeekdayParser from \"./parsers/ZHHansRelationWeekdayParser\";\nimport ZHHansTimeExpressionParser from \"./parsers/ZHHansTimeExpressionParser\";\nimport ZHHansWeekdayParser from \"./parsers/ZHHansWeekdayParser\";\nimport ZHHansMergeDateRangeRefiner from \"./refiners/ZHHansMergeDateRangeRefiner\";\nimport ZHHansMergeDateTimeRefiner from \"./refiners/ZHHansMergeDateTimeRefiner\";\n\n// Shortcuts\nexport const hans = new Chrono(createCasualConfiguration());\n\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration());\n\nexport function parse(text: string, ref?: Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\nexport function parseDate(text: string, ref?: Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createCasualConfiguration(): Configuration {\n    const option = createConfiguration();\n    option.parsers.unshift(new ZHHansCasualDateParser());\n    return option;\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createConfiguration(): Configuration {\n    const configuration = includeCommonConfiguration({\n        parsers: [\n            new ZHHansDateParser(),\n            new ZHHansRelationWeekdayParser(),\n            new ZHHansWeekdayParser(),\n            new ZHHansTimeExpressionParser(),\n            new ZHHansDeadlineFormatParser(),\n        ],\n        refiners: [new ZHHansMergeDateRangeRefiner(), new ZHHansMergeDateTimeRefiner()],\n    });\n\n    // REMOVE ExtractTimezoneOffsetRefiner\n    configuration.refiners = configuration.refiners.filter(\n        (refiner) => !(refiner instanceof ExtractTimezoneOffsetRefiner)\n    );\n\n    return configuration;\n}\n", "export * from \"./hant\";\nexport * as hans from \"./hans\";\n", "import { OpUnitType, QUnitType } from \"dayjs\";\nimport { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern\";\nimport { findMostLikelyADYear } from \"../../calculation/years\";\nimport { TimeUnits } from \"../../utils/timeunits\";\n\nexport const REGEX_PARTS = {\n    leftBoundary: \"([^\\\\p{L}\\\\p{N}_]|^)\",\n    rightBoundary: \"(?=[^\\\\p{L}\\\\p{N}_]|$)\",\n    flags: \"iu\",\n};\n\nexport const WEEKDAY_DICTIONARY: { [word: string]: number } = {\n    \u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435: 0,\n    \u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u044F: 0,\n    \u0432\u0441\u043A: 0,\n    \"\u0432\u0441\u043A.\": 0,\n    \u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A: 1,\n    \u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A\u0430: 1,\n    \u043F\u043D: 1,\n    \"\u043F\u043D.\": 1,\n    \u0432\u0442\u043E\u0440\u043D\u0438\u043A: 2,\n    \u0432\u0442\u043E\u0440\u043D\u0438\u043A\u0430: 2,\n    \u0432\u0442: 2,\n    \"\u0432\u0442.\": 2,\n    \u0441\u0440\u0435\u0434\u0430: 3,\n    \u0441\u0440\u0435\u0434\u044B: 3,\n    \u0441\u0440\u0435\u0434\u0443: 3,\n    \u0441\u0440: 3,\n    \"\u0441\u0440.\": 3,\n    \u0447\u0435\u0442\u0432\u0435\u0440\u0433: 4,\n    \u0447\u0435\u0442\u0432\u0435\u0440\u0433\u0430: 4,\n    \u0447\u0442: 4,\n    \"\u0447\u0442.\": 4,\n    \u043F\u044F\u0442\u043D\u0438\u0446\u0430: 5,\n    \u043F\u044F\u0442\u043D\u0438\u0446\u0443: 5,\n    \u043F\u044F\u0442\u043D\u0438\u0446\u044B: 5,\n    \u043F\u0442: 5,\n    \"\u043F\u0442.\": 5,\n    \u0441\u0443\u0431\u0431\u043E\u0442\u0430: 6,\n    \u0441\u0443\u0431\u0431\u043E\u0442\u0443: 6,\n    \u0441\u0443\u0431\u0431\u043E\u0442\u044B: 6,\n    \u0441\u0431: 6,\n    \"\u0441\u0431.\": 6,\n};\n\nexport const FULL_MONTH_NAME_DICTIONARY: { [word: string]: number } = {\n    \u044F\u043D\u0432\u0430\u0440\u044C: 1,\n    \u044F\u043D\u0432\u0430\u0440\u044F: 1,\n    \u044F\u043D\u0432\u0430\u0440\u0435: 1,\n    \u0444\u0435\u0432\u0440\u044F\u043B\u044C: 2,\n    \u0444\u0435\u0432\u0440\u044F\u043B\u044F: 2,\n    \u0444\u0435\u0432\u0440\u044F\u043B\u0435: 2,\n    \u043C\u0430\u0440\u0442: 3,\n    \u043C\u0430\u0440\u0442\u0430: 3,\n    \u043C\u0430\u0440\u0442\u0435: 3,\n    \u0430\u043F\u0440\u0435\u043B\u044C: 4,\n    \u0430\u043F\u0440\u0435\u043B\u044F: 4,\n    \u0430\u043F\u0440\u0435\u043B\u0435: 4,\n    \u043C\u0430\u0439: 5,\n    \u043C\u0430\u044F: 5,\n    \u043C\u0430\u0435: 5,\n    \u0438\u044E\u043D\u044C: 6,\n    \u0438\u044E\u043D\u044F: 6,\n    \u0438\u044E\u043D\u0435: 6,\n    \u0438\u044E\u043B\u044C: 7,\n    \u0438\u044E\u043B\u044F: 7,\n    \u0438\u044E\u043B\u0435: 7,\n    \u0430\u0432\u0433\u0443\u0441\u0442: 8,\n    \u0430\u0432\u0433\u0443\u0441\u0442\u0430: 8,\n    \u0430\u0432\u0433\u0443\u0441\u0442\u0435: 8,\n    \u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044C: 9,\n    \u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044F: 9,\n    \u0441\u0435\u043D\u0442\u044F\u0431\u0440\u0435: 9,\n    \u043E\u043A\u0442\u044F\u0431\u0440\u044C: 10,\n    \u043E\u043A\u0442\u044F\u0431\u0440\u044F: 10,\n    \u043E\u043A\u0442\u044F\u0431\u0440\u0435: 10,\n    \u043D\u043E\u044F\u0431\u0440\u044C: 11,\n    \u043D\u043E\u044F\u0431\u0440\u044F: 11,\n    \u043D\u043E\u044F\u0431\u0440\u0435: 11,\n    \u0434\u0435\u043A\u0430\u0431\u0440\u044C: 12,\n    \u0434\u0435\u043A\u0430\u0431\u0440\u044F: 12,\n    \u0434\u0435\u043A\u0430\u0431\u0440\u0435: 12,\n};\n\nexport const MONTH_DICTIONARY: { [word: string]: number } = {\n    ...FULL_MONTH_NAME_DICTIONARY,\n    \u044F\u043D\u0432: 1,\n    \"\u044F\u043D\u0432.\": 1,\n    \u0444\u0435\u0432: 2,\n    \"\u0444\u0435\u0432.\": 2,\n    \u043C\u0430\u0440: 3,\n    \"\u043C\u0430\u0440.\": 3,\n    \u0430\u043F\u0440: 4,\n    \"\u0430\u043F\u0440.\": 4,\n    \u0430\u0432\u0433: 8,\n    \"\u0430\u0432\u0433.\": 8,\n    \u0441\u0435\u043D: 9,\n    \"\u0441\u0435\u043D.\": 9,\n    \u043E\u043A\u0442: 10,\n    \"\u043E\u043A\u0442.\": 10,\n    \u043D\u043E\u044F: 11,\n    \"\u043D\u043E\u044F.\": 11,\n    \u0434\u0435\u043A: 12,\n    \"\u0434\u0435\u043A.\": 12,\n};\n\nexport const INTEGER_WORD_DICTIONARY: { [word: string]: number } = {\n    \u043E\u0434\u0438\u043D: 1,\n    \u043E\u0434\u043D\u0430: 1,\n    \u043E\u0434\u043D\u043E\u0439: 1,\n    \u043E\u0434\u043D\u0443: 1,\n    \u0434\u0432\u0435: 2,\n    \u0434\u0432\u0430: 2,\n    \u0434\u0432\u0443\u0445: 2,\n    \u0442\u0440\u0438: 3,\n    \u0442\u0440\u0435\u0445: 3,\n    \u0442\u0440\u0451\u0445: 3,\n    \u0447\u0435\u0442\u044B\u0440\u0435: 4,\n    \u0447\u0435\u0442\u044B\u0440\u0435\u0445: 4,\n    \u0447\u0435\u0442\u044B\u0440\u0451\u0445: 4,\n    \u043F\u044F\u0442\u044C: 5,\n    \u043F\u044F\u0442\u0438: 5,\n    \u0448\u0435\u0441\u0442\u044C: 6,\n    \u0448\u0435\u0441\u0442\u0438: 6,\n    \u0441\u0435\u043C\u044C: 7,\n    \u0441\u0435\u043C\u0438: 7,\n    \u0432\u043E\u0441\u0435\u043C\u044C: 8,\n    \u0432\u043E\u0441\u0435\u043C\u044C\u043C\u0438: 8,\n    \u0434\u0435\u0432\u044F\u0442\u044C: 9,\n    \u0434\u0435\u0432\u044F\u0442\u0438: 9,\n    \u0434\u0435\u0441\u044F\u0442\u044C: 10,\n    \u0434\u0435\u0441\u044F\u0442\u0438: 10,\n    \u043E\u0434\u0438\u043D\u043D\u0430\u0434\u0446\u0430\u0442\u044C: 11,\n    \u043E\u0434\u0438\u043D\u043D\u0430\u0434\u0446\u0430\u0442\u0438: 11,\n    \u0434\u0432\u0435\u043D\u0430\u0434\u0446\u0430\u0442\u044C: 12,\n    \u0434\u0432\u0435\u043D\u0430\u0434\u0446\u0430\u0442\u0438: 12,\n};\n\nexport const ORDINAL_WORD_DICTIONARY: { [word: string]: number } = {\n    \u043F\u0435\u0440\u0432\u043E\u0435: 1,\n    \u043F\u0435\u0440\u0432\u043E\u0433\u043E: 1,\n    \u0432\u0442\u043E\u0440\u043E\u0435: 2,\n    \u0432\u0442\u043E\u0440\u043E\u0433\u043E: 2,\n    \u0442\u0440\u0435\u0442\u044C\u0435: 3,\n    \u0442\u0440\u0435\u0442\u044C\u0435\u0433\u043E: 3,\n    \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043E\u0435: 4,\n    \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043E\u0433\u043E: 4,\n    \u043F\u044F\u0442\u043E\u0435: 5,\n    \u043F\u044F\u0442\u043E\u0433\u043E: 5,\n    \u0448\u0435\u0441\u0442\u043E\u0435: 6,\n    \u0448\u0435\u0441\u0442\u043E\u0433\u043E: 6,\n    \u0441\u0435\u0434\u044C\u043C\u043E\u0435: 7,\n    \u0441\u0435\u0434\u044C\u043C\u043E\u0433\u043E: 7,\n    \u0432\u043E\u0441\u044C\u043C\u043E\u0435: 8,\n    \u0432\u043E\u0441\u044C\u043C\u043E\u0433\u043E: 8,\n    \u0434\u0435\u0432\u044F\u0442\u043E\u0435: 9,\n    \u0434\u0435\u0432\u044F\u0442\u043E\u0433\u043E: 9,\n    \u0434\u0435\u0441\u044F\u0442\u043E\u0435: 10,\n    \u0434\u0435\u0441\u044F\u0442\u043E\u0433\u043E: 10,\n    \u043E\u0434\u0438\u043D\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 11,\n    \u043E\u0434\u0438\u043D\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 11,\n    \u0434\u0432\u0435\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 12,\n    \u0434\u0432\u0435\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 12,\n    \u0442\u0440\u0438\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 13,\n    \u0442\u0440\u0438\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 13,\n    \u0447\u0435\u0442\u044B\u0440\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 14,\n    \u0447\u0435\u0442\u044B\u0440\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 14,\n    \u043F\u044F\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 15,\n    \u043F\u044F\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 15,\n    \u0448\u0435\u0441\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 16,\n    \u0448\u0435\u0441\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 16,\n    \u0441\u0435\u043C\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 17,\n    \u0441\u0435\u043C\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 17,\n    \u0432\u043E\u0441\u0435\u043C\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 18,\n    \u0432\u043E\u0441\u0435\u043C\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 18,\n    \u0434\u0435\u0432\u044F\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 19,\n    \u0434\u0435\u0432\u044F\u0442\u043D\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 19,\n    \u0434\u0432\u0430\u0434\u0446\u0430\u0442\u043E\u0435: 20,\n    \u0434\u0432\u0430\u0434\u0446\u0430\u0442\u043E\u0433\u043E: 20,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u043F\u0435\u0440\u0432\u043E\u0435\": 21,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u043F\u0435\u0440\u0432\u043E\u0433\u043E\": 21,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0432\u0442\u043E\u0440\u043E\u0435\": 22,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0432\u0442\u043E\u0440\u043E\u0433\u043E\": 22,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0442\u0440\u0435\u0442\u044C\u0435\": 23,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0442\u0440\u0435\u0442\u044C\u0435\u0433\u043E\": 23,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043E\u0435\": 24,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043E\u0433\u043E\": 24,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u043F\u044F\u0442\u043E\u0435\": 25,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u043F\u044F\u0442\u043E\u0433\u043E\": 25,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0448\u0435\u0441\u0442\u043E\u0435\": 26,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0448\u0435\u0441\u0442\u043E\u0433\u043E\": 26,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0441\u0435\u0434\u044C\u043C\u043E\u0435\": 27,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0441\u0435\u0434\u044C\u043C\u043E\u0433\u043E\": 27,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0432\u043E\u0441\u044C\u043C\u043E\u0435\": 28,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0432\u043E\u0441\u044C\u043C\u043E\u0433\u043E\": 28,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0434\u0435\u0432\u044F\u0442\u043E\u0435\": 29,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044C \u0434\u0435\u0432\u044F\u0442\u043E\u0433\u043E\": 29,\n    \"\u0442\u0440\u0438\u0434\u0446\u0430\u0442\u043E\u0435\": 30,\n    \"\u0442\u0440\u0438\u0434\u0446\u0430\u0442\u043E\u0433\u043E\": 30,\n    \"\u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044C \u043F\u0435\u0440\u0432\u043E\u0435\": 31,\n    \"\u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044C \u043F\u0435\u0440\u0432\u043E\u0433\u043E\": 31,\n};\n\nexport const TIME_UNIT_DICTIONARY: { [word: string]: OpUnitType | QUnitType } = {\n    \u0441\u0435\u043A: \"second\",\n    \u0441\u0435\u043A\u0443\u043D\u0434\u0430: \"second\",\n    \u0441\u0435\u043A\u0443\u043D\u0434: \"second\",\n    \u0441\u0435\u043A\u0443\u043D\u0434\u044B: \"second\",\n    \u0441\u0435\u043A\u0443\u043D\u0434\u0443: \"second\",\n    \u0441\u0435\u043A\u0443\u043D\u0434\u043E\u0447\u043A\u0430: \"second\",\n    \u0441\u0435\u043A\u0443\u043D\u0434\u043E\u0447\u043A\u0438: \"second\",\n    \u0441\u0435\u043A\u0443\u043D\u0434\u043E\u0447\u0435\u043A: \"second\",\n    \u0441\u0435\u043A\u0443\u043D\u0434\u043E\u0447\u043A\u0443: \"second\",\n    \u043C\u0438\u043D: \"minute\",\n    \u043C\u0438\u043D\u0443\u0442\u0430: \"minute\",\n    \u043C\u0438\u043D\u0443\u0442: \"minute\",\n    \u043C\u0438\u043D\u0443\u0442\u044B: \"minute\",\n    \u043C\u0438\u043D\u0443\u0442\u0443: \"minute\",\n    \u043C\u0438\u043D\u0443\u0442\u043E\u043A: \"minute\",\n    \u043C\u0438\u043D\u0443\u0442\u043A\u0438: \"minute\",\n    \u043C\u0438\u043D\u0443\u0442\u043A\u0443: \"minute\",\n    \u0447\u0430\u0441: \"hour\",\n    \u0447\u0430\u0441\u043E\u0432: \"hour\",\n    \u0447\u0430\u0441\u0430: \"hour\",\n    \u0447\u0430\u0441\u0443: \"hour\",\n    \u0447\u0430\u0441\u0438\u043A\u043E\u0432: \"hour\",\n    \u0447\u0430\u0441\u0438\u043A\u0430: \"hour\",\n    \u0447\u0430\u0441\u0438\u043A\u0435: \"hour\",\n    \u0447\u0430\u0441\u0438\u043A: \"hour\",\n    \u0434\u0435\u043D\u044C: \"d\",\n    \u0434\u043D\u044F: \"d\",\n    \u0434\u043D\u0435\u0439: \"d\",\n    \u0441\u0443\u0442\u043E\u043A: \"d\",\n    \u0441\u0443\u0442\u043A\u0438: \"d\",\n    \u043D\u0435\u0434\u0435\u043B\u044F: \"week\",\n    \u043D\u0435\u0434\u0435\u043B\u0435: \"week\",\n    \u043D\u0435\u0434\u0435\u043B\u0438: \"week\",\n    \u043D\u0435\u0434\u0435\u043B\u044E: \"week\",\n    \u043D\u0435\u0434\u0435\u043B\u044C: \"week\",\n    \u043D\u0435\u0434\u0435\u043B\u044C\u043A\u0435: \"week\",\n    \u043D\u0435\u0434\u0435\u043B\u044C\u043A\u0438: \"week\",\n    \u043D\u0435\u0434\u0435\u043B\u0435\u043A: \"week\",\n    \u043C\u0435\u0441\u044F\u0446: \"month\",\n    \u043C\u0435\u0441\u044F\u0446\u0435: \"month\",\n    \u043C\u0435\u0441\u044F\u0446\u0435\u0432: \"month\",\n    \u043C\u0435\u0441\u044F\u0446\u0430: \"month\",\n    \u043A\u0432\u0430\u0440\u0442\u0430\u043B: \"quarter\",\n    \u043A\u0432\u0430\u0440\u0442\u0430\u043B\u0435: \"quarter\",\n    \u043A\u0432\u0430\u0440\u0442\u0430\u043B\u043E\u0432: \"quarter\",\n    \u0433\u043E\u0434: \"year\",\n    \u0433\u043E\u0434\u0430: \"year\",\n    \u0433\u043E\u0434\u0443: \"year\",\n    \u0433\u043E\u0434\u043E\u0432: \"year\",\n    \u043B\u0435\u0442: \"year\",\n    \u0433\u043E\u0434\u0438\u043A: \"year\",\n    \u0433\u043E\u0434\u0438\u043A\u0430: \"year\",\n    \u0433\u043E\u0434\u0438\u043A\u043E\u0432: \"year\",\n};\n\n//-----------------------------\n\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(\n    INTEGER_WORD_DICTIONARY\n)}|[0-9]+|[0-9]+\\\\.[0-9]+|\u043F\u043E\u043B|\u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E|\u043F\u0430\u0440(?:\u044B|\u0443)|\\\\s{0,3})`;\n\nexport function parseNumberPattern(match: string): number {\n    const num = match.toLowerCase();\n    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n        return INTEGER_WORD_DICTIONARY[num];\n    }\n    if (num.match(/\u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E/)) {\n        return 3;\n    } else if (num.match(/\u043F\u043E\u043B/)) {\n        return 0.5;\n    } else if (num.match(/\u043F\u0430\u0440/)) {\n        return 2;\n    } else if (num === \"\") {\n        return 1;\n    }\n    return parseFloat(num);\n}\n\n//-----------------------------\n\nexport const ORDINAL_NUMBER_PATTERN = `(?:${matchAnyPattern(ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:\u0433\u043E|\u043E\u0433\u043E|\u0435|\u043E\u0435)?)`;\nexport function parseOrdinalNumberPattern(match: string): number {\n    let num = match.toLowerCase();\n    if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {\n        return ORDINAL_WORD_DICTIONARY[num];\n    }\n\n    num = num.replace(/(?:st|nd|rd|th)$/i, \"\");\n    return parseInt(num);\n}\n\n//-----------------------------\n\nconst year = \"(?:\\\\s+(?:\u0433\u043E\u0434\u0443|\u0433\u043E\u0434\u0430|\u0433\u043E\u0434|\u0433|\u0433.))?\";\nexport const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}${year}\\\\s*(?:\u043D.\u044D.|\u0434\u043E \u043D.\u044D.|\u043D. \u044D.|\u0434\u043E \u043D. \u044D.)|[1-2][0-9]{3}${year}|[5-9][0-9]${year})`;\nexport function parseYear(match: string): number {\n    if (/(\u0433\u043E\u0434|\u0433\u043E\u0434\u0430|\u0433|\u0433.)/i.test(match)) {\n        match = match.replace(/(\u0433\u043E\u0434|\u0433\u043E\u0434\u0430|\u0433|\u0433.)/i, \"\");\n    }\n\n    if (/(\u0434\u043E \u043D.\u044D.|\u0434\u043E \u043D. \u044D.)/i.test(match)) {\n        //Before Common Era\n        match = match.replace(/(\u0434\u043E \u043D.\u044D.|\u0434\u043E \u043D. \u044D.)/i, \"\");\n        return -parseInt(match);\n    }\n\n    if (/(\u043D. \u044D.|\u043D.\u044D.)/i.test(match)) {\n        //Common Era\n        match = match.replace(/(\u043D. \u044D.|\u043D.\u044D.)/i, \"\");\n        return parseInt(match);\n    }\n\n    const rawYearNumber = parseInt(match);\n    return findMostLikelyADYear(rawYearNumber);\n}\n\n//-----------------------------\n\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,3}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\n\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(`(?:(?:\u043E\u043A\u043E\u043B\u043E|\u043F\u0440\u0438\u043C\u0435\u0440\u043D\u043E)\\\\s{0,3})?`, SINGLE_TIME_UNIT_PATTERN);\n\nexport function parseTimeUnits(timeunitText): TimeUnits {\n    const fragments = {};\n    let remainingText = timeunitText;\n    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    while (match) {\n        collectDateTimeFragment(fragments, match);\n        remainingText = remainingText.substring(match[0].length).trim();\n        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    }\n    return fragments;\n}\n\nfunction collectDateTimeFragment(fragments, match) {\n    const num = parseNumberPattern(match[1]);\n    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n    fragments[unit] = num;\n}\n", "import { TIME_UNITS_PATTERN, parseTimeUnits, REGEX_PARTS } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = `(?:(?:\u043E\u043A\u043E\u043B\u043E|\u043F\u0440\u0438\u043C\u0435\u0440\u043D\u043E)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_PATTERN})${REGEX_PARTS.rightBoundary}`;\nconst PATTERN_WITH_PREFIX = new RegExp(`(?:\u0432 \u0442\u0435\u0447\u0435\u043D\u0438\u0435|\u0432 \u0442\u0435\u0447\u0435\u043D\u0438\u0438)\\\\s*${PATTERN}`, REGEX_PARTS.flags);\n\nconst PATTERN_WITHOUT_PREFIX = new RegExp(PATTERN, \"i\");\n\nexport default class RUTimeUnitWithinFormatParser extends AbstractParserWithWordBoundaryChecking {\n    patternLeftBoundary(): string {\n        return REGEX_PARTS.leftBoundary;\n    }\n\n    innerPattern(context: ParsingContext): RegExp {\n        return context.option.forwardDate ? PATTERN_WITHOUT_PREFIX : PATTERN_WITH_PREFIX;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const timeUnits = parseTimeUnits(match[1]);\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingResult } from \"../../../results\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { MONTH_DICTIONARY, REGEX_PARTS } from \"../constants\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { ORDINAL_NUMBER_PATTERN, parseOrdinalNumberPattern } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\n// prettier-ignore\nconst PATTERN = new RegExp(\n    `(?:\u0441)?\\\\s*(${ORDINAL_NUMBER_PATTERN})` +\n        `(?:` +\n            `\\\\s{0,3}(?:\u043F\u043E|-|\u2013|\u0434\u043E)?\\\\s{0,3}` +\n            `(${ORDINAL_NUMBER_PATTERN})` +\n        `)?` +\n        `(?:-|\\\\/|\\\\s{0,3}(?:of)?\\\\s{0,3})` +\n        `(${matchAnyPattern(MONTH_DICTIONARY)})` +\n        `(?:` +\n            `(?:-|\\\\/|,?\\\\s{0,3})` +\n            `(${YEAR_PATTERN}(?![^\\\\s]\\\\d))` +\n        `)?` +\n    `${REGEX_PARTS.rightBoundary}`,\n    REGEX_PARTS.flags\n);\n\nconst DATE_GROUP = 1;\nconst DATE_TO_GROUP = 2;\nconst MONTH_NAME_GROUP = 3;\nconst YEAR_GROUP = 4;\n\nexport default class RUMonthNameLittleEndianParser extends AbstractParserWithWordBoundaryChecking {\n    patternLeftBoundary(): string {\n        return REGEX_PARTS.leftBoundary;\n    }\n\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        const result = context.createParsingResult(match.index, match[0]);\n\n        const month = MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n        const day = parseOrdinalNumberPattern(match[DATE_GROUP]);\n        if (day > 31) {\n            // e.g. \"[96 Aug]\" => \"9[6 Aug]\", we need to shift away from the next number\n            match.index = match.index + match[DATE_GROUP].length;\n            return null;\n        }\n\n        result.start.assign(\"month\", month);\n        result.start.assign(\"day\", day);\n\n        if (match[YEAR_GROUP]) {\n            const yearNumber = parseYear(match[YEAR_GROUP]);\n            result.start.assign(\"year\", yearNumber);\n        } else {\n            const year = findYearClosestToRef(context.refDate, day, month);\n            result.start.imply(\"year\", year);\n        }\n\n        if (match[DATE_TO_GROUP]) {\n            const endDate = parseOrdinalNumberPattern(match[DATE_TO_GROUP]);\n\n            result.end = result.start.clone();\n            result.end.assign(\"day\", endDate);\n        }\n\n        return result;\n    }\n}\n", "import { FULL_MONTH_NAME_DICTIONARY, MONTH_DICTIONARY, REGEX_PARTS } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    `((?:\u0432)\\\\s*)?` +\n        `(${matchAnyPattern(MONTH_DICTIONARY)})` +\n        `\\\\s*` +\n        `(?:` +\n        `[,-]?\\\\s*(${YEAR_PATTERN})?` +\n        `)?` +\n        `(?=[^\\\\s\\\\w]|\\\\s+[^0-9]|\\\\s+$|$)`,\n    REGEX_PARTS.flags\n);\n\nconst MONTH_NAME_GROUP = 2;\nconst YEAR_GROUP = 3;\n\n/**\n * The parser for parsing month name and year.\n * - \u042F\u043D\u0432\u0430\u0440\u044C, 2012\n * - \u042F\u043D\u0432\u0430\u0440\u044C 2012\n * - \u042F\u043D\u0432\u0430\u0440\u044C\n */\nexport default class RUMonthNameParser extends AbstractParserWithWordBoundaryChecking {\n    patternLeftBoundary(): string {\n        return REGEX_PARTS.leftBoundary;\n    }\n\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const monthName = match[MONTH_NAME_GROUP].toLowerCase();\n\n        // skip some unlikely words \"\u044F\u043D\u0432\", \"\u0444\u0435\u0440\", ..\n        if (match[0].length <= 3 && !FULL_MONTH_NAME_DICTIONARY[monthName]) {\n            return null;\n        }\n\n        const result = context.createParsingResult(match.index, match.index + match[0].length);\n        result.start.imply(\"day\", 1);\n\n        const month = MONTH_DICTIONARY[monthName];\n        result.start.assign(\"month\", month);\n\n        if (match[YEAR_GROUP]) {\n            const year = parseYear(match[YEAR_GROUP]);\n            result.start.assign(\"year\", year);\n        } else {\n            const year = findYearClosestToRef(context.refDate, 1, month);\n            result.start.imply(\"year\", year);\n        }\n\n        return result;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { Meridiem } from \"../../../index\";\nimport { AbstractTimeExpressionParser } from \"../../../common/parsers/AbstractTimeExpressionParser\";\nimport { REGEX_PARTS } from \"../constants\";\n\nexport default class RUTimeExpressionParser extends AbstractTimeExpressionParser {\n    constructor(strictMode) {\n        super(strictMode);\n    }\n\n    patternFlags(): string {\n        return REGEX_PARTS.flags;\n    }\n\n    primaryPatternLeftBoundary(): string {\n        return `(^|\\\\s|T|(?:[^\\\\p{L}\\\\p{N}_]))`;\n    }\n\n    followingPhase(): string {\n        return `\\\\s*(?:\\\\-|\\\\\u2013|\\\\~|\\\\\u301C|\u0434\u043E|\u0438|\u043F\u043E|\\\\?)\\\\s*`;\n    }\n\n    primaryPrefix(): string {\n        return `(?:(?:\u0432|\u0441)\\\\s*)??`;\n    }\n\n    primarySuffix(): string {\n        return `(?:\\\\s*(?:\u0443\u0442\u0440\u0430|\u0432\u0435\u0447\u0435\u0440\u0430|\u043F\u043E\u0441\u043B\u0435 \u043F\u043E\u043B\u0443\u0434\u043D\u044F))?(?!\\\\/)${REGEX_PARTS.rightBoundary}`;\n    }\n\n    extractPrimaryTimeComponents(context: ParsingContext, match: RegExpMatchArray): null | ParsingComponents {\n        const components = super.extractPrimaryTimeComponents(context, match);\n        if (components) {\n            if (match[0].endsWith(\"\u0432\u0435\u0447\u0435\u0440\u0430\")) {\n                const hour = components.get(\"hour\");\n                if (hour >= 6 && hour < 12) {\n                    components.assign(\"hour\", components.get(\"hour\") + 12);\n                    components.assign(\"meridiem\", Meridiem.PM);\n                } else if (hour < 6) {\n                    components.assign(\"meridiem\", Meridiem.AM);\n                }\n            }\n\n            if (match[0].endsWith(\"\u043F\u043E\u0441\u043B\u0435 \u043F\u043E\u043B\u0443\u0434\u043D\u044F\")) {\n                components.assign(\"meridiem\", Meridiem.PM);\n                const hour = components.get(\"hour\");\n                if (hour >= 0 && hour <= 6) {\n                    components.assign(\"hour\", components.get(\"hour\") + 12);\n                }\n            }\n\n            if (match[0].endsWith(\"\u0443\u0442\u0440\u0430\")) {\n                components.assign(\"meridiem\", Meridiem.AM);\n                const hour = components.get(\"hour\");\n                if (hour < 12) {\n                    components.assign(\"hour\", components.get(\"hour\"));\n                }\n            }\n        }\n\n        return components;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { parseTimeUnits, REGEX_PARTS, TIME_UNITS_PATTERN } from \"../constants\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nconst PATTERN = new RegExp(`(${TIME_UNITS_PATTERN})\\\\s{0,5}\u043D\u0430\u0437\u0430\u0434(?=(?:\\\\W|$))`, REGEX_PARTS.flags);\n\nexport default class RUTimeUnitAgoFormatParser extends AbstractParserWithWordBoundaryChecking {\n    patternLeftBoundary(): string {\n        return REGEX_PARTS.leftBoundary;\n    }\n\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const timeUnits = parseTimeUnits(match[1]);\n        const outputTimeUnits = reverseTimeUnits(timeUnits);\n\n        return ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);\n    }\n}\n", "import AbstractMergeDateRangeRefiner from \"../../../common/refiners/AbstractMergeDateRangeRefiner\";\n\n/**\n * Merging before and after results (see. AbstractMergeDateRangeRefiner)\n * This implementation should provide Russian connecting phases\n * - c 06.09.1989 [\u0434\u043E|\u043F\u043E] 11.12.1996\n * - c \u043F\u044F\u0442\u043D\u0438\u0446\u044B \u0438 \u0434\u043E \u0441\u0440\u0435\u0434\u044B\n */\nexport default class xf extends AbstractMergeDateRangeRefiner {\n    patternBetween(): RegExp {\n        return /^\\s*(\u0438 \u0434\u043E|\u0438 \u043F\u043E|\u0434\u043E|\u043F\u043E|-)\\s*$/i;\n    }\n}\n", "import AbstractMergeDateTimeRefiner from \"../../../common/refiners/AbstractMergeDateTimeRefiner\";\n\n/**\n * Merging date-only result and time-only result (see. AbstractMergeDateTimeRefiner).\n * This implementation should provide English connecting phases\n * - 2020-02-13 [\u0432] 6:00\n * - \u0417\u0430\u0432\u0442\u0440\u0430 [,] 7:00\n */\nexport default class RUMergeDateTimeRefiner extends AbstractMergeDateTimeRefiner {\n    patternBetween(): RegExp {\n        return new RegExp(`^\\\\s*(T|\u0432|,|-)?\\\\s*$`);\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport * as references from \"../../../common/casualReferences\";\nimport { REGEX_PARTS } from \"../constants\";\n\nconst PATTERN = new RegExp(\n    `(?:\u0441|\u0441\u043E)?\\\\s*(\u0441\u0435\u0433\u043E\u0434\u043D\u044F|\u0432\u0447\u0435\u0440\u0430|\u0437\u0430\u0432\u0442\u0440\u0430|\u043F\u043E\u0441\u043B\u0435\u0437\u0430\u0432\u0442\u0440\u0430|\u043F\u043E\u0437\u0430\u0432\u0447\u0435\u0440\u0430)${REGEX_PARTS.rightBoundary}`,\n    REGEX_PARTS.flags\n);\n\nexport default class RUCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n    patternLeftBoundary(): string {\n        return REGEX_PARTS.leftBoundary;\n    }\n\n    innerPattern(context: ParsingContext): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        const lowerText = match[1].toLowerCase();\n        const component = context.createParsingComponents();\n\n        switch (lowerText) {\n            case \"\u0441\u0435\u0433\u043E\u0434\u043D\u044F\":\n                return references.today(context.reference);\n\n            case \"\u0432\u0447\u0435\u0440\u0430\":\n                return references.yesterday(context.reference);\n\n            case \"\u0437\u0430\u0432\u0442\u0440\u0430\":\n                return references.tomorrow(context.reference);\n\n            case \"\u043F\u043E\u0441\u043B\u0435\u0437\u0430\u0432\u0442\u0440\u0430\":\n                return references.theDayAfter(context.reference, 2);\n\n            case \"\u043F\u043E\u0437\u0430\u0432\u0447\u0435\u0440\u0430\":\n                return references.theDayBefore(context.reference, 2);\n        }\n\n        return component;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport * as references from \"../../../common/casualReferences\";\nimport { assignSimilarDate } from \"../../../utils/dayjs\";\nimport dayjs from \"dayjs\";\nimport { REGEX_PARTS } from \"../constants\";\n\nconst PATTERN = new RegExp(\n    `(\u0441\u0435\u0439\u0447\u0430\u0441|\u043F\u0440\u043E\u0448\u043B\u044B\u043C\\\\s*\u0432\u0435\u0447\u0435\u0440\u043E\u043C|\u043F\u0440\u043E\u0448\u043B\u043E\u0439\\\\s*\u043D\u043E\u0447\u044C\u044E|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439\\\\s*\u043D\u043E\u0447\u044C\u044E|\u0441\u0435\u0433\u043E\u0434\u043D\u044F\\\\s*\u043D\u043E\u0447\u044C\u044E|\u044D\u0442\u043E\u0439\\\\s*\u043D\u043E\u0447\u044C\u044E|\u043D\u043E\u0447\u044C\u044E|\u044D\u0442\u0438\u043C \u0443\u0442\u0440\u043E\u043C|\u0443\u0442\u0440\u043E\u043C|\u0443\u0442\u0440\u0430|\u0432\\\\s*\u043F\u043E\u043B\u0434\u0435\u043D\u044C|\u0432\u0435\u0447\u0435\u0440\u043E\u043C|\u0432\u0435\u0447\u0435\u0440\u0430|\u0432\\\\s*\u043F\u043E\u043B\u043D\u043E\u0447\u044C)` +\n        `${REGEX_PARTS.rightBoundary}`,\n    REGEX_PARTS.flags\n);\nexport default class RUCasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n    patternLeftBoundary(): string {\n        return REGEX_PARTS.leftBoundary;\n    }\n\n    innerPattern() {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        let targetDate = dayjs(context.refDate);\n        const lowerText = match[0].toLowerCase();\n        const component = context.createParsingComponents();\n\n        if (lowerText === \"\u0441\u0435\u0439\u0447\u0430\u0441\") {\n            return references.now(context.reference);\n        }\n        if (lowerText === \"\u0432\u0435\u0447\u0435\u0440\u043E\u043C\" || lowerText === \"\u0432\u0435\u0447\u0435\u0440\u0430\") {\n            return references.evening(context.reference);\n        }\n        if (lowerText.endsWith(\"\u0443\u0442\u0440\u043E\u043C\") || lowerText.endsWith(\"\u0443\u0442\u0440\u0430\")) {\n            return references.morning(context.reference);\n        }\n        if (lowerText.match(/\u0432\\s*\u043F\u043E\u043B\u0434\u0435\u043D\u044C/)) {\n            return references.noon(context.reference);\n        }\n        if (lowerText.match(/\u043F\u0440\u043E\u0448\u043B\u043E\u0439\\s*\u043D\u043E\u0447\u044C\u044E/)) {\n            return references.lastNight(context.reference);\n        }\n        if (lowerText.match(/\u043F\u0440\u043E\u0448\u043B\u044B\u043C\\s*\u0432\u0435\u0447\u0435\u0440\u043E\u043C/)) {\n            return references.yesterdayEvening(context.reference);\n        }\n        if (lowerText.match(/\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439\\s*\u043D\u043E\u0447\u044C\u044E/)) {\n            const daysToAdd = targetDate.hour() < 22 ? 1 : 2;\n            targetDate = targetDate.add(daysToAdd, \"day\");\n            assignSimilarDate(component, targetDate);\n            component.imply(\"hour\", 0);\n        }\n        if (lowerText.match(/\u0432\\s*\u043F\u043E\u043B\u043D\u043E\u0447\u044C/) || lowerText.endsWith(\"\u043D\u043E\u0447\u044C\u044E\")) {\n            return references.midnight(context.reference);\n        }\n        return component;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { REGEX_PARTS, WEEKDAY_DICTIONARY } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { toDayJSWeekday } from \"../../../calculation/weeks\";\n\nconst PATTERN = new RegExp(\n    `(?:(?:,|\\\\(|\uFF08)\\\\s*)?` +\n        `(?:\u0432\\\\s*?)?` +\n        `(?:(\u044D\u0442\u0443|\u044D\u0442\u043E\u0442|\u043F\u0440\u043E\u0448\u043B\u044B\u0439|\u043F\u0440\u043E\u0448\u043B\u0443\u044E|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0443\u044E|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0433\u043E)\\\\s*)?` +\n        `(${matchAnyPattern(WEEKDAY_DICTIONARY)})` +\n        `(?:\\\\s*(?:,|\\\\)|\uFF09))?` +\n        `(?:\\\\s*\u043D\u0430\\\\s*(\u044D\u0442\u043E\u0439|\u043F\u0440\u043E\u0448\u043B\u043E\u0439|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439)\\\\s*\u043D\u0435\u0434\u0435\u043B\u0435)?` +\n        `${REGEX_PARTS.rightBoundary}`,\n    REGEX_PARTS.flags\n);\n\nconst PREFIX_GROUP = 1;\nconst WEEKDAY_GROUP = 2;\nconst POSTFIX_GROUP = 3;\n\nexport default class RUWeekdayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    patternLeftBoundary(): string {\n        return REGEX_PARTS.leftBoundary;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();\n        const offset = WEEKDAY_DICTIONARY[dayOfWeek];\n        const prefix = match[PREFIX_GROUP];\n        const postfix = match[POSTFIX_GROUP];\n        let modifierWord = prefix || postfix;\n        modifierWord = modifierWord || \"\";\n        modifierWord = modifierWord.toLowerCase();\n\n        let modifier = null;\n        if (modifierWord == \"\u043F\u0440\u043E\u0448\u043B\u044B\u0439\" || modifierWord == \"\u043F\u0440\u043E\u0448\u043B\u0443\u044E\" || modifierWord == \"\u043F\u0440\u043E\u0448\u043B\u043E\u0439\") {\n            modifier = \"last\";\n        } else if (\n            modifierWord == \"\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439\" ||\n            modifierWord == \"\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0443\u044E\" ||\n            modifierWord == \"\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439\" ||\n            modifierWord == \"\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0433\u043E\"\n        ) {\n            modifier = \"next\";\n        } else if (modifierWord == \"\u044D\u0442\u043E\u0442\" || modifierWord == \"\u044D\u0442\u0443\" || modifierWord == \"\u044D\u0442\u043E\u0439\") {\n            modifier = \"this\";\n        }\n\n        const date = toDayJSWeekday(context.refDate, offset, modifier);\n        return context\n            .createParsingComponents()\n            .assign(\"weekday\", offset)\n            .imply(\"day\", date.date())\n            .imply(\"month\", date.month() + 1)\n            .imply(\"year\", date.year());\n    }\n}\n", "import { REGEX_PARTS, TIME_UNIT_DICTIONARY } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport dayjs from \"dayjs\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\n\nconst PATTERN = new RegExp(\n    `(\u0432 \u043F\u0440\u043E\u0448\u043B\u043E\u043C|\u043D\u0430 \u043F\u0440\u043E\u0448\u043B\u043E\u0439|\u043D\u0430 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439|\u0432 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u043C|\u043D\u0430 \u044D\u0442\u043E\u0439|\u0432 \u044D\u0442\u043E\u043C)\\\\s*(${matchAnyPattern(\n        TIME_UNIT_DICTIONARY\n    )})(?=\\\\s*)${REGEX_PARTS.rightBoundary}`,\n    REGEX_PARTS.flags\n);\n\nconst MODIFIER_WORD_GROUP = 1;\nconst RELATIVE_WORD_GROUP = 2;\n\nexport default class RURelativeDateFormatParser extends AbstractParserWithWordBoundaryChecking {\n    patternLeftBoundary(): string {\n        return REGEX_PARTS.leftBoundary;\n    }\n\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();\n        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();\n        const timeunit = TIME_UNIT_DICTIONARY[unitWord];\n\n        if (modifier == \"\u043D\u0430 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439\" || modifier == \"\u0432 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u043C\") {\n            const timeUnits = {};\n            timeUnits[timeunit] = 1;\n            return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n        }\n\n        if (modifier == \"\u0432 \u043F\u0440\u043E\u0448\u043B\u043E\u043C\" || modifier == \"\u043D\u0430 \u043F\u0440\u043E\u0448\u043B\u043E\u0439\") {\n            const timeUnits = {};\n            timeUnits[timeunit] = -1;\n            return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n        }\n\n        const components = context.createParsingComponents();\n        let date = dayjs(context.reference.instant);\n\n        // This week\n        if (timeunit.match(/week/i)) {\n            date = date.add(-date.get(\"d\"), \"d\");\n            components.imply(\"day\", date.date());\n            components.imply(\"month\", date.month() + 1);\n            components.imply(\"year\", date.year());\n        }\n\n        // This month\n        else if (timeunit.match(/month/i)) {\n            date = date.add(-date.date() + 1, \"d\");\n            components.imply(\"day\", date.date());\n            components.assign(\"year\", date.year());\n            components.assign(\"month\", date.month() + 1);\n        }\n\n        // This year\n        else if (timeunit.match(/year/i)) {\n            date = date.add(-date.date() + 1, \"d\");\n            date = date.add(-date.month(), \"month\");\n\n            components.imply(\"day\", date.date());\n            components.imply(\"month\", date.month() + 1);\n            components.assign(\"year\", date.year());\n        }\n\n        return components;\n    }\n}\n", "import { TIME_UNITS_PATTERN, parseTimeUnits, REGEX_PARTS } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nconst PATTERN = new RegExp(\n    `(\u044D\u0442\u0438|\u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0435|\u043F\u0440\u043E\u0448\u043B\u044B\u0435|\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0435|\u043F\u043E\u0441\u043B\u0435|\u0447\u0435\u0440\u0435\u0437|\\\\+|-)\\\\s*(${TIME_UNITS_PATTERN})${REGEX_PARTS.rightBoundary}`,\n    REGEX_PARTS.flags\n);\n\nexport default class RUTimeUnitCasualRelativeFormatParser extends AbstractParserWithWordBoundaryChecking {\n    patternLeftBoundary(): string {\n        return REGEX_PARTS.leftBoundary;\n    }\n\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const prefix = match[1].toLowerCase();\n        let timeUnits = parseTimeUnits(match[2]);\n        switch (prefix) {\n            case \"\u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0435\":\n            case \"\u043F\u0440\u043E\u0448\u043B\u044B\u0435\":\n            case \"-\":\n                timeUnits = reverseTimeUnits(timeUnits);\n                break;\n        }\n\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n", "/**\n * Chrono components for Russian support (*parsers*, *refiners*, and *configuration*)\n *\n * @module\n */\n\nimport RUTimeUnitWithinFormatParser from \"./parsers/RUTimeUnitWithinFormatParser\";\nimport RUMonthNameLittleEndianParser from \"./parsers/RUMonthNameLittleEndianParser\";\nimport RUMonthNameParser from \"./parsers/RUMonthNameParser\";\nimport RUTimeExpressionParser from \"./parsers/RUTimeExpressionParser\";\nimport RUTimeUnitAgoFormatParser from \"./parsers/RUTimeUnitAgoFormatParser\";\nimport RUMergeDateRangeRefiner from \"./refiners/RUMergeDateRangeRefiner\";\nimport RUMergeDateTimeRefiner from \"./refiners/RUMergeDateTimeRefiner\";\n\nimport { includeCommonConfiguration } from \"../../configurations\";\nimport RUCasualDateParser from \"./parsers/RUCasualDateParser\";\nimport RUCasualTimeParser from \"./parsers/RUCasualTimeParser\";\nimport RUWeekdayParser from \"./parsers/RUWeekdayParser\";\nimport RURelativeDateFormatParser from \"./parsers/RURelativeDateFormatParser\";\n\nimport { ParsedResult, ParsingOption } from \"../../index\";\nimport { Chrono, Configuration } from \"../../chrono\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser\";\nimport RUTimeUnitCasualRelativeFormatParser from \"./parsers/RUTimeUnitCasualRelativeFormatParser\";\n\n/**\n * Chrono object configured for parsing *casual* Russian\n */\nexport const casual = new Chrono(createCasualConfiguration());\n\n/**\n * Chrono object configured for parsing *strict* Russian\n */\nexport const strict = new Chrono(createConfiguration(true));\n\n/**\n * A shortcut for ru.casual.parse()\n */\nexport function parse(text: string, ref?: Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\n/**\n * A shortcut for ru.casual.parseDate()\n */\nexport function parseDate(text: string, ref?: Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\n/**\n * Create a default *casual* {@Link Configuration} for Russian chrono.\n * It calls {@Link createConfiguration} and includes additional parsers.\n */\nexport function createCasualConfiguration(): Configuration {\n    const option = createConfiguration(false);\n    option.parsers.unshift(new RUCasualDateParser());\n    option.parsers.unshift(new RUCasualTimeParser());\n    option.parsers.unshift(new RUMonthNameParser());\n    option.parsers.unshift(new RURelativeDateFormatParser());\n    option.parsers.unshift(new RUTimeUnitCasualRelativeFormatParser());\n    return option;\n}\n\n/**\n * Create a default {@Link Configuration} for Russian chrono\n *\n * @param strictMode If the timeunit mentioning should be strict, not casual\n */\nexport function createConfiguration(strictMode = true): Configuration {\n    return includeCommonConfiguration(\n        {\n            parsers: [\n                new SlashDateFormatParser(true),\n                new RUTimeUnitWithinFormatParser(),\n                new RUMonthNameLittleEndianParser(),\n                new RUWeekdayParser(),\n                new RUTimeExpressionParser(strictMode),\n                new RUTimeUnitAgoFormatParser(),\n            ],\n            refiners: [new RUMergeDateTimeRefiner(), new RUMergeDateRangeRefiner()],\n        },\n        strictMode\n    );\n}\n", "import { DebugHandler, DebugConsume } from \"./debugging\";\nimport * as en from \"./locales/en\";\nimport { Chrono, Parser, Refiner } from \"./chrono\";\n\nexport { en, Chrono, Parser, Refiner };\n\nexport interface ParsingOption {\n    /**\n     * To parse only forward dates (the results should be after the reference date).\n     * This effects date/time implication (e.g. weekday or time mentioning)\n     */\n    forwardDate?: boolean;\n\n    /**\n     * Additional timezone keywords for the parsers to recognize\n     */\n    timezones?: { [tzKeyword: string]: number };\n\n    /**\n     * Internal debug event handler.\n     * @internal\n     */\n    debug?: DebugHandler | DebugConsume;\n}\n\nexport interface ParsingReference {\n    /**\n     * Reference date. The instant (JavaScript Date object) when the input is written or mention.\n     * This effect date/time implication (e.g. weekday or time mentioning).\n     * (default = now)\n     */\n    instant?: Date;\n\n    /**\n     * Reference timezone. The timezone where the input is written or mention.\n     * Date/time implication will account the difference between input timezone and the current system timezone.\n     * (default = current timezone)\n     */\n    timezone?: string | number;\n}\n\n/**\n * Parsed result or final output.\n * Each result object represents a date/time (or date/time-range) mentioning in the input.\n */\nexport interface ParsedResult {\n    readonly refDate: Date;\n    readonly index: number;\n    readonly text: string;\n\n    readonly start: ParsedComponents;\n    readonly end?: ParsedComponents;\n\n    /**\n     * Create a javascript date object (from the result.start).\n     */\n    date(): Date;\n}\n\n/**\n * A collection of parsed date/time components (e.g. day, hour, minute, ..., etc).\n *\n * Each parsed component has three different levels of certainty.\n * - *Certain* (or *Known*): The component is directly mentioned and parsed.\n * - *Implied*: The component is not directly mentioned, but implied by other parsed information.\n * - *Unknown*: Completely no mention of the component.\n */\nexport interface ParsedComponents {\n    /**\n     * Check the component certainly if the component is *Certain* (or *Known*)\n     */\n    isCertain(component: Component): boolean;\n\n    /**\n     * Get the component value for either *Certain* or *Implied* value.\n     */\n    get(component: Component): number | null;\n\n    /**\n     * @return a javascript date object.\n     */\n    date(): Date;\n}\n\nexport type Component =\n    | \"year\"\n    | \"month\"\n    | \"day\"\n    | \"weekday\"\n    | \"hour\"\n    | \"minute\"\n    | \"second\"\n    | \"millisecond\"\n    | \"meridiem\"\n    | \"timezoneOffset\";\n\nexport enum Meridiem {\n    AM = 0,\n    PM = 1,\n}\n\n// Export all locales\nimport * as de from \"./locales/de\";\nimport * as fr from \"./locales/fr\";\nimport * as ja from \"./locales/ja\";\nimport * as pt from \"./locales/pt\";\nimport * as nl from \"./locales/nl\";\nimport * as zh from \"./locales/zh\";\nimport * as ru from \"./locales/ru\";\nexport { de, fr, ja, pt, nl, zh, ru };\n\n/**\n * A shortcut for {@link en | chrono.en.strict}\n */\nexport const strict = en.strict;\n\n/**\n * A shortcut for {@link en | chrono.en.casual}\n */\nexport const casual = en.casual;\n\n/**\n * A shortcut for {@link en | chrono.en.casual.parse()}\n */\nexport function parse(text: string, ref?: ParsingReference | Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\n/**\n * A shortcut for {@link en | chrono.en.casual.parseDate()}\n */\nexport function parseDate(text: string, ref?: ParsingReference | Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n", "import useAppExists from \"./hooks/useAppExists\";\nimport useConfig from \"./hooks/useConfig\";\nimport { List } from \"@raycast/api\";\nimport { useState } from \"react\";\nimport * as chrono from \"chrono-node\";\nimport { DailyNotes } from \"./components/DailyNotes\";\n\n// noinspection JSUnusedGlobalSymbols\nexport default function dailyNotes() {\n  const appExists = useAppExists();\n  const { config, configLoading } = useConfig(appExists);\n  const [query, setQuery] = useState(\"\");\n  const [date, setDate] = useState<Date>();\n\n  const parseDate = (text: string) => {\n    setQuery(text);\n\n    const date = chrono.parseDate(text);\n    if (!date) {\n      setDate(undefined);\n      return;\n    }\n\n    setDate(date);\n  };\n\n  return (\n    <List isLoading={configLoading} onSearchTextChange={parseDate}>\n      <DailyNotes appExists={appExists.appExists} config={config} date={date} query={query} />\n    </List>\n  );\n}\n", "import { useEffect, useState } from \"react\";\nimport { getApplications } from \"@raycast/api\";\nimport { bundleIds, getPreferences } from \"../preferences\";\n\nexport type UseAppExists = {\n  appExistsLoading: boolean;\n  appExists: boolean;\n};\n\nexport default function useAppExists() {\n  const [state, setState] = useState<UseAppExists>({ appExistsLoading: true, appExists: false });\n\n  useEffect(() => {\n    const check = async () => {\n      const apps = await getApplications();\n      const preferredApp = getPreferences().application;\n      const found = apps.find((app) => app.bundleId && bundleIds.includes(app.bundleId as typeof bundleIds[number]));\n      const app = preferredApp || found;\n\n      if (!app) {\n        return setState({ appExistsLoading: false, appExists: false });\n      }\n\n      setState({ appExistsLoading: false, appExists: true });\n    };\n\n    check();\n  }, []);\n\n  return state;\n}\n", "import { Application, getPreferenceValues } from \"@raycast/api\";\n\nexport const bundleIds = <const>[\"com.lukilabs.lukiapp\", \"com.lukilabs.lukiapp-setapp\"];\n\nexport interface Preferences {\n  application: Application;\n}\n\nexport const getPreferences = (): Preferences => {\n  return getPreferenceValues<Preferences>();\n};\n", "import { useEffect, useState } from \"react\";\nimport Config from \"../Config\";\nimport { UseAppExists } from \"./useAppExists\";\n\nexport type UseConfig = {\n  configLoading: boolean;\n  config: Config | null;\n};\n\nexport default function useConfig({ appExistsLoading, appExists }: UseAppExists) {\n  const [state, setState] = useState<UseConfig>({ configLoading: true, config: null as Config | null });\n\n  useEffect(() => {\n    if (appExistsLoading) return;\n\n    if (!appExists) {\n      return setState((prev) => ({ ...prev, configIsLoading: false }));\n    }\n\n    setState({ configLoading: false, config: new Config() });\n  }, [appExistsLoading]);\n\n  return state;\n}\n", "import { homedir } from \"os\";\nimport { readdirSync, existsSync } from \"fs\";\nimport path from \"path\";\n\nconst bundleIds = [\"com.lukilabs.lukiapp\", \"com.lukilabs.lukiapp-setapp\"];\nconst [craftDataRoot] = bundleIds\n  .map((id) => path.join(homedir(), `/Library/Containers/${id}/Data/Library/Application Support/${id}`))\n  .filter(existsSync);\nconst searchPath = path.join(craftDataRoot, \"Search\");\n\ntype SpaceSQLite = {\n  path: string;\n  spaceID: string;\n  primary: boolean;\n};\n\nexport default class Config {\n  spaces: SpaceSQLite[];\n\n  constructor() {\n    try {\n      const pathToIndexDatabases = searchPath.replace(\"~\", homedir());\n      const databasesForExistingRealms = this.buildFilterRegexForExistingRealms();\n\n      this.spaces = readdirSync(pathToIndexDatabases)\n        .filter((str) => str.match(databasesForExistingRealms))\n        .map((str) => this.makeSpaceFromStr(pathToIndexDatabases, str));\n    } catch (e) {\n      console.debug(`failed getting files: ${e}`);\n      this.spaces = [];\n    }\n\n    console.debug(\"constructed config object\");\n  }\n\n  primarySpace = () => this.spaces.find((space) => space.primary);\n\n  private buildFilterRegexForExistingRealms = (): RegExp => {\n    const root = craftDataRoot.replace(\"~\", homedir());\n\n    const regexIDsPart = readdirSync(root)\n      .filter(this.selectRealmFiles)\n      .map(this.extractSpaceIDs)\n      .filter((str) => str)\n      .join(\"|\");\n\n    return new RegExp(`(?:${regexIDsPart})[^.]*.sqlite$`);\n  };\n\n  private selectRealmFiles = (str: string): boolean => str.match(/\\.realm$/) !== null;\n\n  // Main Realm file is named in this way:\n  // LukiMain_e95db95e-286c-e7c9-276e-c61b378d1e1c_2E3178A2-26CD-4991-BBCB-67F097040B59.realm\n  //          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  //          ID of the main space\n  //\n  // Additional spaces are named like this:\n  // LukiMain_e95db95e-286c-e7c9-276e-c61b378d1e1c||b3fccbd6-1e8e-a73f-16d5-9d14a9f17793_2E3178A2-26CD-4991-BBCB-67F097040B59.realm\n  //                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  //                                                ID of secondary spaces\n  //\n  // With the provided string, this function selects ID or returns undefined.\n  private extractSpaceIDs = (str: string): string | undefined => {\n    const split = str.split(\"_\");\n    if (split.length !== 3) {\n      return;\n    }\n\n    return split[1].split(\"||\").pop();\n  };\n\n  private makeSpaceFromStr = (pwd: string, str: string): SpaceSQLite => ({\n    primary: !str.includes(\"||\"),\n    path: path.join(pwd, str),\n    spaceID: str.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/g)?.pop() || \"\",\n  });\n}\n", "import Config from \"../Config\";\nimport { Action, ActionPanel, List, openExtensionPreferences } from \"@raycast/api\";\nimport { DailyNoteRef } from \"./DailyNoteRef\";\nimport { Shortcut } from \"./Shortcut\";\n\ntype DailyNotesParams = {\n  appExists: boolean;\n  config: Config | null;\n  query: string;\n  date: Date | undefined;\n};\n\nexport const DailyNotes = ({ appExists, config, query, date }: DailyNotesParams) => {\n  if (!appExists || !config) {\n    return (\n      <List.EmptyView\n        actions={\n          <ActionPanel>\n            <Action title=\"Open Extension Preferences\" onAction={openExtensionPreferences} />\n          </ActionPanel>\n        }\n        title=\"No results\"\n        description=\"Selecting Craft application in preferences might help\"\n        icon={\"command-icon-small.png\"}\n      />\n    );\n  }\n\n  const space = config.primarySpace();\n\n  if (!space) {\n    return (\n      <List.EmptyView\n        title=\"Craft not initialized\"\n        description=\"Try using Craft app first\"\n        icon={\"command-icon-small.png\"}\n      />\n    );\n  }\n\n  if (query.length > 0) {\n    return <DailyNoteRef date={date} text={query} spaceID={space.spaceID} />;\n  }\n\n  return (\n    <List.Section title=\"Shortcuts\">\n      <Shortcut dayRef=\"today\" spaceID={space.spaceID} />\n      <Shortcut dayRef=\"yesterday\" spaceID={space.spaceID} />\n      <Shortcut dayRef=\"tomorrow\" spaceID={space.spaceID} />\n    </List.Section>\n  );\n};\n", "import { Action, ActionPanel, List } from \"@raycast/api\";\n\nexport const DailyNoteRef = ({ date, text, spaceID }: { date: Date | undefined; text: string; spaceID: string }) => (\n  <List.Item\n    title={date ? date.toDateString() : \"Specify query\"}\n    subtitle={text}\n    actions={\n      !date ? undefined : (\n        <ActionPanel>\n          <Action.Open\n            title={`Open ${date.toDateString()}`}\n            target={`craftdocs://openByQuery?query=${date.toISOString().substring(0, 10)}&spaceId=${spaceID}`}\n          />\n        </ActionPanel>\n      )\n    }\n  />\n);\n", "import { Action, ActionPanel, List } from \"@raycast/api\";\nimport * as chrono from \"chrono-node\";\n\ntype DayReference = \"today\" | \"yesterday\" | \"tomorrow\";\n\nexport const Shortcut = ({ dayRef, spaceID }: { dayRef: DayReference; spaceID: string }) => (\n  <List.Item\n    title={toTitleCase(dayRef)}\n    subtitle={chrono.parseDate(dayRef).toDateString()}\n    actions={\n      <ActionPanel>\n        <Action.Open\n          title={`Open ${dayRef.charAt(0).toUpperCase() + dayRef.slice(1)} Notes`}\n          target={`craftdocs://openByQuery?query=${dayRef}&spaceId=${spaceID}`}\n        />\n      </ActionPanel>\n    }\n  />\n);\n\nconst toTitleCase = (str: string) => str.substring(0, 1).toUpperCase() + str.substring(1);\n"],
  "mappings": "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K,IACL,IAAK,IACL,IAAK,KACL,KAAM,KACN,IAAK,KACL,IAAK,GACL,IAAK,IACL,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,KACL,KAAM,IACN,IAAK,GACL,MAAO,IACP,MAAO,IACP,IAAK,KACL,KAAM,KACN,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,IACL,IAAK,IACL,KAAM,IACN,KAAM,IACN,MAAO,KACP,KAAM,KACN,IAAK,IACL,IAAK,KACL,IAAK,KACL,KAAM,IACN,IAAK,IACL,KAAM,EACN,IAAK,IACL,IAAK,KACL,GAAI,KACJ,KAAM,IACN,IAAK,IACL,KAAM,KACN,IAAK,KACL,IAAK,KACL,KAAM,KACN,KAAM,KACN,IAAK,IACL,IAAK,KACL,KAAM,IACN,IAAK,EACL,IAAK,IACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,KAAM,KACN,IAAK,KACL,IAAK,KACL,IAAK,KACL,KAAM,KACN,IAAK,IACL,IAAK,KACL,IAAK,IACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,KAAM,IACN,MAAO,IACP,KAAM,IACN,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,MAAO,IACP,KAAM,IACN,IAAK,IACL,KAAM,IACN,KAAM,IACN,KAAM,IACN,KAAM,IACN,MAAO,IACP,KAAM,IACN,KAAM,KACN,KAAM,IACN,IAAK,KACL,KAAM,IACN,IAAK,GACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,MAAO,IACP,KAAM,IACN,IAAK,IACL,IAAK,KACL,IAAK,KACL,KAAM,IACN,KAAM,IACN,MAAO,IACP,KAAM,IACN,IAAK,KACL,IAAK,KACL,MAAO,IACP,KAAM,IACN,IAAK,IACL,KAAM,IACN,IAAK,IACL,IAAK,IACL,KAAM,KACN,KAA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",
  "names": ["repeatedTimeunitPattern", "prefix", "singleTimeunitPattern", "singleTimeunitPatternNoCapture", "exports", "extractTerms", "dictionary", "keys", "matchAnyPattern", "a", "b", "require_dayjs_min", "__commonJSMin", "exports", "module", "t", "e", "n", "r", "i", "s", "u", "a", "f", "h", "c", "d", "$", "l", "y", "M", "m", "g", "v", "D", "p", "_", "S", "w", "O", "o", "T", "dayjs_1", "__importDefault", "findMostLikelyADYear", "yearNumber", "exports", "findYearClosestToRef", "refDate", "day", "month", "refMoment", "dateMoment", "nextYear", "lastYear", "pattern_1", "years_1", "exports", "parseNumberPattern", "match", "num", "parseOrdinalNumberPattern", "parseYear", "rawYearNumber", "SINGLE_TIME_UNIT_PATTERN", "SINGLE_TIME_UNIT_REGEX", "parseTimeUnits", "timeunitText", "fragments", "remainingText", "collectDateTimeFragment", "unit", "require_quarterOfYear", "__commonJSMin", "exports", "module", "t", "n", "i", "r", "s", "e", "u", "o", "index_1", "assignTheNextDay", "component", "targetDayJs", "assignSimilarDate", "implySimilarTime", "exports", "assignSimilarTime", "exports", "toTimezoneOffset", "timezoneInput", "_a", "quarterOfYear_1", "__importDefault", "dayjs_1", "dayjs_2", "timezone_1", "ReferenceWithTimezone", "input", "_a", "exports", "ParsingComponents", "_ParsingComponents", "reference", "knownComponents", "key", "refDayJs", "component", "value", "date", "currentTimezoneOffset", "targetTimezoneOffset", "_b", "fragments", "components", "ParsingResult", "_ParsingResult", "index", "text", "start", "end", "result", "AbstractParserWithWordBoundaryChecking", "context", "innerPattern", "match", "header", "_a", "exports", "constants_1", "results_1", "AbstractParserWithWordBoundary_1", "PATTERN_WITH_PREFIX", "PATTERN_WITHOUT_PREFIX", "ENTimeUnitWithinFormatParser", "context", "match", "timeUnits", "exports", "years_1", "constants_1", "constants_2", "constants_3", "pattern_1", "AbstractParserWithWordBoundary_1", "PATTERN", "DATE_GROUP", "DATE_TO_GROUP", "MONTH_NAME_GROUP", "YEAR_GROUP", "ENMonthNameLittleEndianParser", "context", "match", "result", "month", "day", "yearNumber", "year", "endDate", "exports", "years_1", "constants_1", "constants_2", "constants_3", "pattern_1", "AbstractParserWithWordBoundary_1", "PATTERN", "MONTH_NAME_GROUP", "DATE_GROUP", "DATE_TO_GROUP", "YEAR_GROUP", "ENMonthNameMiddleEndianParser", "context", "match", "month", "day", "components", "year", "endDate", "result", "exports", "constants_1", "years_1", "pattern_1", "constants_2", "AbstractParserWithWordBoundary_1", "PATTERN", "PREFIX_GROUP", "MONTH_NAME_GROUP", "YEAR_GROUP", "ENMonthNameParser", "context", "match", "monthName", "result", "month", "year", "exports", "constants_1", "pattern_1", "AbstractParserWithWordBoundary_1", "PATTERN", "YEAR_NUMBER_GROUP", "MONTH_NAME_GROUP", "MONTH_NUMBER_GROUP", "DATE_NUMBER_GROUP", "ENCasualYearMonthDayParser", "context", "match", "month", "year", "exports", "AbstractParserWithWordBoundary_1", "PATTERN", "MONTH_GROUP", "YEAR_GROUP", "ENSlashMonthFormatParser", "context", "match", "year", "month", "exports", "index_1", "primaryTimePattern", "leftBoundary", "primaryPrefix", "primarySuffix", "flags", "followingTimePatten", "followingPhase", "followingSuffix", "HOUR_GROUP", "MINUTE_GROUP", "SECOND_GROUP", "MILLI_SECOND_GROUP", "AM_PM_HOUR_GROUP", "AbstractTimeExpressionParser", "strictMode", "context", "match", "startComponents", "index", "text", "result", "remainingText", "followingMatch", "strict", "components", "minute", "meridiem", "hour", "ampm", "millisecond", "second", "endingWithNumbers", "endingNumbers", "startingNumbers", "endingNumberVal", "startingNumberVal", "exports", "index_1", "AbstractTimeExpressionParser_1", "ENTimeExpressionParser", "strictMode", "context", "match", "components", "hour", "exports", "reverseTimeUnits", "timeUnits", "reversed", "key", "exports", "addImpliedTimeUnits", "components", "output", "date", "constants_1", "results_1", "AbstractParserWithWordBoundary_1", "timeunits_1", "PATTERN", "STRICT_PATTERN", "ENTimeUnitAgoFormatParser", "strictMode", "context", "match", "timeUnits", "outputTimeUnits", "exports", "constants_1", "results_1", "AbstractParserWithWordBoundary_1", "PATTERN", "STRICT_PATTERN", "GROUP_NUM_TIMEUNITS", "ENTimeUnitLaterFormatParser", "strictMode", "context", "match", "fragments", "exports", "Filter", "context", "results", "r", "exports", "MergingRefiner", "mergedResults", "curResult", "nextResult", "i", "textBetween", "left", "right", "mergedResult", "abstractRefiners_1", "AbstractMergeDateRangeRefiner", "textBetween", "currentResult", "nextResult", "fromResult", "toResult", "key", "fromMoment", "toMoment", "result", "exports", "AbstractMergeDateRangeRefiner_1", "__importDefault", "ENMergeDateRangeRefiner", "exports", "index_1", "mergeDateTimeResult", "dateResult", "timeResult", "result", "beginDate", "beginTime", "mergeDateTimeComponent", "endDate", "endTime", "endDateTime", "exports", "dateComponent", "timeComponent", "dateTimeComponent", "abstractRefiners_1", "mergingCalculation_1", "ENMergeDateTimeRefiner", "textBetween", "currentResult", "nextResult", "result", "exports", "AbstractMergeDateTimeRefiner_1", "__importDefault", "ENMergeDateTimeRefiner", "exports", "TIMEZONE_NAME_PATTERN", "DEFAULT_TIMEZONE_ABBR_MAP", "ExtractTimezoneAbbrRefiner", "timezoneOverrides", "context", "results", "_a", "result", "suffix", "match", "timezoneAbbr", "extractedTimezoneOffset", "_b", "currentTimezoneOffset", "exports", "TIMEZONE_OFFSET_PATTERN", "TIMEZONE_OFFSET_SIGN_GROUP", "TIMEZONE_OFFSET_HOUR_OFFSET_GROUP", "TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP", "ExtractTimezoneOffsetRefiner", "context", "results", "result", "suffix", "match", "hourOffset", "minuteOffset", "timezoneOffset", "exports", "OverlapRemovalRefiner", "context", "results", "filteredResults", "prevResult", "result", "exports", "dayjs_1", "__importDefault", "ForwardDateRefiner", "context", "results", "result", "refMoment", "exports", "abstractRefiners_1", "UnlikelyFormatFilter", "strictMode", "context", "result", "exports", "AbstractParserWithWordBoundary_1", "PATTERN", "YEAR_NUMBER_GROUP", "MONTH_NUMBER_GROUP", "DATE_NUMBER_GROUP", "HOUR_NUMBER_GROUP", "MINUTE_NUMBER_GROUP", "SECOND_NUMBER_GROUP", "MILLISECOND_NUMBER_GROUP", "TZD_HOUR_OFFSET_GROUP", "TZD_MINUTE_OFFSET_GROUP", "ISOFormatParser", "context", "match", "components", "hourOffset", "minuteOffset", "offset", "exports", "abstractRefiners_1", "MergeWeekdayComponentRefiner", "textBetween", "currentResult", "nextResult", "newResult", "exports", "ExtractTimezoneAbbrRefiner_1", "__importDefault", "ExtractTimezoneOffsetRefiner_1", "OverlapRemovalRefiner_1", "ForwardDateRefiner_1", "UnlikelyFormatFilter_1", "ISOFormatParser_1", "MergeWeekdayComponentRefiner_1", "includeCommonConfiguration", "configuration", "strictMode", "exports", "results_1", "dayjs_1", "__importDefault", "dayjs_2", "index_1", "now", "reference", "targetDate", "component", "exports", "today", "yesterday", "theDayBefore", "numDay", "theDayAfter", "tomorrow", "nDays", "tonight", "implyHour", "lastNight", "evening", "yesterdayEvening", "midnight", "morning", "noon", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "dayjs_2", "references", "__importStar", "PATTERN", "ENCasualDateParser", "context", "match", "targetDate", "lowerText", "component", "exports", "index_1", "AbstractParserWithWordBoundary_1", "dayjs_1", "__importDefault", "dayjs_2", "PATTERN", "ENCasualTimeParser", "context", "match", "targetDate", "component", "exports", "dayjs_1", "__importDefault", "toDayJSWeekday", "refDate", "offset", "modifier", "toDayJSClosestWeekday", "date", "exports", "refOffset", "constants_1", "pattern_1", "AbstractParserWithWordBoundary_1", "weeks_1", "PATTERN", "PREFIX_GROUP", "WEEKDAY_GROUP", "POSTFIX_GROUP", "ENWeekdayParser", "context", "match", "dayOfWeek", "offset", "prefix", "postfix", "modifierWord", "modifier", "date", "exports", "constants_1", "results_1", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "pattern_1", "PATTERN", "MODIFIER_WORD_GROUP", "RELATIVE_WORD_GROUP", "ENRelativeDateFormatParser", "context", "match", "modifier", "unitWord", "timeunit", "timeUnits", "components", "date", "exports", "results_1", "en_1", "Chrono", "_Chrono", "configuration", "text", "referenceDate", "option", "results", "context", "ParsingContext", "parser", "parsedResults", "b", "refiner", "pattern", "originalText", "remainingText", "match", "index", "result", "parsedResult", "exports", "refDate", "components", "textOrEndIndex", "startComponents", "endComponents", "start", "end", "block", "years_1", "PATTERN", "OPENING_GROUP", "ENDING_GROUP", "FIRST_NUMBERS_GROUP", "SECOND_NUMBERS_GROUP", "YEAR_GROUP", "SlashDateFormatParser", "littleEndian", "context", "match", "index", "text", "result", "month", "day", "rawYearNumber", "year", "exports", "constants_1", "results_1", "AbstractParserWithWordBoundary_1", "timeunits_1", "PATTERN", "ENTimeUnitCasualRelativeFormatParser", "context", "match", "prefix", "timeUnits", "exports", "abstractRefiners_1", "results_1", "constants_1", "timeunits_1", "hasImpliedEarlierReferenceDate", "result", "hasImpliedLaterReferenceDate", "ENMergeRelativeDateRefiner", "textBetween", "currentResult", "nextResult", "timeUnits", "components", "exports", "ENTimeUnitWithinFormatParser_1", "__importDefault", "ENMonthNameLittleEndianParser_1", "ENMonthNameMiddleEndianParser_1", "ENMonthNameParser_1", "ENCasualYearMonthDayParser_1", "ENSlashMonthFormatParser_1", "ENTimeExpressionParser_1", "ENTimeUnitAgoFormatParser_1", "ENTimeUnitLaterFormatParser_1", "ENMergeDateRangeRefiner_1", "ENMergeDateTimeRefiner_1", "configurations_1", "ENCasualDateParser_1", "ENCasualTimeParser_1", "ENWeekdayParser_1", "ENRelativeDateFormatParser_1", "chrono_1", "SlashDateFormatParser_1", "ENTimeUnitCasualRelativeFormatParser_1", "ENMergeRelativeDateRefiner_1", "exports", "createCasualConfiguration", "createConfiguration", "parse", "text", "ref", "option", "parseDate", "littleEndian", "strictMode", "AbstractTimeExpressionParser_1", "DETimeExpressionParser", "context", "match", "exports", "pattern_1", "years_1", "exports", "parseNumberPattern", "match", "num", "parseYear", "rawYearNumber", "SINGLE_TIME_UNIT_PATTERN", "SINGLE_TIME_UNIT_REGEX", "parseTimeUnits", "timeunitText", "fragments", "remainingText", "collectDateTimeFragment", "unit", "constants_1", "pattern_1", "AbstractParserWithWordBoundary_1", "weeks_1", "PATTERN", "PREFIX_GROUP", "SUFFIX_GROUP", "WEEKDAY_GROUP", "DEWeekdayParser", "context", "match", "dayOfWeek", "offset", "prefix", "postfix", "modifierWord", "modifier", "date", "exports", "index_1", "FIRST_REG_PATTERN", "SECOND_REG_PATTERN", "HOUR_GROUP", "MINUTE_GROUP", "SECOND_GROUP", "AM_PM_HOUR_GROUP", "DESpecificTimeExpressionParser", "_DESpecificTimeExpressionParser", "context", "match", "result", "remainingText", "secondMatch", "extractingComponents", "hour", "minute", "meridiem", "ampm", "second", "exports", "AbstractMergeDateRangeRefiner_1", "__importDefault", "DEMergeDateRangeRefiner", "exports", "AbstractMergeDateTimeRefiner_1", "__importDefault", "DEMergeDateTimeRefiner", "exports", "dayjs_1", "__importDefault", "index_1", "AbstractParserWithWordBoundary_1", "dayjs_2", "timeunits_1", "DECasualTimeParser", "_DECasualTimeParser", "context", "match", "targetDate", "timeKeywordPattern", "component", "exports", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "dayjs_2", "DECasualTimeParser_1", "references", "__importStar", "PATTERN", "DATE_GROUP", "TIME_GROUP", "DECasualDateParser", "context", "match", "targetDate", "dateKeyword", "timeKeyword", "component", "exports", "years_1", "constants_1", "constants_2", "pattern_1", "AbstractParserWithWordBoundary_1", "PATTERN", "DATE_GROUP", "DATE_TO_GROUP", "MONTH_NAME_GROUP", "YEAR_GROUP", "DEMonthNameLittleEndianParser", "context", "match", "result", "month", "day", "yearNumber", "year", "endDate", "exports", "constants_1", "results_1", "AbstractParserWithWordBoundary_1", "timeunits_1", "pattern_1", "DETimeUnitAgoFormatParser", "context", "match", "num", "unit", "timeUnits", "modifier", "exports", "configurations_1", "chrono_1", "SlashDateFormatParser_1", "__importDefault", "ISOFormatParser_1", "DETimeExpressionParser_1", "DEWeekdayParser_1", "DESpecificTimeExpressionParser_1", "DEMergeDateRangeRefiner_1", "DEMergeDateTimeRefiner_1", "DECasualDateParser_1", "DECasualTimeParser_1", "DEMonthNameLittleEndianParser_1", "DETimeUnitRelativeFormatParser_1", "exports", "createCasualConfiguration", "createConfiguration", "parse", "text", "ref", "option", "parseDate", "littleEndian", "strictMode", "dayjs_1", "__importDefault", "index_1", "AbstractParserWithWordBoundary_1", "dayjs_2", "references", "__importStar", "FRCasualDateParser", "context", "match", "targetDate", "lowerText", "component", "exports", "index_1", "AbstractParserWithWordBoundary_1", "FRCasualTimeParser", "context", "match", "suffixLower", "component", "exports", "AbstractTimeExpressionParser_1", "FRTimeExpressionParser", "context", "match", "exports", "AbstractMergeDateTimeRefiner_1", "__importDefault", "FRMergeDateTimeRefiner", "exports", "AbstractMergeDateRangeRefiner_1", "__importDefault", "FRMergeDateRangeRefiner", "exports", "pattern_1", "exports", "parseNumberPattern", "match", "num", "parseOrdinalNumberPattern", "parseYear", "yearNumber", "SINGLE_TIME_UNIT_PATTERN", "SINGLE_TIME_UNIT_REGEX", "parseTimeUnits", "timeunitText", "fragments", "remainingText", "collectDateTimeFragment", "unit", "constants_1", "pattern_1", "AbstractParserWithWordBoundary_1", "weeks_1", "PATTERN", "WEEKDAY_GROUP", "POSTFIX_GROUP", "FRWeekdayParser", "context", "match", "dayOfWeek", "offset", "suffix", "modifier", "date", "exports", "index_1", "FIRST_REG_PATTERN", "SECOND_REG_PATTERN", "HOUR_GROUP", "MINUTE_GROUP", "SECOND_GROUP", "AM_PM_HOUR_GROUP", "FRSpecificTimeExpressionParser", "_FRSpecificTimeExpressionParser", "context", "match", "result", "remainingText", "secondMatch", "extractingComponents", "hour", "minute", "meridiem", "ampm", "second", "exports", "years_1", "constants_1", "constants_2", "constants_3", "pattern_1", "AbstractParserWithWordBoundary_1", "PATTERN", "DATE_GROUP", "DATE_TO_GROUP", "MONTH_NAME_GROUP", "YEAR_GROUP", "FRMonthNameLittleEndianParser", "context", "match", "result", "month", "day", "yearNumber", "year", "endDate", "exports", "constants_1", "results_1", "AbstractParserWithWordBoundary_1", "timeunits_1", "FRTimeUnitAgoFormatParser", "context", "match", "timeUnits", "outputTimeUnits", "exports", "constants_1", "results_1", "AbstractParserWithWordBoundary_1", "FRTimeUnitWithinFormatParser", "context", "match", "timeUnits", "exports", "constants_1", "results_1", "AbstractParserWithWordBoundary_1", "timeunits_1", "pattern_1", "FRTimeUnitAgoFormatParser", "context", "match", "num", "unit", "timeUnits", "modifier", "exports", "configurations_1", "chrono_1", "FRCasualDateParser_1", "__importDefault", "FRCasualTimeParser_1", "SlashDateFormatParser_1", "FRTimeExpressionParser_1", "FRMergeDateTimeRefiner_1", "FRMergeDateRangeRefiner_1", "FRWeekdayParser_1", "FRSpecificTimeExpressionParser_1", "FRMonthNameLittleEndianParser_1", "FRTimeUnitAgoFormatParser_1", "FRTimeUnitWithinFormatParser_1", "FRTimeUnitRelativeFormatParser_1", "exports", "createCasualConfiguration", "createConfiguration", "parse", "text", "ref", "option", "parseDate", "littleEndian", "strictMode", "toHankaku", "text", "alphaNum", "exports", "token", "constants_1", "years_1", "dayjs_1", "__importDefault", "PATTERN", "SPECIAL_YEAR_GROUP", "TYPICAL_YEAR_GROUP", "ERA_GROUP", "YEAR_NUMBER_GROUP", "MONTH_GROUP", "DAY_GROUP", "JPStandardParser", "context", "match", "month", "day", "components", "moment", "yearNumText", "year", "exports", "AbstractMergeDateRangeRefiner_1", "__importDefault", "JPMergeDateRangeRefiner", "exports", "dayjs_1", "__importDefault", "index_1", "references", "__importStar", "PATTERN", "JPCasualDateParser", "context", "match", "text", "date", "components", "exports", "JPStandardParser_1", "__importDefault", "JPMergeDateRangeRefiner_1", "JPCasualDateParser_1", "chrono_1", "exports", "createCasualConfiguration", "createConfiguration", "parse", "text", "ref", "option", "parseDate", "exports", "parseYear", "match", "yearNumber", "constants_1", "pattern_1", "AbstractParserWithWordBoundary_1", "weeks_1", "PATTERN", "PREFIX_GROUP", "WEEKDAY_GROUP", "POSTFIX_GROUP", "PTWeekdayParser", "context", "match", "dayOfWeek", "offset", "prefix", "postfix", "norm", "modifier", "date", "exports", "AbstractTimeExpressionParser_1", "PTTimeExpressionParser", "exports", "AbstractMergeDateTimeRefiner_1", "__importDefault", "PTMergeDateTimeRefiner", "exports", "AbstractMergeDateRangeRefiner_1", "__importDefault", "PTMergeDateRangeRefiner", "exports", "years_1", "constants_1", "constants_2", "pattern_1", "AbstractParserWithWordBoundary_1", "PATTERN", "DATE_GROUP", "DATE_TO_GROUP", "MONTH_NAME_GROUP", "YEAR_GROUP", "PTMonthNameLittleEndianParser", "context", "match", "result", "month", "day", "yearNumber", "year", "endDate", "exports", "AbstractParserWithWordBoundary_1", "references", "__importStar", "PTCasualDateParser", "context", "match", "lowerText", "component", "exports", "index_1", "AbstractParserWithWordBoundary_1", "dayjs_1", "dayjs_2", "__importDefault", "PTCasualTimeParser", "context", "match", "targetDate", "component", "exports", "configurations_1", "chrono_1", "SlashDateFormatParser_1", "__importDefault", "PTWeekdayParser_1", "PTTimeExpressionParser_1", "PTMergeDateTimeRefiner_1", "PTMergeDateRangeRefiner_1", "PTMonthNameLittleEndianParser_1", "PTCasualDateParser_1", "PTCasualTimeParser_1", "exports", "createCasualConfiguration", "createConfiguration", "parse", "text", "ref", "option", "parseDate", "littleEndian", "strictMode", "AbstractMergeDateRangeRefiner_1", "__importDefault", "NLMergeDateRangeRefiner", "exports", "AbstractMergeDateTimeRefiner_1", "__importDefault", "NLMergeDateTimeRefiner", "exports", "AbstractParserWithWordBoundary_1", "references", "__importStar", "NLCasualDateParser", "context", "match", "lowerText", "component", "exports", "index_1", "AbstractParserWithWordBoundary_1", "dayjs_1", "__importDefault", "dayjs_2", "DAY_GROUP", "MOMENT_GROUP", "NLCasualTimeParser", "context", "match", "targetDate", "component", "exports", "pattern_1", "years_1", "exports", "parseNumberPattern", "match", "num", "parseOrdinalNumberPattern", "parseYear", "rawYearNumber", "SINGLE_TIME_UNIT_PATTERN", "SINGLE_TIME_UNIT_REGEX", "parseTimeUnits", "timeunitText", "fragments", "remainingText", "collectDateTimeFragment", "unit", "constants_1", "results_1", "AbstractParserWithWordBoundary_1", "NLTimeUnitWithinFormatParser", "context", "match", "timeUnits", "exports", "constants_1", "pattern_1", "AbstractParserWithWordBoundary_1", "weeks_1", "PATTERN", "PREFIX_GROUP", "WEEKDAY_GROUP", "POSTFIX_GROUP", "NLWeekdayParser", "context", "match", "dayOfWeek", "offset", "prefix", "postfix", "modifierWord", "modifier", "date", "exports", "years_1", "constants_1", "constants_2", "constants_3", "pattern_1", "AbstractParserWithWordBoundary_1", "PATTERN", "MONTH_NAME_GROUP", "DATE_GROUP", "DATE_TO_GROUP", "YEAR_GROUP", "NLMonthNameMiddleEndianParser", "context", "match", "month", "day", "components", "year", "endDate", "result", "exports", "constants_1", "years_1", "pattern_1", "constants_2", "AbstractParserWithWordBoundary_1", "PATTERN", "MONTH_NAME_GROUP", "YEAR_GROUP", "NLMonthNameParser", "context", "match", "components", "monthName", "month", "year", "exports", "AbstractParserWithWordBoundary_1", "PATTERN", "MONTH_GROUP", "YEAR_GROUP", "NLSlashMonthFormatParser", "context", "match", "year", "month", "exports", "AbstractTimeExpressionParser_1", "NLTimeExpressionParser", "context", "match", "exports", "constants_1", "pattern_1", "AbstractParserWithWordBoundary_1", "PATTERN", "YEAR_NUMBER_GROUP", "MONTH_NAME_GROUP", "MONTH_NUMBER_GROUP", "DATE_NUMBER_GROUP", "NLCasualYearMonthDayParser", "context", "match", "month", "year", "exports", "AbstractParserWithWordBoundary_1", "index_1", "dayjs_1", "dayjs_2", "__importDefault", "DATE_GROUP", "TIME_OF_DAY_GROUP", "NLCasualDateTimeParser", "context", "match", "dateText", "timeText", "component", "targetDate", "exports", "constants_1", "results_1", "AbstractParserWithWordBoundary_1", "timeunits_1", "PATTERN", "NLTimeUnitCasualRelativeFormatParser", "context", "match", "prefix", "timeUnits", "exports", "constants_1", "results_1", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "pattern_1", "PATTERN", "MODIFIER_WORD_GROUP", "RELATIVE_WORD_GROUP", "NLRelativeDateFormatParser", "context", "match", "modifier", "unitWord", "timeunit", "timeUnits", "components", "date", "exports", "constants_1", "results_1", "AbstractParserWithWordBoundary_1", "timeunits_1", "PATTERN", "STRICT_PATTERN", "NLTimeUnitAgoFormatParser", "strictMode", "context", "match", "timeUnits", "outputTimeUnits", "exports", "constants_1", "results_1", "AbstractParserWithWordBoundary_1", "PATTERN", "STRICT_PATTERN", "GROUP_NUM_TIMEUNITS", "NLTimeUnitLaterFormatParser", "strictMode", "context", "match", "fragments", "exports", "configurations_1", "chrono_1", "NLMergeDateRangeRefiner_1", "__importDefault", "NLMergeDateTimeRefiner_1", "NLCasualDateParser_1", "NLCasualTimeParser_1", "SlashDateFormatParser_1", "NLTimeUnitWithinFormatParser_1", "NLWeekdayParser_1", "NLMonthNameMiddleEndianParser_1", "NLMonthNameParser_1", "NLSlashMonthFormatParser_1", "NLTimeExpressionParser_1", "NLCasualYearMonthDayParser_1", "NLCasualDateTimeParser_1", "NLTimeUnitCasualRelativeFormatParser_1", "NLRelativeDateFormatParser_1", "NLTimeUnitAgoFormatParser_1", "NLTimeUnitLaterFormatParser_1", "exports", "createCasualConfiguration", "createConfiguration", "parse", "text", "ref", "option", "parseDate", "littleEndian", "strictMode", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "NOW_GROUP", "DAY_GROUP_1", "TIME_GROUP_1", "TIME_GROUP_2", "DAY_GROUP_3", "TIME_GROUP_3", "ZHHantCasualDateParser", "context", "match", "index", "result", "refMoment", "startMoment", "day1", "time1", "time2", "day3", "timeString3", "time3", "exports", "exports", "zhStringToNumber", "text", "number", "i", "char", "zhStringToYear", "string", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "constants_1", "YEAR_GROUP", "MONTH_GROUP", "DAY_GROUP", "ZHHantDateParser", "context", "match", "startMoment", "result", "month", "day", "year", "exports", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "constants_1", "PATTERN", "NUMBER_GROUP", "UNIT_GROUP", "ZHHantDeadlineFormatParser", "context", "match", "result", "number", "string", "date", "unitAbbr", "exports", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "constants_1", "PATTERN", "ZHHantRelationWeekdayParser", "context", "match", "result", "dayOfWeek", "offset", "modifier", "prefix", "startMoment", "startMomentFixed", "refOffset", "exports", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "constants_1", "FIRST_REG_PATTERN", "SECOND_REG_PATTERN", "DAY_GROUP_1", "ZH_AM_PM_HOUR_GROUP_1", "ZH_AM_PM_HOUR_GROUP_2", "DAY_GROUP_3", "ZH_AM_PM_HOUR_GROUP_3", "HOUR_GROUP", "MINUTE_GROUP", "SECOND_GROUP", "AM_PM_HOUR_GROUP", "ZHHantTimeExpressionParser", "context", "match", "refMoment", "result", "startMoment", "day1", "day3", "hour", "minute", "meridiem", "second", "ampm", "zhAMPMString1", "zhAMPM1", "zhAMPMString2", "zhAMPM2", "zhAMPMString3", "zhAMPM3", "endMoment", "exports", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "constants_1", "PATTERN", "ZHHantWeekdayParser", "context", "match", "result", "dayOfWeek", "offset", "startMoment", "startMomentFixed", "refOffset", "exports", "AbstractMergeDateRangeRefiner_1", "__importDefault", "ZHHantMergeDateRangeRefiner", "exports", "AbstractMergeDateTimeRefiner_1", "__importDefault", "ZHHantMergeDateTimeRefiner", "exports", "chrono_1", "ExtractTimezoneOffsetRefiner_1", "__importDefault", "configurations_1", "ZHHantCasualDateParser_1", "ZHHantDateParser_1", "ZHHantDeadlineFormatParser_1", "ZHHantRelationWeekdayParser_1", "ZHHantTimeExpressionParser_1", "ZHHantWeekdayParser_1", "ZHHantMergeDateRangeRefiner_1", "ZHHantMergeDateTimeRefiner_1", "exports", "createCasualConfiguration", "createConfiguration", "parse", "text", "ref", "option", "parseDate", "configuration", "refiner", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "NOW_GROUP", "DAY_GROUP_1", "TIME_GROUP_1", "TIME_GROUP_2", "DAY_GROUP_3", "TIME_GROUP_3", "ZHHansCasualDateParser", "context", "match", "index", "result", "refMoment", "startMoment", "day1", "time1", "time2", "day3", "timeString3", "time3", "exports", "exports", "zhStringToNumber", "text", "number", "i", "char", "zhStringToYear", "string", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "constants_1", "YEAR_GROUP", "MONTH_GROUP", "DAY_GROUP", "ZHHansDateParser", "context", "match", "startMoment", "result", "month", "day", "year", "exports", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "constants_1", "PATTERN", "NUMBER_GROUP", "UNIT_GROUP", "ZHHansDeadlineFormatParser", "context", "match", "result", "number", "string", "date", "unitAbbr", "exports", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "constants_1", "PATTERN", "ZHHansRelationWeekdayParser", "context", "match", "result", "dayOfWeek", "offset", "modifier", "prefix", "startMoment", "startMomentFixed", "refOffset", "exports", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "constants_1", "FIRST_REG_PATTERN", "SECOND_REG_PATTERN", "DAY_GROUP_1", "ZH_AM_PM_HOUR_GROUP_1", "ZH_AM_PM_HOUR_GROUP_2", "DAY_GROUP_3", "ZH_AM_PM_HOUR_GROUP_3", "HOUR_GROUP", "MINUTE_GROUP", "SECOND_GROUP", "AM_PM_HOUR_GROUP", "ZHHansTimeExpressionParser", "context", "match", "refMoment", "result", "startMoment", "day1", "day3", "hour", "minute", "meridiem", "second", "ampm", "zhAMPM1", "zhAMPM2", "zhAMPM3", "endMoment", "exports", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "constants_1", "PATTERN", "ZHHansWeekdayParser", "context", "match", "result", "dayOfWeek", "offset", "startMoment", "startMomentFixed", "refOffset", "exports", "AbstractMergeDateRangeRefiner_1", "__importDefault", "ZHHansMergeDateRangeRefiner", "exports", "AbstractMergeDateTimeRefiner_1", "__importDefault", "ZHHansMergeDateTimeRefiner", "exports", "chrono_1", "ExtractTimezoneOffsetRefiner_1", "__importDefault", "configurations_1", "ZHHansCasualDateParser_1", "ZHHansDateParser_1", "ZHHansDeadlineFormatParser_1", "ZHHansRelationWeekdayParser_1", "ZHHansTimeExpressionParser_1", "ZHHansWeekdayParser_1", "ZHHansMergeDateRangeRefiner_1", "ZHHansMergeDateTimeRefiner_1", "exports", "createCasualConfiguration", "createConfiguration", "parse", "text", "ref", "option", "parseDate", "configuration", "refiner", "__exportStar", "exports", "__importStar", "pattern_1", "years_1", "exports", "parseNumberPattern", "match", "num", "parseOrdinalNumberPattern", "year", "parseYear", "rawYearNumber", "SINGLE_TIME_UNIT_PATTERN", "SINGLE_TIME_UNIT_REGEX", "parseTimeUnits", "timeunitText", "fragments", "remainingText", "collectDateTimeFragment", "unit", "constants_1", "results_1", "AbstractParserWithWordBoundary_1", "PATTERN", "PATTERN_WITH_PREFIX", "PATTERN_WITHOUT_PREFIX", "RUTimeUnitWithinFormatParser", "context", "match", "timeUnits", "exports", "years_1", "constants_1", "constants_2", "constants_3", "pattern_1", "AbstractParserWithWordBoundary_1", "PATTERN", "DATE_GROUP", "DATE_TO_GROUP", "MONTH_NAME_GROUP", "YEAR_GROUP", "RUMonthNameLittleEndianParser", "context", "match", "result", "month", "day", "yearNumber", "year", "endDate", "exports", "constants_1", "years_1", "pattern_1", "constants_2", "AbstractParserWithWordBoundary_1", "PATTERN", "MONTH_NAME_GROUP", "YEAR_GROUP", "RUMonthNameParser", "context", "match", "monthName", "result", "month", "year", "exports", "index_1", "AbstractTimeExpressionParser_1", "constants_1", "RUTimeExpressionParser", "strictMode", "context", "match", "components", "hour", "exports", "constants_1", "results_1", "AbstractParserWithWordBoundary_1", "timeunits_1", "PATTERN", "RUTimeUnitAgoFormatParser", "context", "match", "timeUnits", "outputTimeUnits", "exports", "AbstractMergeDateRangeRefiner_1", "__importDefault", "xf", "exports", "AbstractMergeDateTimeRefiner_1", "__importDefault", "RUMergeDateTimeRefiner", "exports", "AbstractParserWithWordBoundary_1", "references", "__importStar", "constants_1", "PATTERN", "RUCasualDateParser", "context", "match", "lowerText", "component", "exports", "AbstractParserWithWordBoundary_1", "references", "__importStar", "dayjs_1", "dayjs_2", "__importDefault", "constants_1", "PATTERN", "RUCasualTimeParser", "context", "match", "targetDate", "lowerText", "component", "daysToAdd", "exports", "constants_1", "pattern_1", "AbstractParserWithWordBoundary_1", "weeks_1", "PATTERN", "PREFIX_GROUP", "WEEKDAY_GROUP", "POSTFIX_GROUP", "RUWeekdayParser", "context", "match", "dayOfWeek", "offset", "prefix", "postfix", "modifierWord", "modifier", "date", "exports", "constants_1", "results_1", "dayjs_1", "__importDefault", "AbstractParserWithWordBoundary_1", "pattern_1", "PATTERN", "MODIFIER_WORD_GROUP", "RELATIVE_WORD_GROUP", "RURelativeDateFormatParser", "context", "match", "modifier", "unitWord", "timeunit", "timeUnits", "components", "date", "exports", "constants_1", "results_1", "AbstractParserWithWordBoundary_1", "timeunits_1", "PATTERN", "RUTimeUnitCasualRelativeFormatParser", "context", "match", "prefix", "timeUnits", "exports", "RUTimeUnitWithinFormatParser_1", "__importDefault", "RUMonthNameLittleEndianParser_1", "RUMonthNameParser_1", "RUTimeExpressionParser_1", "RUTimeUnitAgoFormatParser_1", "RUMergeDateRangeRefiner_1", "RUMergeDateTimeRefiner_1", "configurations_1", "RUCasualDateParser_1", "RUCasualTimeParser_1", "RUWeekdayParser_1", "RURelativeDateFormatParser_1", "chrono_1", "SlashDateFormatParser_1", "RUTimeUnitCasualRelativeFormatParser_1", "exports", "createCasualConfiguration", "createConfiguration", "parse", "text", "ref", "option", "parseDate", "strictMode", "en", "__importStar", "exports", "chrono_1", "Meridiem", "de", "fr", "ja", "pt", "nl", "zh", "ru", "parse", "text", "ref", "option", "parseDate", "dailyNotes_exports", "__export", "dailyNotes", "__toCommonJS", "import_react", "import_api", "import_api", "bundleIds", "getPreferences", "useAppExists", "state", "setState", "apps", "preferredApp", "getPreferences", "found", "app", "bundleIds", "import_react", "import_os", "import_fs", "import_path", "bundleIds", "craftDataRoot", "id", "path", "searchPath", "Config", "space", "root", "regexIDsPart", "str", "split", "pwd", "pathToIndexDatabases", "databasesForExistingRealms", "e", "useConfig", "appExistsLoading", "appExists", "state", "setState", "prev", "Config", "import_api", "import_react", "chrono", "import_api", "import_api", "import_jsx_runtime", "DailyNoteRef", "date", "text", "spaceID", "import_api", "chrono", "import_jsx_runtime", "Shortcut", "dayRef", "spaceID", "toTitleCase", "str", "import_jsx_runtime", "DailyNotes", "appExists", "config", "query", "date", "space", "DailyNoteRef", "Shortcut", "import_jsx_runtime", "dailyNotes", "appExists", "useAppExists", "config", "configLoading", "useConfig", "query", "setQuery", "date", "setDate", "text", "DailyNotes"]
}
